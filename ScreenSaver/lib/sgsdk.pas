//
// Generated by SGWrapperGen - DO NOT EDIT!
//
// SwinGame exported library
//
{$I sgTrace.inc}

library SGSDK;
  uses SysUtils, Strings, sgTrace, sgShared,
    sgTimers, sgPhysics, sgCharacters, sgAudio, sgImages, SDL, sgAnimations, SDL_TTF, SDL_Image, sgInput, sgTypes, sgGraphics, sgGeometry, sgText, SDL_Mixer, sgCore, sgResources, sgCamera, sgSprites;
  
  // The exception trap is used to ensure that exceptions do not propagate beyond the
  // library boundary.
  procedure TrapException(exc: Exception; fromMethod: String);
  begin
    HasException := true;
    
    if Assigned(exc) then
      ErrorMessage := 'Error from ' + fromMethod + ' - ' + exc.Message
    else
      ErrorMessage := 'Unknown error from ' + fromMethod;
      
    {$IFDEF TRACE}
      Trace('SGSDK.dll', 'Error', fromMethod, ErrorMessage);
    {$ENDIF}
  end;
  
  // The following routines are used to copy array data
  procedure TriCopyToPtr(tri: Point2DPtr; const fromTri: Triangle);
  var
    i: LongInt;
  begin
    for i := 0 to 2 do
    begin
      (tri + i)^ := fromTri[i];
    end;
  end;
  
  procedure TriCopyFromPtr(var toTri: Triangle; tri: Point2DPtr);
  var
    i: LongInt;
  begin
    for i := 0 to 2 do
    begin
      toTri[i] := (tri + i)^;
    end;
  end;
  
  procedure MatrixCopyToPtr(matrix: SinglePtr; const fromMatrix: Matrix2D);
  var
    i, j: LongInt;
  begin
    //WriteLn('************************');
    for i := 0 to 2 do
    begin
      //Write('|  ');
      for j := 0 to 2 do
      begin
        //Write(fromMatrix[i,j]:4:2, '  ');
        (matrix + (i * 3) + j)^ := fromMatrix[i,j];
        //matrix[i,j] := fromMatrix[i,j];
      end;
      //Writeln('|');
    end;
    //WriteLn('************************');
  end;
  
  procedure MatrixCopyFromPtr(var toMatrix: Matrix2D; matrix: SinglePtr);
  var
    i, j: LongInt;
  begin
    //WriteLn('************************');
    for i := 0 to 2 do
    begin
      //Write('|  ');
      for j := 0 to 2 do
      begin
        toMatrix[i,j] := (matrix + (i * 3) + j)^;
        //toMatrix[i,j] := matrix[i,j];
        
        //Write(toMatrix[i,j]:4:2, '  ');
      end;
      //Writeln('|');
    end;
    //WriteLn('************************');
  end;
  
  procedure LineCopyFromPtr(data: LineSegmentPtr; len: LongInt; out arr: LinesArray);
  var
    i: LongInt;
  begin
    if len < 0 then raise Exception.Create('Length of array cannot be negative');

    SetLength(arr, len);

    for i := 0 to len - 1 do
    begin
      arr[i] := (data + i)^;
    end;
  end;
  
  procedure LineCopyToPtr(const arr: LinesArray; len: LongInt; data: LineSegmentPtr);
  var
    i: LongInt;
  begin
    if len < Length(arr) then raise Exception.Create('Error in array size to call expected length to be ' + IntToStr(len));
    
    for i := Low(arr) to High(arr) do
    begin
      (data + i)^ := arr[i];
    end;
  end;
  
  procedure TriangleCopyFromPtr(data: TrianglePtr; len: LongInt; out arr: TriangleArray);
  var
    i: LongInt;
  begin
    if len < 0 then raise Exception.Create('Length of array cannot be negative');

    SetLength(arr, len);

    for i := 0 to len - 1 do
    begin
      arr[i] := (data + i)^;
    end;
  end;
  
  procedure TriangleCopyToPtr(const arr: TriangleArray; len: LongInt; data: TrianglePtr);
  var
    i: LongInt;
  begin
    if len < Length(arr) then raise Exception.Create('Error in array size to call expected length to be ' + IntToStr(len));
    
    for i := Low(arr) to High(arr) do
    begin
      (data + i)^ := arr[i];
    end;
  end;
  
  procedure BmpCopyFromPtr(bmp: BitmapPtr; len: LongInt; out arr: BitmapArray);
  var
    i: LongInt;
  begin
    if len < 0 then raise Exception.Create('Length of array cannot be negative');

    SetLength(arr, len);

    for i := 0 to len - 1 do
    begin
      arr[i] := (bmp + i)^;
    end;
  end;
  
  procedure BmpCopyToPtr(const arr: BitmapArray; len: LongInt; bmp: BitmapPtr);
  var
    i: LongInt;
  begin
    if len < Length(arr) then raise Exception.Create('Error in array size to call expected length to be ' + IntToStr(len));
    
    for i := Low(arr) to High(arr) do
    begin
      (bmp + i)^ := arr[i];
    end;
  end;
  
  procedure LongIntCopyFromPtr(data: LongIntPtr; len: LongInt; out arr: LongIntArray);
  var
    i: LongInt;
  begin
    if len < 0 then raise Exception.Create('Length of array cannot be negative');

    SetLength(arr, len);

    for i := 0 to len - 1 do
    begin
      arr[i] := (data + i)^;
    end;
  end;
  
  procedure LongIntCopyToPtr(const arr: LongIntArray; len: LongInt; data: LongIntPtr);
  var
    i: LongInt;
  begin
    if len < Length(arr) then raise Exception.Create('Error in array size to call expected length to be ' + IntToStr(len));
    
    for i := Low(arr) to High(arr) do
    begin
      (data + i)^ := arr[i];
    end;
  end;
  
  procedure Point2DCopyFromPtr(data: Point2DPtr; len: LongInt; out arr: Point2DArray);
  var
    i: LongInt;
  begin
    if len < 0 then raise Exception.Create('Length of array cannot be negative');
    
    SetLength(arr, len);
    
    for i := 0 to len - 1 do
    begin
      arr[i] := (data + i)^;
    end;
  end;
  
  procedure Point2DCopyToPtr(const arr: Point2DArray; len: LongInt; data: Point2DPtr);
  var
    i: LongInt;
  begin
    if len < Length(arr) then raise Exception.Create('Error in array size to call expected length to be ' + IntToStr(len));
    
    for i := Low(arr) to High(arr) do
    begin
      (data + i)^ := arr[i];
    end;
  end;
  
  procedure StringCopyFromPtr(str: StringPtr; len: LongInt; out arr: StringArray);
  var
    i: LongInt;
  begin
    if len < 0 then raise Exception.Create('Length of array cannot be negative');
    
    SetLength(arr, len);
    
    for i := 0 to len - 1 do
    begin
      StrCopy(PChar(arr[i]), PChar((str + i)^));
    end;
  end;
  
  procedure StringCopyToPtr(const arr: StringArray; len: LongInt; str: StringPtr);
  var
    i: LongInt;
  begin
    if len < Length(arr) then raise Exception.Create('Error in array size to call expected length to be ' + IntToStr(len));
    
    for i := Low(arr) to High(arr) do
    begin
      StrCopy(PChar((str + i)^), PChar(arr[i]));
    end;
  end;
  
  function sg_Animation_AnimationCurrentCell(anim: Animation): LongInt; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Animation_AnimationCurrentCell');
    {$ENDIF}
    
    try
      result := sgAnimations.AnimationCurrentCell(anim);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Animation_AnimationCurrentCell');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Animation_AnimationCurrentCell');
    {$ENDIF}
  end;
  
  function sg_Animation_AnimationEnded(anim: Animation): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Animation_AnimationEnded');
    {$ENDIF}
    
    try
      result := sgAnimations.AnimationEnded(anim);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Animation_AnimationEnded');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Animation_AnimationEnded');
    {$ENDIF}
  end;
  
  function sg_Animation_AnimationEnteredFrame(anim: Animation): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Animation_AnimationEnteredFrame');
    {$ENDIF}
    
    try
      result := sgAnimations.AnimationEnteredFrame(anim);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Animation_AnimationEnteredFrame');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Animation_AnimationEnteredFrame');
    {$ENDIF}
  end;
  
  function sg_Animation_AnimationFrameTime(anim: Animation): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Animation_AnimationFrameTime');
    {$ENDIF}
    
    try
      result := sgAnimations.AnimationFrameTime(anim);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Animation_AnimationFrameTime');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Animation_AnimationFrameTime');
    {$ENDIF}
  end;
  
  function sg_Animation_AnimationIndex(temp: AnimationTemplate; name: PChar): LongInt; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Animation_AnimationIndex');
    {$ENDIF}
    
    try
      result := sgAnimations.AnimationIndex(temp, name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Animation_AnimationIndex');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Animation_AnimationIndex');
    {$ENDIF}
  end;
  
  procedure sg_Animation_AnimationName(temp: AnimationTemplate; idx: LongInt; result: PChar); cdecl; export;
    var
      result_temp: String;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Animation_AnimationName');
    {$ENDIF}
    
    try
      result_temp := sgAnimations.AnimationName(temp, idx);
        StrCopy(result, PChar(result_temp));
    Except on exc: Exception do 
      TrapException(exc, 'sg_Animation_AnimationName');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Animation_AnimationName');
    {$ENDIF}
  end;
  
  function sg_Animation_AnimationTemplateNamed(name: PChar): AnimationTemplate; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Animation_AnimationTemplateNamed');
    {$ENDIF}
    
    try
      result := sgAnimations.AnimationTemplateNamed(name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Animation_AnimationTemplateNamed');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Animation_AnimationTemplateNamed');
    {$ENDIF}
  end;
  
  procedure sg_Animation_AssignAnimation(anim: Animation; idx: LongInt; frames: AnimationTemplate); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Animation_AssignAnimation');
    {$ENDIF}
  
    try 
      sgAnimations.AssignAnimation(anim, idx, frames);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Animation_AssignAnimation');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Animation_AssignAnimation');
    {$ENDIF}
  end;
  
  procedure sg_Animation_AssignAnimationNamed(anim: Animation; name: PChar; frames: AnimationTemplate); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Animation_AssignAnimationNamed');
    {$ENDIF}
  
    try 
      sgAnimations.AssignAnimation(anim, name, frames);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Animation_AssignAnimationNamed');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Animation_AssignAnimationNamed');
    {$ENDIF}
  end;
  
  procedure sg_Animation_AssignAnimationNamedWithSound(anim: Animation; name: PChar; frames: AnimationTemplate; withSound: Boolean); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Animation_AssignAnimationNamedWithSound');
    {$ENDIF}
  
    try 
      sgAnimations.AssignAnimation(anim, name, frames, withSound);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Animation_AssignAnimationNamedWithSound');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Animation_AssignAnimationNamedWithSound');
    {$ENDIF}
  end;
  
  procedure sg_Animation_AssignAnimationWithSound(anim: Animation; idx: LongInt; frames: AnimationTemplate; withSound: Boolean); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Animation_AssignAnimationWithSound');
    {$ENDIF}
  
    try 
      sgAnimations.AssignAnimation(anim, idx, frames, withSound);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Animation_AssignAnimationWithSound');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Animation_AssignAnimationWithSound');
    {$ENDIF}
  end;
  
  function sg_Animation_CreateAnimation(identifier: LongInt; frames: AnimationTemplate; withSound: Boolean): Animation; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Animation_CreateAnimation');
    {$ENDIF}
    
    try
      result := sgAnimations.CreateAnimation(identifier, frames, withSound);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Animation_CreateAnimation');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Animation_CreateAnimation');
    {$ENDIF}
  end;
  
  function sg_Animation_CreateAnimationNamed(identifier: PChar; frames: AnimationTemplate): Animation; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Animation_CreateAnimationNamed');
    {$ENDIF}
    
    try
      result := sgAnimations.CreateAnimation(identifier, frames);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Animation_CreateAnimationNamed');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Animation_CreateAnimationNamed');
    {$ENDIF}
  end;
  
  function sg_Animation_CreateAnimationNamedWithSound(identifier: PChar; frames: AnimationTemplate; withSound: Boolean): Animation; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Animation_CreateAnimationNamedWithSound');
    {$ENDIF}
    
    try
      result := sgAnimations.CreateAnimation(identifier, frames, withSound);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Animation_CreateAnimationNamedWithSound');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Animation_CreateAnimationNamedWithSound');
    {$ENDIF}
  end;
  
  function sg_Animation_CreateAnimationWithSound(identifier: LongInt; frames: AnimationTemplate): Animation; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Animation_CreateAnimationWithSound');
    {$ENDIF}
    
    try
      result := sgAnimations.CreateAnimation(identifier, frames);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Animation_CreateAnimationWithSound');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Animation_CreateAnimationWithSound');
    {$ENDIF}
  end;
  
  procedure sg_Animation_DrawAnimation(ani: Animation; bmp: Bitmap; x: LongInt; y: LongInt); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Animation_DrawAnimation');
    {$ENDIF}
  
    try 
      sgAnimations.DrawAnimation(ani, bmp, x, y);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Animation_DrawAnimation');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Animation_DrawAnimation');
    {$ENDIF}
  end;
  
  procedure sg_Animation_DrawAnimationAtPoint(ani: Animation; bmp: Bitmap; var pt: Point2D); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Animation_DrawAnimationAtPoint');
    {$ENDIF}
  
    try 
      sgAnimations.DrawAnimation(ani, bmp, pt);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Animation_DrawAnimationAtPoint');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Animation_DrawAnimationAtPoint');
    {$ENDIF}
  end;
  
  procedure sg_Animation_DrawAnimationOnScreen(ani: Animation; bmp: Bitmap; x: LongInt; y: LongInt); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Animation_DrawAnimationOnScreen');
    {$ENDIF}
  
    try 
      sgAnimations.DrawAnimationOnScreen(ani, bmp, x, y);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Animation_DrawAnimationOnScreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Animation_DrawAnimationOnScreen');
    {$ENDIF}
  end;
  
  procedure sg_Animation_DrawAnimationOnScreenAtPt(ani: Animation; bmp: Bitmap; var pt: Point2D); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Animation_DrawAnimationOnScreenAtPt');
    {$ENDIF}
  
    try 
      sgAnimations.DrawAnimationOnScreen(ani, bmp, pt);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Animation_DrawAnimationOnScreenAtPt');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Animation_DrawAnimationOnScreenAtPt');
    {$ENDIF}
  end;
  
  procedure sg_Animation_DrawAnimationOntoDest(dest: Bitmap; ani: Animation; bmp: Bitmap; x: LongInt; y: LongInt); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Animation_DrawAnimationOntoDest');
    {$ENDIF}
  
    try 
      sgAnimations.DrawAnimation(dest, ani, bmp, x, y);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Animation_DrawAnimationOntoDest');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Animation_DrawAnimationOntoDest');
    {$ENDIF}
  end;
  
  procedure sg_Animation_DrawAnimationOntoDestAtPt(dest: Bitmap; ani: Animation; bmp: Bitmap; var pt: Point2D); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Animation_DrawAnimationOntoDestAtPt');
    {$ENDIF}
  
    try 
      sgAnimations.DrawAnimation(dest, ani, bmp, pt);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Animation_DrawAnimationOntoDestAtPt');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Animation_DrawAnimationOntoDestAtPt');
    {$ENDIF}
  end;
  
  procedure sg_Animation_FreeAnimation(var ani: Animation); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Animation_FreeAnimation');
    {$ENDIF}
  
    try 
      sgAnimations.FreeAnimation(ani);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Animation_FreeAnimation');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Animation_FreeAnimation');
    {$ENDIF}
  end;
  
  procedure sg_Animation_FreeAnimationTemplate(var framesToFree: AnimationTemplate); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Animation_FreeAnimationTemplate');
    {$ENDIF}
  
    try 
      sgAnimations.FreeAnimationTemplate(framesToFree);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Animation_FreeAnimationTemplate');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Animation_FreeAnimationTemplate');
    {$ENDIF}
  end;
  
  function sg_Animation_HasAnimationTemplate(name: PChar): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Animation_HasAnimationTemplate');
    {$ENDIF}
    
    try
      result := sgAnimations.HasAnimationTemplate(name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Animation_HasAnimationTemplate');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Animation_HasAnimationTemplate');
    {$ENDIF}
  end;
  
  function sg_Animation_LoadAnimationTemplate(filename: PChar): AnimationTemplate; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Animation_LoadAnimationTemplate');
    {$ENDIF}
    
    try
      result := sgAnimations.LoadAnimationTemplate(filename);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Animation_LoadAnimationTemplate');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Animation_LoadAnimationTemplate');
    {$ENDIF}
  end;
  
  function sg_Animation_MapAnimationTemplate(name: PChar; filename: PChar): AnimationTemplate; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Animation_MapAnimationTemplate');
    {$ENDIF}
    
    try
      result := sgAnimations.MapAnimationTemplate(name, filename);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Animation_MapAnimationTemplate');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Animation_MapAnimationTemplate');
    {$ENDIF}
  end;
  
  procedure sg_Animation_ReleaseAllAnimationTemplates(); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Animation_ReleaseAllAnimationTemplates');
    {$ENDIF}
  
    try 
      sgAnimations.ReleaseAllAnimationTemplates();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Animation_ReleaseAllAnimationTemplates');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Animation_ReleaseAllAnimationTemplates');
    {$ENDIF}
  end;
  
  procedure sg_Animation_ReleaseAnimationTemplate(name: PChar); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Animation_ReleaseAnimationTemplate');
    {$ENDIF}
  
    try 
      sgAnimations.ReleaseAnimationTemplate(name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Animation_ReleaseAnimationTemplate');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Animation_ReleaseAnimationTemplate');
    {$ENDIF}
  end;
  
  procedure sg_Animation_ResetAnimation(anim: Animation); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Animation_ResetAnimation');
    {$ENDIF}
  
    try 
      sgAnimations.RestartAnimation(anim);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Animation_ResetAnimation');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Animation_ResetAnimation');
    {$ENDIF}
  end;
  
  procedure sg_Animation_ResetAnimationWithSound(anim: Animation; withSound: Boolean); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Animation_ResetAnimationWithSound');
    {$ENDIF}
  
    try 
      sgAnimations.RestartAnimation(anim, withSound);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Animation_ResetAnimationWithSound');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Animation_ResetAnimationWithSound');
    {$ENDIF}
  end;
  
  procedure sg_Animation_UpdateAnimation(anim: Animation); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Animation_UpdateAnimation');
    {$ENDIF}
  
    try 
      sgAnimations.UpdateAnimation(anim);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Animation_UpdateAnimation');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Animation_UpdateAnimation');
    {$ENDIF}
  end;
  
  procedure sg_Animation_UpdateAnimationPct(anim: Animation; pct: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Animation_UpdateAnimationPct');
    {$ENDIF}
  
    try 
      sgAnimations.UpdateAnimation(anim, pct);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Animation_UpdateAnimationPct');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Animation_UpdateAnimationPct');
    {$ENDIF}
  end;
  
  procedure sg_Animation_UpdateAnimationPctAndSound(anim: Animation; pct: Single; withSound: Boolean); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Animation_UpdateAnimationPctAndSound');
    {$ENDIF}
  
    try 
      sgAnimations.UpdateAnimation(anim, pct, withSound);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Animation_UpdateAnimationPctAndSound');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Animation_UpdateAnimationPctAndSound');
    {$ENDIF}
  end;
  
  function sg_Audio_AudioReady(): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Audio_AudioReady');
    {$ENDIF}
    
    try
      result := sgAudio.AudioReady();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Audio_AudioReady');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Audio_AudioReady');
    {$ENDIF}
  end;
  
  procedure sg_Audio_CloseAudio(); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Audio_CloseAudio');
    {$ENDIF}
  
    try 
      sgAudio.CloseAudio();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Audio_CloseAudio');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Audio_CloseAudio');
    {$ENDIF}
  end;
  
  procedure sg_Audio_FadeMusicIn(mus: Music; ms: LongInt); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Audio_FadeMusicIn');
    {$ENDIF}
  
    try 
      sgAudio.FadeMusicIn(mus, ms);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Audio_FadeMusicIn');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Audio_FadeMusicIn');
    {$ENDIF}
  end;
  
  procedure sg_Audio_FadeMusicInWithLoops(mus: Music; loops: LongInt; ms: LongInt); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Audio_FadeMusicInWithLoops');
    {$ENDIF}
  
    try 
      sgAudio.FadeMusicIn(mus, loops, ms);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Audio_FadeMusicInWithLoops');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Audio_FadeMusicInWithLoops');
    {$ENDIF}
  end;
  
  procedure sg_Audio_FadeMusicOut(ms: LongInt); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Audio_FadeMusicOut');
    {$ENDIF}
  
    try 
      sgAudio.FadeMusicOut(ms);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Audio_FadeMusicOut');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Audio_FadeMusicOut');
    {$ENDIF}
  end;
  
  procedure sg_Audio_FreeMusic(var mus: Music); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Audio_FreeMusic');
    {$ENDIF}
  
    try 
      sgAudio.FreeMusic(mus);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Audio_FreeMusic');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Audio_FreeMusic');
    {$ENDIF}
  end;
  
  procedure sg_Audio_FreeSoundEffect(var effect: SoundEffect); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Audio_FreeSoundEffect');
    {$ENDIF}
  
    try 
      sgAudio.FreeSoundEffect(effect);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Audio_FreeSoundEffect');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Audio_FreeSoundEffect');
    {$ENDIF}
  end;
  
  function sg_Audio_HasMusic(name: PChar): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Audio_HasMusic');
    {$ENDIF}
    
    try
      result := sgAudio.HasMusic(name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Audio_HasMusic');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Audio_HasMusic');
    {$ENDIF}
  end;
  
  function sg_Audio_HasSoundEffect(name: PChar): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Audio_HasSoundEffect');
    {$ENDIF}
    
    try
      result := sgAudio.HasSoundEffect(name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Audio_HasSoundEffect');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Audio_HasSoundEffect');
    {$ENDIF}
  end;
  
  function sg_Audio_LoadMusic(filename: PChar): Music; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Audio_LoadMusic');
    {$ENDIF}
    
    try
      result := sgAudio.LoadMusic(filename);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Audio_LoadMusic');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Audio_LoadMusic');
    {$ENDIF}
  end;
  
  function sg_Audio_LoadSoundEffect(filename: PChar): SoundEffect; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Audio_LoadSoundEffect');
    {$ENDIF}
    
    try
      result := sgAudio.LoadSoundEffect(filename);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Audio_LoadSoundEffect');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Audio_LoadSoundEffect');
    {$ENDIF}
  end;
  
  function sg_Audio_MapMusic(name: PChar; filename: PChar): Music; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Audio_MapMusic');
    {$ENDIF}
    
    try
      result := sgAudio.MapMusic(name, filename);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Audio_MapMusic');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Audio_MapMusic');
    {$ENDIF}
  end;
  
  function sg_Audio_MapSoundEffect(name: PChar; filename: PChar): SoundEffect; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Audio_MapSoundEffect');
    {$ENDIF}
    
    try
      result := sgAudio.MapSoundEffect(name, filename);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Audio_MapSoundEffect');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Audio_MapSoundEffect');
    {$ENDIF}
  end;
  
  procedure sg_Audio_MusicFilename(mus: Music; result: PChar); cdecl; export;
    var
      result_temp: String;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Audio_MusicFilename');
    {$ENDIF}
    
    try
      result_temp := sgAudio.MusicFilename(mus);
        StrCopy(result, PChar(result_temp));
    Except on exc: Exception do 
      TrapException(exc, 'sg_Audio_MusicFilename');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Audio_MusicFilename');
    {$ENDIF}
  end;
  
  procedure sg_Audio_MusicName(mus: Music; result: PChar); cdecl; export;
    var
      result_temp: String;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Audio_MusicName');
    {$ENDIF}
    
    try
      result_temp := sgAudio.MusicName(mus);
        StrCopy(result, PChar(result_temp));
    Except on exc: Exception do 
      TrapException(exc, 'sg_Audio_MusicName');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Audio_MusicName');
    {$ENDIF}
  end;
  
  function sg_Audio_MusicNamed(name: PChar): Music; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Audio_MusicNamed');
    {$ENDIF}
    
    try
      result := sgAudio.MusicNamed(name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Audio_MusicNamed');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Audio_MusicNamed');
    {$ENDIF}
  end;
  
  function sg_Audio_MusicPlaying(): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Audio_MusicPlaying');
    {$ENDIF}
    
    try
      result := sgAudio.MusicPlaying();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Audio_MusicPlaying');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Audio_MusicPlaying');
    {$ENDIF}
  end;
  
  function sg_Audio_MusicVolume(): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Audio_MusicVolume');
    {$ENDIF}
    
    try
      result := sgAudio.MusicVolume();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Audio_MusicVolume');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Audio_MusicVolume');
    {$ENDIF}
  end;
  
  procedure sg_Audio_OpenAudio(); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Audio_OpenAudio');
    {$ENDIF}
  
    try 
      sgAudio.OpenAudio();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Audio_OpenAudio');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Audio_OpenAudio');
    {$ENDIF}
  end;
  
  procedure sg_Audio_PlayMusicWithLoops(mus: Music; loops: LongInt); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Audio_PlayMusicWithLoops');
    {$ENDIF}
  
    try 
      sgAudio.PlayMusic(mus, loops);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Audio_PlayMusicWithLoops');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Audio_PlayMusicWithLoops');
    {$ENDIF}
  end;
  
  procedure sg_Audio_PlaySoundEffectWithLoopAndVolume(effect: SoundEffect; loops: LongInt; vol: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Audio_PlaySoundEffectWithLoopAndVolume');
    {$ENDIF}
  
    try 
      sgAudio.PlaySoundEffect(effect, loops, vol);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Audio_PlaySoundEffectWithLoopAndVolume');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Audio_PlaySoundEffectWithLoopAndVolume');
    {$ENDIF}
  end;
  
  procedure sg_Audio_ReleaseAllMusic(); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Audio_ReleaseAllMusic');
    {$ENDIF}
  
    try 
      sgAudio.ReleaseAllMusic();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Audio_ReleaseAllMusic');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Audio_ReleaseAllMusic');
    {$ENDIF}
  end;
  
  procedure sg_Audio_ReleaseAllSoundEffects(); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Audio_ReleaseAllSoundEffects');
    {$ENDIF}
  
    try 
      sgAudio.ReleaseAllSoundEffects();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Audio_ReleaseAllSoundEffects');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Audio_ReleaseAllSoundEffects');
    {$ENDIF}
  end;
  
  procedure sg_Audio_ReleaseMusic(name: PChar); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Audio_ReleaseMusic');
    {$ENDIF}
  
    try 
      sgAudio.ReleaseMusic(name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Audio_ReleaseMusic');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Audio_ReleaseMusic');
    {$ENDIF}
  end;
  
  procedure sg_Audio_ReleaseSoundEffect(name: PChar); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Audio_ReleaseSoundEffect');
    {$ENDIF}
  
    try 
      sgAudio.ReleaseSoundEffect(name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Audio_ReleaseSoundEffect');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Audio_ReleaseSoundEffect');
    {$ENDIF}
  end;
  
  procedure sg_Audio_SetMusicVolume(value: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Audio_SetMusicVolume');
    {$ENDIF}
  
    try 
      sgAudio.SetMusicVolume(value);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Audio_SetMusicVolume');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Audio_SetMusicVolume');
    {$ENDIF}
  end;
  
  procedure sg_Audio_SoundEffectFilename(effect: SoundEffect; result: PChar); cdecl; export;
    var
      result_temp: String;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Audio_SoundEffectFilename');
    {$ENDIF}
    
    try
      result_temp := sgAudio.SoundEffectFilename(effect);
        StrCopy(result, PChar(result_temp));
    Except on exc: Exception do 
      TrapException(exc, 'sg_Audio_SoundEffectFilename');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Audio_SoundEffectFilename');
    {$ENDIF}
  end;
  
  procedure sg_Audio_SoundEffectName(effect: SoundEffect; result: PChar); cdecl; export;
    var
      result_temp: String;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Audio_SoundEffectName');
    {$ENDIF}
    
    try
      result_temp := sgAudio.SoundEffectName(effect);
        StrCopy(result, PChar(result_temp));
    Except on exc: Exception do 
      TrapException(exc, 'sg_Audio_SoundEffectName');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Audio_SoundEffectName');
    {$ENDIF}
  end;
  
  function sg_Audio_SoundEffectNamed(name: PChar): SoundEffect; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Audio_SoundEffectNamed');
    {$ENDIF}
    
    try
      result := sgAudio.SoundEffectNamed(name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Audio_SoundEffectNamed');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Audio_SoundEffectNamed');
    {$ENDIF}
  end;
  
  function sg_Audio_SoundEffectPlaying(effect: SoundEffect): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Audio_SoundEffectPlaying');
    {$ENDIF}
    
    try
      result := sgAudio.SoundEffectPlaying(effect);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Audio_SoundEffectPlaying');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Audio_SoundEffectPlaying');
    {$ENDIF}
  end;
  
  procedure sg_Audio_StopMusic(); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Audio_StopMusic');
    {$ENDIF}
  
    try 
      sgAudio.StopMusic();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Audio_StopMusic');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Audio_StopMusic');
    {$ENDIF}
  end;
  
  procedure sg_Audio_StopSoundEffect(effect: SoundEffect); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Audio_StopSoundEffect');
    {$ENDIF}
  
    try 
      sgAudio.StopSoundEffect(effect);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Audio_StopSoundEffect');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Audio_StopSoundEffect');
    {$ENDIF}
  end;
  
  function sg_Audio_TryOpenAudio(): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Audio_TryOpenAudio');
    {$ENDIF}
    
    try
      result := sgAudio.TryOpenAudio();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Audio_TryOpenAudio');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Audio_TryOpenAudio');
    {$ENDIF}
  end;
  
  function sg_Camera_CameraPos(): Point2D; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Camera_CameraPos');
    {$ENDIF}
    
    try
      result := sgCamera.CameraPos();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Camera_CameraPos');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Camera_CameraPos');
    {$ENDIF}
  end;
  
  function sg_Camera_CameraScreenRect(): Rectangle; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Camera_CameraScreenRect');
    {$ENDIF}
    
    try
      result := sgCamera.CameraScreenRect();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Camera_CameraScreenRect');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Camera_CameraScreenRect');
    {$ENDIF}
  end;
  
  function sg_Camera_CameraX(): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Camera_CameraX');
    {$ENDIF}
    
    try
      result := sgCamera.CameraX();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Camera_CameraX');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Camera_CameraX');
    {$ENDIF}
  end;
  
  function sg_Camera_CameraY(): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Camera_CameraY');
    {$ENDIF}
    
    try
      result := sgCamera.CameraY();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Camera_CameraY');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Camera_CameraY');
    {$ENDIF}
  end;
  
  procedure sg_Camera_CenterCameraOn(s: Sprite; var offset: Vector); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Camera_CenterCameraOn');
    {$ENDIF}
  
    try 
      sgCamera.CenterCameraOn(s, offset);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Camera_CenterCameraOn');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Camera_CenterCameraOn');
    {$ENDIF}
  end;
  
  procedure sg_Camera_CenterCameraOnCharacter(c: Character; var offset: Vector); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Camera_CenterCameraOnCharacter');
    {$ENDIF}
  
    try 
      sgCamera.CenterCameraOn(c, offset);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Camera_CenterCameraOnCharacter');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Camera_CenterCameraOnCharacter');
    {$ENDIF}
  end;
  
  procedure sg_Camera_CenterCameraOnWithXYOffset(s: Sprite; offsetX: LongInt; offsetY: LongInt); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Camera_CenterCameraOnWithXYOffset');
    {$ENDIF}
  
    try 
      sgCamera.CenterCameraOn(s, offsetX, offsetY);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Camera_CenterCameraOnWithXYOffset');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Camera_CenterCameraOnWithXYOffset');
    {$ENDIF}
  end;
  
  procedure sg_Camera_MoveCameraBy(var offset: Vector); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Camera_MoveCameraBy');
    {$ENDIF}
  
    try 
      sgCamera.MoveCameraBy(offset);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Camera_MoveCameraBy');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Camera_MoveCameraBy');
    {$ENDIF}
  end;
  
  procedure sg_Camera_MoveCameraByXY(dx: Single; dy: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Camera_MoveCameraByXY');
    {$ENDIF}
  
    try 
      sgCamera.MoveCameraBy(dx, dy);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Camera_MoveCameraByXY');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Camera_MoveCameraByXY');
    {$ENDIF}
  end;
  
  procedure sg_Camera_MoveCameraTo(var pt: Point2D); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Camera_MoveCameraTo');
    {$ENDIF}
  
    try 
      sgCamera.MoveCameraTo(pt);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Camera_MoveCameraTo');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Camera_MoveCameraTo');
    {$ENDIF}
  end;
  
  procedure sg_Camera_MoveCameraToXY(x: Single; y: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Camera_MoveCameraToXY');
    {$ENDIF}
  
    try 
      sgCamera.MoveCameraTo(x, y);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Camera_MoveCameraToXY');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Camera_MoveCameraToXY');
    {$ENDIF}
  end;
  
  function sg_Camera_PointOnScreen(var pt: Point2D): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Camera_PointOnScreen');
    {$ENDIF}
    
    try
      result := sgCamera.PointOnScreen(pt);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Camera_PointOnScreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Camera_PointOnScreen');
    {$ENDIF}
  end;
  
  function sg_Camera_RectOnScreen(var rect: Rectangle): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Camera_RectOnScreen');
    {$ENDIF}
    
    try
      result := sgCamera.RectOnScreen(rect);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Camera_RectOnScreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Camera_RectOnScreen');
    {$ENDIF}
  end;
  
  procedure sg_Camera_SetCameraPos(var value: Point2D); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Camera_SetCameraPos');
    {$ENDIF}
  
    try 
      sgCamera.SetCameraPos(value);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Camera_SetCameraPos');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Camera_SetCameraPos');
    {$ENDIF}
  end;
  
  procedure sg_Camera_SetCameraX(value: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Camera_SetCameraX');
    {$ENDIF}
  
    try 
      sgCamera.SetCameraX(value);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Camera_SetCameraX');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Camera_SetCameraX');
    {$ENDIF}
  end;
  
  procedure sg_Camera_SetCameraY(value: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Camera_SetCameraY');
    {$ENDIF}
  
    try 
      sgCamera.SetCameraY(value);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Camera_SetCameraY');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Camera_SetCameraY');
    {$ENDIF}
  end;
  
  function sg_Camera_ToScreen(var worldPoint: Point2D): Point2D; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Camera_ToScreen');
    {$ENDIF}
    
    try
      result := sgCamera.ToScreen(worldPoint);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Camera_ToScreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Camera_ToScreen');
    {$ENDIF}
  end;
  
  function sg_Camera_ToScreenRect(var rect: Rectangle): Rectangle; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Camera_ToScreenRect');
    {$ENDIF}
    
    try
      result := sgCamera.ToScreen(rect);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Camera_ToScreenRect');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Camera_ToScreenRect');
    {$ENDIF}
  end;
  
  function sg_Camera_ToScreenX(worldX: Single): LongInt; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Camera_ToScreenX');
    {$ENDIF}
    
    try
      result := sgCamera.ToScreenX(worldX);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Camera_ToScreenX');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Camera_ToScreenX');
    {$ENDIF}
  end;
  
  function sg_Camera_ToScreenY(worldY: Single): LongInt; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Camera_ToScreenY');
    {$ENDIF}
    
    try
      result := sgCamera.ToScreenY(worldY);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Camera_ToScreenY');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Camera_ToScreenY');
    {$ENDIF}
  end;
  
  function sg_Camera_ToWorld(var screenPoint: Point2D): Point2D; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Camera_ToWorld');
    {$ENDIF}
    
    try
      result := sgCamera.ToWorld(screenPoint);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Camera_ToWorld');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Camera_ToWorld');
    {$ENDIF}
  end;
  
  function sg_Camera_ToWorldX(screenX: LongInt): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Camera_ToWorldX');
    {$ENDIF}
    
    try
      result := sgCamera.ToWorldX(screenX);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Camera_ToWorldX');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Camera_ToWorldX');
    {$ENDIF}
  end;
  
  function sg_Camera_ToWorldY(screenY: LongInt): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Camera_ToWorldY');
    {$ENDIF}
    
    try
      result := sgCamera.ToWorldY(screenY);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Camera_ToWorldY');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Camera_ToWorldY');
    {$ENDIF}
  end;
  
  function sg_Core_BlueOf(c: LongWord): Byte; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Core_BlueOf');
    {$ENDIF}
    
    try
      result := sgCore.BlueOf(c);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Core_BlueOf');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Core_BlueOf');
    {$ENDIF}
  end;
  
  function sg_Core_BrightnessOf(c: LongWord): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Core_BrightnessOf');
    {$ENDIF}
    
    try
      result := sgCore.BrightnessOf(c);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Core_BrightnessOf');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Core_BrightnessOf');
    {$ENDIF}
  end;
  
  procedure sg_Core_CalculateFramerate(average: PChar; highest: PChar; lowest: PChar; out textColor: LongWord); cdecl; export;
    var
      average_temp: String;
      highest_temp: String;
      lowest_temp: String;
      textColor_temp: Color;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Core_CalculateFramerate');
    {$ENDIF}
  
    try 
      sgCore.CalculateFramerate(average_temp, highest_temp, lowest_temp, textColor_temp);
        StrCopy(average, PChar(average_temp));
        StrCopy(highest, PChar(highest_temp));
        StrCopy(lowest, PChar(lowest_temp));
        textColor := textColor_temp;
    Except on exc: Exception do 
      TrapException(exc, 'sg_Core_CalculateFramerate');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Core_CalculateFramerate');
    {$ENDIF}
  end;
  
  procedure sg_Core_ChangeScreenSize(width: LongInt; height: LongInt); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Core_ChangeScreenSize');
    {$ENDIF}
  
    try 
      sgCore.ChangeScreenSize(width, height);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Core_ChangeScreenSize');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Core_ChangeScreenSize');
    {$ENDIF}
  end;
  
  procedure sg_Core_ColorComponents(c: LongWord; out r: Byte; out g: Byte; out b: Byte; out a: Byte); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Core_ColorComponents');
    {$ENDIF}
  
    try 
      sgCore.ColorComponents(c, r, g, b, a);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Core_ColorComponents');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Core_ColorComponents');
    {$ENDIF}
  end;
  
  function sg_Core_ColorFromBitmap(bmp: Bitmap; apiColor: LongWord): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Core_ColorFromBitmap');
    {$ENDIF}
    
    try
      result := sgCore.ColorFrom(bmp, apiColor);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Core_ColorFromBitmap');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Core_ColorFromBitmap');
    {$ENDIF}
  end;
  
  procedure sg_Core_ColorToString(c: LongWord; result: PChar); cdecl; export;
    var
      result_temp: String;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Core_ColorToString');
    {$ENDIF}
    
    try
      result_temp := sgCore.ColorToString(c);
        StrCopy(result, PChar(result_temp));
    Except on exc: Exception do 
      TrapException(exc, 'sg_Core_ColorToString');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Core_ColorToString');
    {$ENDIF}
  end;
  
  procedure sg_Core_Delay(time: UInt32); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Core_Delay');
    {$ENDIF}
  
    try 
      sgCore.Delay(time);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Core_Delay');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Core_Delay');
    {$ENDIF}
  end;
  
  procedure sg_Core_ExceptionMessage(result: PChar); cdecl; export;
    var
      result_temp: String;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Core_ExceptionMessage');
    {$ENDIF}
    
    try
      result_temp := sgCore.ExceptionMessage();
        StrCopy(result, PChar(result_temp));
    Except on exc: Exception do 
      TrapException(exc, 'sg_Core_ExceptionMessage');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Core_ExceptionMessage');
    {$ENDIF}
  end;
  
  function sg_Core_ExceptionOccured(): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Core_ExceptionOccured');
    {$ENDIF}
    
    try
      result := sgCore.ExceptionOccured();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Core_ExceptionOccured');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Core_ExceptionOccured');
    {$ENDIF}
  end;
  
  function sg_Core_GetFramerate(): LongInt; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Core_GetFramerate');
    {$ENDIF}
    
    try
      result := sgCore.GetFramerate();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Core_GetFramerate');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Core_GetFramerate');
    {$ENDIF}
  end;
  
  function sg_Core_GetTicks(): UInt32; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Core_GetTicks');
    {$ENDIF}
    
    try
      result := sgCore.GetTicks();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Core_GetTicks');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Core_GetTicks');
    {$ENDIF}
  end;
  
  function sg_Core_GreenOf(c: LongWord): Byte; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Core_GreenOf');
    {$ENDIF}
    
    try
      result := sgCore.GreenOf(c);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Core_GreenOf');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Core_GreenOf');
    {$ENDIF}
  end;
  
  function sg_Core_HSBColor(hue: Single; saturation: Single; brightness: Single): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Core_HSBColor');
    {$ENDIF}
    
    try
      result := sgCore.HSBColor(hue, saturation, brightness);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Core_HSBColor');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Core_HSBColor');
    {$ENDIF}
  end;
  
  procedure sg_Core_HSBValuesOf(c: LongWord; out h: Single; out s: Single; out b: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Core_HSBValuesOf');
    {$ENDIF}
  
    try 
      sgCore.HSBValuesOf(c, h, s, b);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Core_HSBValuesOf');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Core_HSBValuesOf');
    {$ENDIF}
  end;
  
  function sg_Core_HueOf(c: LongWord): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Core_HueOf');
    {$ENDIF}
    
    try
      result := sgCore.HueOf(c);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Core_HueOf');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Core_HueOf');
    {$ENDIF}
  end;
  
  procedure sg_Core_OpenGraphicsWindow(caption: PChar; width: LongInt; height: LongInt); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Core_OpenGraphicsWindow');
    {$ENDIF}
  
    try 
      sgCore.OpenGraphicsWindow(caption, width, height);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Core_OpenGraphicsWindow');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Core_OpenGraphicsWindow');
    {$ENDIF}
  end;
  
  procedure sg_Core_ProcessEvents(); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Core_ProcessEvents');
    {$ENDIF}
  
    try 
      sgCore.ProcessEvents();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Core_ProcessEvents');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Core_ProcessEvents');
    {$ENDIF}
  end;
  
  function sg_Core_RGBAColor(red: Byte; green: Byte; blue: Byte; alpha: Byte): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Core_RGBAColor');
    {$ENDIF}
    
    try
      result := sgCore.RGBAColor(red, green, blue, alpha);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Core_RGBAColor');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Core_RGBAColor');
    {$ENDIF}
  end;
  
  function sg_Core_RGBAFloatColor(r: Single; g: Single; b: Single; a: Single): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Core_RGBAFloatColor');
    {$ENDIF}
    
    try
      result := sgCore.RGBAFloatColor(r, g, b, a);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Core_RGBAFloatColor');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Core_RGBAFloatColor');
    {$ENDIF}
  end;
  
  function sg_Core_RGBFloatColor(r: Single; g: Single; b: Single): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Core_RGBFloatColor');
    {$ENDIF}
    
    try
      result := sgCore.RGBFloatColor(r, g, b);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Core_RGBFloatColor');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Core_RGBFloatColor');
    {$ENDIF}
  end;
  
  function sg_Core_RandomColor(): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Core_RandomColor');
    {$ENDIF}
    
    try
      result := sgCore.RandomColor();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Core_RandomColor');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Core_RandomColor');
    {$ENDIF}
  end;
  
  function sg_Core_RandomRGBColor(alpha: Byte): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Core_RandomRGBColor');
    {$ENDIF}
    
    try
      result := sgCore.RandomRGBColor(alpha);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Core_RandomRGBColor');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Core_RandomRGBColor');
    {$ENDIF}
  end;
  
  function sg_Core_RedOf(c: LongWord): Byte; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Core_RedOf');
    {$ENDIF}
    
    try
      result := sgCore.RedOf(c);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Core_RedOf');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Core_RedOf');
    {$ENDIF}
  end;
  
  procedure sg_Core_RefreshScreen(); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Core_RefreshScreen');
    {$ENDIF}
  
    try 
      sgCore.RefreshScreen();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Core_RefreshScreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Core_RefreshScreen');
    {$ENDIF}
  end;
  
  procedure sg_Core_RefreshScreenRestrictFPS(TargetFPS: UInt32); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Core_RefreshScreenRestrictFPS');
    {$ENDIF}
  
    try 
      sgCore.RefreshScreen(TargetFPS);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Core_RefreshScreenRestrictFPS');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Core_RefreshScreenRestrictFPS');
    {$ENDIF}
  end;
  
  function sg_Core_Rnd(): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Core_Rnd');
    {$ENDIF}
    
    try
      result := sgCore.Rnd();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Core_Rnd');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Core_Rnd');
    {$ENDIF}
  end;
  
  function sg_Core_RndUpto(ubound: LongInt): LongInt; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Core_RndUpto');
    {$ENDIF}
    
    try
      result := sgCore.Rnd(ubound);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Core_RndUpto');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Core_RndUpto');
    {$ENDIF}
  end;
  
  function sg_Core_SaturationOf(c: LongWord): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Core_SaturationOf');
    {$ENDIF}
    
    try
      result := sgCore.SaturationOf(c);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Core_SaturationOf');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Core_SaturationOf');
    {$ENDIF}
  end;
  
  function sg_Core_ScreenHeight(): LongInt; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Core_ScreenHeight');
    {$ENDIF}
    
    try
      result := sgCore.ScreenHeight();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Core_ScreenHeight');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Core_ScreenHeight');
    {$ENDIF}
  end;
  
  function sg_Core_ScreenWidth(): LongInt; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Core_ScreenWidth');
    {$ENDIF}
    
    try
      result := sgCore.ScreenWidth();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Core_ScreenWidth');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Core_ScreenWidth');
    {$ENDIF}
  end;
  
  procedure sg_Core_SetIcon(filename: PChar); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Core_SetIcon');
    {$ENDIF}
  
    try 
      sgCore.SetIcon(filename);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Core_SetIcon');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Core_SetIcon');
    {$ENDIF}
  end;
  
  procedure sg_Core_SwinGameVersion(result: PChar); cdecl; export;
    var
      result_temp: String;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Core_SwinGameVersion');
    {$ENDIF}
    
    try
      result_temp := sgCore.SwinGameVersion();
        StrCopy(result, PChar(result_temp));
    Except on exc: Exception do 
      TrapException(exc, 'sg_Core_SwinGameVersion');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Core_SwinGameVersion');
    {$ENDIF}
  end;
  
  procedure sg_Core_TakeScreenshot(basename: PChar); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Core_TakeScreenshot');
    {$ENDIF}
  
    try 
      sgCore.TakeScreenshot(basename);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Core_TakeScreenshot');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Core_TakeScreenshot');
    {$ENDIF}
  end;
  
  procedure sg_Core_ToggleFullScreen(); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Core_ToggleFullScreen');
    {$ENDIF}
  
    try 
      sgCore.ToggleFullScreen();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Core_ToggleFullScreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Core_ToggleFullScreen');
    {$ENDIF}
  end;
  
  procedure sg_Core_ToggleWindowBorder(); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Core_ToggleWindowBorder');
    {$ENDIF}
  
    try 
      sgCore.ToggleWindowBorder();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Core_ToggleWindowBorder');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Core_ToggleWindowBorder');
    {$ENDIF}
  end;
  
  function sg_Core_TransparencyOf(c: LongWord): Byte; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Core_TransparencyOf');
    {$ENDIF}
    
    try
      result := sgCore.TransparencyOf(c);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Core_TransparencyOf');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Core_TransparencyOf');
    {$ENDIF}
  end;
  
  function sg_Core_WindowCloseRequested(): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Core_WindowCloseRequested');
    {$ENDIF}
    
    try
      result := sgCore.WindowCloseRequested();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Core_WindowCloseRequested');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Core_WindowCloseRequested');
    {$ENDIF}
  end;
  
  function sg_Geometry_AddVectors(var v1: Vector; var v2: Vector): Vector; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_AddVectors');
    {$ENDIF}
    
    try
      result := sgGeometry.AddVectors(v1, v2);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_AddVectors');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_AddVectors');
    {$ENDIF}
  end;
  
  procedure sg_Geometry_ApplyMatrix(m: SinglePtr; tri: Point2DPtr); cdecl; export;
    var
      m_temp: Matrix2D;
      tri_temp: Triangle;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_ApplyMatrix');
    {$ENDIF}
  
    try 
        MatrixCopyFromPtr(m_temp, m);
        TriCopyFromPtr(tri_temp, tri);
      sgGeometry.ApplyMatrix(m_temp, tri_temp);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_ApplyMatrix');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_ApplyMatrix');
    {$ENDIF}
  end;
  
  procedure sg_Geometry_ApplyMatrixToPoints(m: SinglePtr; pts: Point2DPtr; pts_len: LongInt); cdecl; export;
    var
      m_temp: Matrix2D;
      pts_temp: Point2DArray;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_ApplyMatrixToPoints');
    {$ENDIF}
  
    try 
        MatrixCopyFromPtr(m_temp, m);
        Point2DCopyFromPtr(pts, pts_len, pts_temp);
      sgGeometry.ApplyMatrix(m_temp, pts_temp);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_ApplyMatrixToPoints');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_ApplyMatrixToPoints');
    {$ENDIF}
  end;
  
  function sg_Geometry_CalculateAngle(x1: Single; y1: Single; x2: Single; y2: Single): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_CalculateAngle');
    {$ENDIF}
    
    try
      result := sgGeometry.CalculateAngle(x1, y1, x2, y2);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_CalculateAngle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_CalculateAngle');
    {$ENDIF}
  end;
  
  function sg_Geometry_CalculateAngleBetween(var pt1: Point2D; var pt2: Point2D): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_CalculateAngleBetween');
    {$ENDIF}
    
    try
      result := sgGeometry.CalculateAngleBetween(pt1, pt2);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_CalculateAngleBetween');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_CalculateAngleBetween');
    {$ENDIF}
  end;
  
  function sg_Geometry_CalculateAngleBetweenSprites(s1: Sprite; s2: Sprite): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_CalculateAngleBetweenSprites');
    {$ENDIF}
    
    try
      result := sgGeometry.CalculateAngle(s1, s2);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_CalculateAngleBetweenSprites');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_CalculateAngleBetweenSprites');
    {$ENDIF}
  end;
  
  function sg_Geometry_CalculateAngleBetweenVectors(var v1: Vector; var v2: Vector): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_CalculateAngleBetweenVectors');
    {$ENDIF}
    
    try
      result := sgGeometry.CalculateAngle(v1, v2);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_CalculateAngleBetweenVectors');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_CalculateAngleBetweenVectors');
    {$ENDIF}
  end;
  
  function sg_Geometry_CircleAt(var pt: Point2D; radius: LongInt): Circle; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_CircleAt');
    {$ENDIF}
    
    try
      result := sgGeometry.CircleAt(pt, radius);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_CircleAt');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_CircleAt');
    {$ENDIF}
  end;
  
  function sg_Geometry_CircleCenterPoint(var c: Circle): Point2D; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_CircleCenterPoint');
    {$ENDIF}
    
    try
      result := sgGeometry.CenterPoint(c);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_CircleCenterPoint');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_CircleCenterPoint');
    {$ENDIF}
  end;
  
  function sg_Geometry_CircleFromXY(x: Single; y: Single; radius: LongInt): Circle; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_CircleFromXY');
    {$ENDIF}
    
    try
      result := sgGeometry.CircleAt(x, y, radius);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_CircleFromXY');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_CircleFromXY');
    {$ENDIF}
  end;
  
  function sg_Geometry_CirclePrototypeFrom(var pt: Point2D; r: Single): ShapePrototype; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_CirclePrototypeFrom');
    {$ENDIF}
    
    try
      result := sgGeometry.CirclePrototypeFrom(pt, r);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_CirclePrototypeFrom');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_CirclePrototypeFrom');
    {$ENDIF}
  end;
  
  function sg_Geometry_CircleRadius(var c: Circle): LongInt; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_CircleRadius');
    {$ENDIF}
    
    try
      result := sgGeometry.CircleRadius(c);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_CircleRadius');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_CircleRadius');
    {$ENDIF}
  end;
  
  function sg_Geometry_CircleWithinRect(var c: Circle; var rect: Rectangle): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_CircleWithinRect');
    {$ENDIF}
    
    try
      result := sgGeometry.CircleWithinRect(c, rect);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_CircleWithinRect');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_CircleWithinRect');
    {$ENDIF}
  end;
  
  function sg_Geometry_CircleX(var c: Circle): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_CircleX');
    {$ENDIF}
    
    try
      result := sgGeometry.CircleX(c);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_CircleX');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_CircleX');
    {$ENDIF}
  end;
  
  function sg_Geometry_CircleY(var c: Circle): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_CircleY');
    {$ENDIF}
    
    try
      result := sgGeometry.CircleY(c);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_CircleY');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_CircleY');
    {$ENDIF}
  end;
  
  function sg_Geometry_ClosestPointOnCircle(var fromPt: Point2D; var c: Circle): Point2D; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_ClosestPointOnCircle');
    {$ENDIF}
    
    try
      result := sgGeometry.ClosestPointOnCircle(fromPt, c);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_ClosestPointOnCircle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_ClosestPointOnCircle');
    {$ENDIF}
  end;
  
  function sg_Geometry_ClosestPointOnLine(var fromPt: Point2D; var line: LineSegment): Point2D; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_ClosestPointOnLine');
    {$ENDIF}
    
    try
      result := sgGeometry.ClosestPointOnLine(fromPt, line);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_ClosestPointOnLine');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_ClosestPointOnLine');
    {$ENDIF}
  end;
  
  function sg_Geometry_ClosestPointOnLineFromCircle(var c: Circle; var line: LineSegment): Point2D; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_ClosestPointOnLineFromCircle');
    {$ENDIF}
    
    try
      result := sgGeometry.ClosestPointOnLineFromCircle(c, line);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_ClosestPointOnLineFromCircle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_ClosestPointOnLineFromCircle');
    {$ENDIF}
  end;
  
  function sg_Geometry_ClosestPointOnLineXY(x: Single; y: Single; var line: LineSegment): Point2D; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_ClosestPointOnLineXY');
    {$ENDIF}
    
    try
      result := sgGeometry.ClosestPointOnLine(x, y, line);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_ClosestPointOnLineXY');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_ClosestPointOnLineXY');
    {$ENDIF}
  end;
  
  function sg_Geometry_ClosestPointOnLinesFromCircle(var c: Circle; lines: LineSegmentPtr; lines_len: LongInt): Point2D; cdecl; export;
    var
      lines_temp: LinesArray;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_ClosestPointOnLinesFromCircle');
    {$ENDIF}
    
    try
        LineCopyFromPtr(lines, lines_len, lines_temp);
      result := sgGeometry.ClosestPointOnLinesFromCircle(c, lines_temp);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_ClosestPointOnLinesFromCircle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_ClosestPointOnLinesFromCircle');
    {$ENDIF}
  end;
  
  function sg_Geometry_ClosestPointOnRectFromCircle(var c: Circle; var rect: Rectangle): Point2D; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_ClosestPointOnRectFromCircle');
    {$ENDIF}
    
    try
      result := sgGeometry.ClosestPointOnRectFromCircle(c, rect);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_ClosestPointOnRectFromCircle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_ClosestPointOnRectFromCircle');
    {$ENDIF}
  end;
  
  function sg_Geometry_Cosine(angle: Single): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_Cosine');
    {$ENDIF}
    
    try
      result := sgGeometry.Cosine(angle);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_Cosine');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_Cosine');
    {$ENDIF}
  end;
  
  function sg_Geometry_DistantPointOnCircle(var pt: Point2D; var c: Circle): Point2D; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_DistantPointOnCircle');
    {$ENDIF}
    
    try
      result := sgGeometry.DistantPointOnCircle(pt, c);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_DistantPointOnCircle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_DistantPointOnCircle');
    {$ENDIF}
  end;
  
  function sg_Geometry_DistantPointOnCircleHeading(var pt: Point2D; var c: Circle; var heading: Vector; out oppositePt: Point2D): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_DistantPointOnCircleHeading');
    {$ENDIF}
    
    try
      result := sgGeometry.DistantPointOnCircleHeading(pt, c, heading, oppositePt);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_DistantPointOnCircleHeading');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_DistantPointOnCircleHeading');
    {$ENDIF}
  end;
  
  function sg_Geometry_DotProduct(var v1: Vector; var v2: Vector): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_DotProduct');
    {$ENDIF}
    
    try
      result := sgGeometry.DotProduct(v1, v2);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_DotProduct');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_DotProduct');
    {$ENDIF}
  end;
  
  procedure sg_Geometry_FixRect(var x: Single; var y: Single; width: LongInt; height: LongInt); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_FixRect');
    {$ENDIF}
  
    try 
      sgGeometry.FixRectangle(x, y, width, height);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_FixRect');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_FixRect');
    {$ENDIF}
  end;
  
  procedure sg_Geometry_FixRectangle(var rect: Rectangle); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_FixRectangle');
    {$ENDIF}
  
    try 
      sgGeometry.FixRectangle(rect);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_FixRectangle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_FixRectangle');
    {$ENDIF}
  end;
  
  procedure sg_Geometry_FreePrototype(var p: ShapePrototype); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_FreePrototype');
    {$ENDIF}
  
    try 
      sgGeometry.FreePrototype(p);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_FreePrototype');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_FreePrototype');
    {$ENDIF}
  end;
  
  procedure sg_Geometry_FreeShape(var s: Shape); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_FreeShape');
    {$ENDIF}
  
    try 
      sgGeometry.FreeShape(s);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_FreeShape');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_FreeShape');
    {$ENDIF}
  end;
  
  procedure sg_Geometry_IdentityMatrix(result: SinglePtr); cdecl; export;
    var
      result_temp: Matrix2D;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_IdentityMatrix');
    {$ENDIF}
    
    try
      result_temp := sgGeometry.IdentityMatrix();
        MatrixCopyToPtr(result, result_temp);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_IdentityMatrix');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_IdentityMatrix');
    {$ENDIF}
  end;
  
  function sg_Geometry_InsetRectangle(var rect: Rectangle; insetAmount: LongInt): Rectangle; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_InsetRectangle');
    {$ENDIF}
    
    try
      result := sgGeometry.InsetRectangle(rect, insetAmount);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_InsetRectangle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_InsetRectangle');
    {$ENDIF}
  end;
  
  function sg_Geometry_Intersection(var rect1: Rectangle; var rect2: Rectangle): Rectangle; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_Intersection');
    {$ENDIF}
    
    try
      result := sgGeometry.Intersection(rect1, rect2);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_Intersection');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_Intersection');
    {$ENDIF}
  end;
  
  function sg_Geometry_InvertVector(var v: Vector): Vector; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_InvertVector');
    {$ENDIF}
    
    try
      result := sgGeometry.InvertVector(v);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_InvertVector');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_InvertVector');
    {$ENDIF}
  end;
  
  function sg_Geometry_LimitVector(var v: Vector; limit: Single): Vector; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_LimitVector');
    {$ENDIF}
    
    try
      result := sgGeometry.LimitVector(v, limit);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_LimitVector');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_LimitVector');
    {$ENDIF}
  end;
  
  function sg_Geometry_LineAsVector(var line: LineSegment): Vector; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_LineAsVector');
    {$ENDIF}
    
    try
      result := sgGeometry.LineAsVector(line);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_LineAsVector');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_LineAsVector');
    {$ENDIF}
  end;
  
  function sg_Geometry_LineCircleHit(var c: Circle; var velocity: Vector; lines: LineSegmentPtr; out found: LineSegment; lines_len: LongInt): Boolean; cdecl; export;
    var
      lines_temp: LinesArray;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_LineCircleHit');
    {$ENDIF}
    
    try
        LineCopyFromPtr(lines, lines_len, lines_temp);
      result := sgGeometry.LineCircleHit(c, velocity, lines_temp, found);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_LineCircleHit');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_LineCircleHit');
    {$ENDIF}
  end;
  
  function sg_Geometry_LineCount(s: Shape): LongInt; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_LineCount');
    {$ENDIF}
    
    try
      result := sgGeometry.LineCount(s);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_LineCount');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_LineCount');
    {$ENDIF}
  end;
  
  function sg_Geometry_LineFrom(x1: Single; y1: Single; x2: Single; y2: Single): LineSegment; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_LineFrom');
    {$ENDIF}
    
    try
      result := sgGeometry.LineFrom(x1, y1, x2, y2);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_LineFrom');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_LineFrom');
    {$ENDIF}
  end;
  
  function sg_Geometry_LineFromPointToPoint(var pt1: Point2D; var pt2: Point2D): LineSegment; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_LineFromPointToPoint');
    {$ENDIF}
    
    try
      result := sgGeometry.LineFrom(pt1, pt2);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_LineFromPointToPoint');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_LineFromPointToPoint');
    {$ENDIF}
  end;
  
  function sg_Geometry_LineFromVector(var mv: Vector): LineSegment; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_LineFromVector');
    {$ENDIF}
    
    try
      result := sgGeometry.LineFromVector(mv);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_LineFromVector');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_LineFromVector');
    {$ENDIF}
  end;
  
  function sg_Geometry_LineFromVectorWithStartPoint(var pt: Point2D; var mv: Vector): LineSegment; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_LineFromVectorWithStartPoint');
    {$ENDIF}
    
    try
      result := sgGeometry.LineFromVector(pt, mv);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_LineFromVectorWithStartPoint');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_LineFromVectorWithStartPoint');
    {$ENDIF}
  end;
  
  function sg_Geometry_LineFromVectorWithStartXY(x: Single; y: Single; var mv: Vector): LineSegment; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_LineFromVectorWithStartXY');
    {$ENDIF}
    
    try
      result := sgGeometry.LineFromVector(x, y, mv);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_LineFromVectorWithStartXY');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_LineFromVectorWithStartXY');
    {$ENDIF}
  end;
  
  function sg_Geometry_LineIntersectionPoint(var line1: LineSegment; var line2: LineSegment; out pt: Point2D): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_LineIntersectionPoint');
    {$ENDIF}
    
    try
      result := sgGeometry.LineIntersectionPoint(line1, line2, pt);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_LineIntersectionPoint');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_LineIntersectionPoint');
    {$ENDIF}
  end;
  
  function sg_Geometry_LineIntersectsCircle(var l: LineSegment; var c: Circle): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_LineIntersectsCircle');
    {$ENDIF}
    
    try
      result := sgGeometry.LineIntersectsCircle(l, c);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_LineIntersectsCircle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_LineIntersectsCircle');
    {$ENDIF}
  end;
  
  function sg_Geometry_LineIntersectsLines(var line: LineSegment; lines: LineSegmentPtr; lines_len: LongInt): Boolean; cdecl; export;
    var
      lines_temp: LinesArray;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_LineIntersectsLines');
    {$ENDIF}
    
    try
        LineCopyFromPtr(lines, lines_len, lines_temp);
      result := sgGeometry.LineIntersectsLines(line, lines_temp);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_LineIntersectsLines');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_LineIntersectsLines');
    {$ENDIF}
  end;
  
  function sg_Geometry_LineIntersectsRect(var line: LineSegment; var rect: Rectangle): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_LineIntersectsRect');
    {$ENDIF}
    
    try
      result := sgGeometry.LineIntersectsRect(line, rect);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_LineIntersectsRect');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_LineIntersectsRect');
    {$ENDIF}
  end;
  
  function sg_Geometry_LineListPrototypeFrom(points: Point2DPtr; points_len: LongInt): ShapePrototype; cdecl; export;
    var
      points_temp: Point2DArray;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_LineListPrototypeFrom');
    {$ENDIF}
    
    try
        Point2DCopyFromPtr(points, points_len, points_temp);
      result := sgGeometry.LineListPrototypeFrom(points_temp);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_LineListPrototypeFrom');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_LineListPrototypeFrom');
    {$ENDIF}
  end;
  
  function sg_Geometry_LineMagnitudeSq(x1: Single; y1: Single; x2: Single; y2: Single): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_LineMagnitudeSq');
    {$ENDIF}
    
    try
      result := sgGeometry.LineMagnitudeSq(x1, y1, x2, y2);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_LineMagnitudeSq');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_LineMagnitudeSq');
    {$ENDIF}
  end;
  
  function sg_Geometry_LineMagnitudeSqFromLine(var line: LineSegment): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_LineMagnitudeSqFromLine');
    {$ENDIF}
    
    try
      result := sgGeometry.LineMagnitudeSq(line);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_LineMagnitudeSqFromLine');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_LineMagnitudeSqFromLine');
    {$ENDIF}
  end;
  
  function sg_Geometry_LineMidPoint(var line: LineSegment): Point2D; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_LineMidPoint');
    {$ENDIF}
    
    try
      result := sgGeometry.LineMidPoint(line);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_LineMidPoint');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_LineMidPoint');
    {$ENDIF}
  end;
  
  function sg_Geometry_LineNormal(var line: LineSegment): Vector; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_LineNormal');
    {$ENDIF}
    
    try
      result := sgGeometry.LineNormal(line);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_LineNormal');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_LineNormal');
    {$ENDIF}
  end;
  
  function sg_Geometry_LinePrototypeFrom(var startPt: Point2D; var endPt: Point2D): ShapePrototype; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_LinePrototypeFrom');
    {$ENDIF}
    
    try
      result := sgGeometry.LinePrototypeFrom(startPt, endPt);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_LinePrototypeFrom');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_LinePrototypeFrom');
    {$ENDIF}
  end;
  
  function sg_Geometry_LineSegmentsIntersect(var line1: LineSegment; var line2: LineSegment): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_LineSegmentsIntersect');
    {$ENDIF}
    
    try
      result := sgGeometry.LineSegmentsIntersect(line1, line2);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_LineSegmentsIntersect');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_LineSegmentsIntersect');
    {$ENDIF}
  end;
  
  function sg_Geometry_LineStripPrototypeFrom(points: Point2DPtr; points_len: LongInt): ShapePrototype; cdecl; export;
    var
      points_temp: Point2DArray;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_LineStripPrototypeFrom');
    {$ENDIF}
    
    try
        Point2DCopyFromPtr(points, points_len, points_temp);
      result := sgGeometry.LineStripPrototypeFrom(points_temp);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_LineStripPrototypeFrom');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_LineStripPrototypeFrom');
    {$ENDIF}
  end;
  
  procedure sg_Geometry_LineToString(var ln: LineSegment; result: PChar); cdecl; export;
    var
      result_temp: String;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_LineToString');
    {$ENDIF}
    
    try
      result_temp := sgGeometry.LineToString(ln);
        StrCopy(result, PChar(result_temp));
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_LineToString');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_LineToString');
    {$ENDIF}
  end;
  
  procedure sg_Geometry_LinesFromRect(var rect: Rectangle; result: LineSegmentPtr; result_len: LongInt); cdecl; export;
    var
      result_temp: LinesArray;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_LinesFromRect');
    {$ENDIF}
    
    try
      result_temp := sgGeometry.LinesFrom(rect);
        LineCopyToPtr(result_temp, result_len, result);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_LinesFromRect');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_LinesFromRect');
    {$ENDIF}
  end;
  
  procedure sg_Geometry_LinesFromShape(s: Shape; result: LineSegmentPtr; result_len: LongInt); cdecl; export;
    var
      result_temp: LinesArray;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_LinesFromShape');
    {$ENDIF}
    
    try
      result_temp := sgGeometry.LinesFrom(s);
        LineCopyToPtr(result_temp, result_len, result);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_LinesFromShape');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_LinesFromShape');
    {$ENDIF}
  end;
  
  procedure sg_Geometry_LinesFromTriangle(tri: Point2DPtr; result: LineSegmentPtr; result_len: LongInt); cdecl; export;
    var
      tri_temp: Triangle;
      result_temp: LinesArray;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_LinesFromTriangle');
    {$ENDIF}
    
    try
        TriCopyFromPtr(tri_temp, tri);
      result_temp := sgGeometry.LinesFrom(tri_temp);
        LineCopyToPtr(result_temp, result_len, result);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_LinesFromTriangle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_LinesFromTriangle');
    {$ENDIF}
  end;
  
  procedure sg_Geometry_MatrixMultiply(m1: SinglePtr; m2: SinglePtr; result: SinglePtr); cdecl; export;
    var
      m1_temp: Matrix2D;
      m2_temp: Matrix2D;
      result_temp: Matrix2D;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_MatrixMultiply');
    {$ENDIF}
    
    try
        MatrixCopyFromPtr(m1_temp, m1);
        MatrixCopyFromPtr(m2_temp, m2);
      result_temp := sgGeometry.MatrixMultiply(m1_temp, m2_temp);
        MatrixCopyToPtr(result, result_temp);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_MatrixMultiply');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_MatrixMultiply');
    {$ENDIF}
  end;
  
  function sg_Geometry_MatrixMultiplyVector(m: SinglePtr; var v: Vector): Vector; cdecl; export;
    var
      m_temp: Matrix2D;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_MatrixMultiplyVector');
    {$ENDIF}
    
    try
        MatrixCopyFromPtr(m_temp, m);
      result := sgGeometry.MatrixMultiply(m_temp, v);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_MatrixMultiplyVector');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_MatrixMultiplyVector');
    {$ENDIF}
  end;
  
  procedure sg_Geometry_MatrixToString(m: SinglePtr; result: PChar); cdecl; export;
    var
      m_temp: Matrix2D;
      result_temp: String;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_MatrixToString');
    {$ENDIF}
    
    try
        MatrixCopyFromPtr(m_temp, m);
      result_temp := sgGeometry.MatrixToString(m_temp);
        StrCopy(result, PChar(result_temp));
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_MatrixToString');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_MatrixToString');
    {$ENDIF}
  end;
  
  function sg_Geometry_MinimumPointsForKind(k: ShapeKind): LongInt; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_MinimumPointsForKind');
    {$ENDIF}
    
    try
      result := sgGeometry.MinimumPointsForKind(k);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_MinimumPointsForKind');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_MinimumPointsForKind');
    {$ENDIF}
  end;
  
  function sg_Geometry_PointAdd(var pt1: Point2D; var pt2: Point2D): Point2D; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_PointAdd');
    {$ENDIF}
    
    try
      result := sgGeometry.PointAdd(pt1, pt2);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_PointAdd');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_PointAdd');
    {$ENDIF}
  end;
  
  function sg_Geometry_PointAt(x: Single; y: Single): Point2D; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_PointAt');
    {$ENDIF}
    
    try
      result := sgGeometry.PointAt(x, y);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_PointAt');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_PointAt');
    {$ENDIF}
  end;
  
  function sg_Geometry_PointAtStartWithOffset(var startPoint: Point2D; var offset: Vector): Point2D; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_PointAtStartWithOffset');
    {$ENDIF}
    
    try
      result := sgGeometry.PointAt(startPoint, offset);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_PointAtStartWithOffset');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_PointAtStartWithOffset');
    {$ENDIF}
  end;
  
  function sg_Geometry_PointInCircle(var pt: Point2D; var c: Circle): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_PointInCircle');
    {$ENDIF}
    
    try
      result := sgGeometry.PointInCircle(pt, c);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_PointInCircle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_PointInCircle');
    {$ENDIF}
  end;
  
  function sg_Geometry_PointInRect(var pt: Point2D; var rect: Rectangle): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_PointInRect');
    {$ENDIF}
    
    try
      result := sgGeometry.PointInRect(pt, rect);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_PointInRect');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_PointInRect');
    {$ENDIF}
  end;
  
  function sg_Geometry_PointInRectXY(var pt: Point2D; x: Single; y: Single; w: Single; h: Single): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_PointInRectXY');
    {$ENDIF}
    
    try
      result := sgGeometry.PointInRect(pt, x, y, w, h);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_PointInRectXY');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_PointInRectXY');
    {$ENDIF}
  end;
  
  function sg_Geometry_PointInShape(var pt: Point2D; s: Shape): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_PointInShape');
    {$ENDIF}
    
    try
      result := sgGeometry.PointInShape(pt, s);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_PointInShape');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_PointInShape');
    {$ENDIF}
  end;
  
  function sg_Geometry_PointInTriangle(var pt: Point2D; tri: Point2DPtr): Boolean; cdecl; export;
    var
      tri_temp: Triangle;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_PointInTriangle');
    {$ENDIF}
    
    try
        TriCopyFromPtr(tri_temp, tri);
      result := sgGeometry.PointInTriangle(pt, tri_temp);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_PointInTriangle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_PointInTriangle');
    {$ENDIF}
  end;
  
  function sg_Geometry_PointLineDistance(var pt: Point2D; var line: LineSegment): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_PointLineDistance');
    {$ENDIF}
    
    try
      result := sgGeometry.PointLineDistance(pt, line);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_PointLineDistance');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_PointLineDistance');
    {$ENDIF}
  end;
  
  function sg_Geometry_PointOnLine(var pt: Point2D; var line: LineSegment): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_PointOnLine');
    {$ENDIF}
    
    try
      result := sgGeometry.PointOnLine(pt, line);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_PointOnLine');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_PointOnLine');
    {$ENDIF}
  end;
  
  function sg_Geometry_PointPointDistance(var pt1: Point2D; var pt2: Point2D): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_PointPointDistance');
    {$ENDIF}
    
    try
      result := sgGeometry.PointPointDistance(pt1, pt2);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_PointPointDistance');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_PointPointDistance');
    {$ENDIF}
  end;
  
  function sg_Geometry_PointPrototypeFrom(var pt: Point2D): ShapePrototype; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_PointPrototypeFrom');
    {$ENDIF}
    
    try
      result := sgGeometry.PointPrototypeFrom(pt);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_PointPrototypeFrom');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_PointPrototypeFrom');
    {$ENDIF}
  end;
  
  procedure sg_Geometry_PointToString(var pt: Point2D; result: PChar); cdecl; export;
    var
      result_temp: String;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_PointToString');
    {$ENDIF}
    
    try
      result_temp := sgGeometry.PointToString(pt);
        StrCopy(result, PChar(result_temp));
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_PointToString');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_PointToString');
    {$ENDIF}
  end;
  
  function sg_Geometry_PointXYInRect(x: Single; y: Single; var rect: Rectangle): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_PointXYInRect');
    {$ENDIF}
    
    try
      result := sgGeometry.PointInRect(x, y, rect);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_PointXYInRect');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_PointXYInRect');
    {$ENDIF}
  end;
  
  function sg_Geometry_PointXYInRectXY(ptX: Single; ptY: Single; x: Single; y: Single; w: Single; h: Single): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_PointXYInRectXY');
    {$ENDIF}
    
    try
      result := sgGeometry.PointInRect(ptX, ptY, x, y, w, h);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_PointXYInRectXY');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_PointXYInRectXY');
    {$ENDIF}
  end;
  
  function sg_Geometry_PointXYLineDistance(x: Single; y: Single; var line: LineSegment): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_PointXYLineDistance');
    {$ENDIF}
    
    try
      result := sgGeometry.PointLineDistance(x, y, line);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_PointXYLineDistance');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_PointXYLineDistance');
    {$ENDIF}
  end;
  
  procedure sg_Geometry_PointsFromLine(var line: LineSegment; result: Point2DPtr; result_len: LongInt); cdecl; export;
    var
      result_temp: Point2DArray;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_PointsFromLine');
    {$ENDIF}
    
    try
      result_temp := sgGeometry.PointsFrom(line);
        Point2DCopyToPtr(result_temp, result_len, result);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_PointsFromLine');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_PointsFromLine');
    {$ENDIF}
  end;
  
  procedure sg_Geometry_PointsFromRect(var rect: Rectangle; result: Point2DPtr; result_len: LongInt); cdecl; export;
    var
      result_temp: Point2DArray;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_PointsFromRect');
    {$ENDIF}
    
    try
      result_temp := sgGeometry.PointsFrom(rect);
        Point2DCopyToPtr(result_temp, result_len, result);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_PointsFromRect');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_PointsFromRect');
    {$ENDIF}
  end;
  
  function sg_Geometry_PrototypeFrom(points: Point2DPtr; kind: ShapeKind; points_len: LongInt): ShapePrototype; cdecl; export;
    var
      points_temp: Point2DArray;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_PrototypeFrom');
    {$ENDIF}
    
    try
        Point2DCopyFromPtr(points, points_len, points_temp);
      result := sgGeometry.PrototypeFrom(points_temp, kind);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_PrototypeFrom');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_PrototypeFrom');
    {$ENDIF}
  end;
  
  function sg_Geometry_PrototypeKind(p: ShapePrototype): ShapeKind; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_PrototypeKind');
    {$ENDIF}
    
    try
      result := sgGeometry.PrototypeKind(p);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_PrototypeKind');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_PrototypeKind');
    {$ENDIF}
  end;
  
  function sg_Geometry_PrototypePointCount(p: ShapePrototype): LongInt; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_PrototypePointCount');
    {$ENDIF}
    
    try
      result := sgGeometry.PrototypePointCount(p);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_PrototypePointCount');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_PrototypePointCount');
    {$ENDIF}
  end;
  
  procedure sg_Geometry_PrototypePoints(p: ShapePrototype; result: Point2DPtr; result_len: LongInt); cdecl; export;
    var
      result_temp: Point2DArray;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_PrototypePoints');
    {$ENDIF}
    
    try
      result_temp := sgGeometry.PrototypePoints(p);
        Point2DCopyToPtr(result_temp, result_len, result);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_PrototypePoints');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_PrototypePoints');
    {$ENDIF}
  end;
  
  procedure sg_Geometry_PrototypeSetKind(p: ShapePrototype; value: ShapeKind); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_PrototypeSetKind');
    {$ENDIF}
  
    try 
      sgGeometry.PrototypeSetKind(p, value);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_PrototypeSetKind');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_PrototypeSetKind');
    {$ENDIF}
  end;
  
  procedure sg_Geometry_PrototypeSetPoints(p: ShapePrototype; value: Point2DPtr; value_len: LongInt); cdecl; export;
    var
      value_temp: Point2DArray;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_PrototypeSetPoints');
    {$ENDIF}
  
    try 
        Point2DCopyFromPtr(value, value_len, value_temp);
      sgGeometry.PrototypeSetPoints(p, value_temp);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_PrototypeSetPoints');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_PrototypeSetPoints');
    {$ENDIF}
  end;
  
  function sg_Geometry_RayCircleIntersectDistance(var ray_origin: Point2D; var ray_heading: Vector; var c: Circle): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_RayCircleIntersectDistance');
    {$ENDIF}
    
    try
      result := sgGeometry.RayCircleIntersectDistance(ray_origin, ray_heading, c);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_RayCircleIntersectDistance');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_RayCircleIntersectDistance');
    {$ENDIF}
  end;
  
  function sg_Geometry_RayIntersectionPoint(var fromPt: Point2D; var heading: Vector; var line: LineSegment; out pt: Point2D): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_RayIntersectionPoint');
    {$ENDIF}
    
    try
      result := sgGeometry.RayIntersectionPoint(fromPt, heading, line, pt);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_RayIntersectionPoint');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_RayIntersectionPoint');
    {$ENDIF}
  end;
  
  function sg_Geometry_RectangleAfterMove(var rect: Rectangle; var mv: Vector): Rectangle; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_RectangleAfterMove');
    {$ENDIF}
    
    try
      result := sgGeometry.RectangleAfterMove(rect, mv);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_RectangleAfterMove');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_RectangleAfterMove');
    {$ENDIF}
  end;
  
  function sg_Geometry_RectangleAtPoint(var pt: Point2D; width: LongInt; height: LongInt): Rectangle; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_RectangleAtPoint');
    {$ENDIF}
    
    try
      result := sgGeometry.RectangleFrom(pt, width, height);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_RectangleAtPoint');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_RectangleAtPoint');
    {$ENDIF}
  end;
  
  function sg_Geometry_RectangleBottom(var rect: Rectangle): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_RectangleBottom');
    {$ENDIF}
    
    try
      result := sgGeometry.RectangleBottom(rect);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_RectangleBottom');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_RectangleBottom');
    {$ENDIF}
  end;
  
  function sg_Geometry_RectangleBottomLeft(var rect: Rectangle): Point2D; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_RectangleBottomLeft');
    {$ENDIF}
    
    try
      result := sgGeometry.RectangleBottomLeft(rect);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_RectangleBottomLeft');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_RectangleBottomLeft');
    {$ENDIF}
  end;
  
  function sg_Geometry_RectangleBottomRight(var rect: Rectangle): Point2D; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_RectangleBottomRight');
    {$ENDIF}
    
    try
      result := sgGeometry.RectangleBottomRight(rect);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_RectangleBottomRight');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_RectangleBottomRight');
    {$ENDIF}
  end;
  
  function sg_Geometry_RectangleCenter(var rect: Rectangle): Point2D; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_RectangleCenter');
    {$ENDIF}
    
    try
      result := sgGeometry.RectangleCenter(rect);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_RectangleCenter');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_RectangleCenter');
    {$ENDIF}
  end;
  
  function sg_Geometry_RectangleCenterBottom(var rect: Rectangle): Point2D; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_RectangleCenterBottom');
    {$ENDIF}
    
    try
      result := sgGeometry.RectangleCenterBottom(rect);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_RectangleCenterBottom');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_RectangleCenterBottom');
    {$ENDIF}
  end;
  
  function sg_Geometry_RectangleCenterLeft(var rect: Rectangle): Point2D; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_RectangleCenterLeft');
    {$ENDIF}
    
    try
      result := sgGeometry.RectangleCenterLeft(rect);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_RectangleCenterLeft');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_RectangleCenterLeft');
    {$ENDIF}
  end;
  
  function sg_Geometry_RectangleCenterRight(var rect: Rectangle): Point2D; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_RectangleCenterRight');
    {$ENDIF}
    
    try
      result := sgGeometry.RectangleCenterRight(rect);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_RectangleCenterRight');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_RectangleCenterRight');
    {$ENDIF}
  end;
  
  function sg_Geometry_RectangleCenterTop(var rect: Rectangle): Point2D; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_RectangleCenterTop');
    {$ENDIF}
    
    try
      result := sgGeometry.RectangleCenterTop(rect);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_RectangleCenterTop');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_RectangleCenterTop');
    {$ENDIF}
  end;
  
  function sg_Geometry_RectangleForPoints(var pt1: Point2D; var pt2: Point2D): Rectangle; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_RectangleForPoints');
    {$ENDIF}
    
    try
      result := sgGeometry.RectangleFrom(pt1, pt2);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_RectangleForPoints');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_RectangleForPoints');
    {$ENDIF}
  end;
  
  function sg_Geometry_RectangleFrom(x: Single; y: Single; w: LongInt; h: LongInt): Rectangle; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_RectangleFrom');
    {$ENDIF}
    
    try
      result := sgGeometry.RectangleFrom(x, y, w, h);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_RectangleFrom');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_RectangleFrom');
    {$ENDIF}
  end;
  
  function sg_Geometry_RectangleFromCircle(var c: Circle): Rectangle; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_RectangleFromCircle');
    {$ENDIF}
    
    try
      result := sgGeometry.RectangleFrom(c);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_RectangleFromCircle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_RectangleFromCircle');
    {$ENDIF}
  end;
  
  function sg_Geometry_RectangleFromLine(var line: LineSegment): Rectangle; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_RectangleFromLine');
    {$ENDIF}
    
    try
      result := sgGeometry.RectangleFrom(line);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_RectangleFromLine');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_RectangleFromLine');
    {$ENDIF}
  end;
  
  function sg_Geometry_RectangleFromLines(lines: LineSegmentPtr; lines_len: LongInt): Rectangle; cdecl; export;
    var
      lines_temp: LinesArray;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_RectangleFromLines');
    {$ENDIF}
    
    try
        LineCopyFromPtr(lines, lines_len, lines_temp);
      result := sgGeometry.RectangleFrom(lines_temp);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_RectangleFromLines');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_RectangleFromLines');
    {$ENDIF}
  end;
  
  function sg_Geometry_RectangleFromTriangle(tri: Point2DPtr): Rectangle; cdecl; export;
    var
      tri_temp: Triangle;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_RectangleFromTriangle');
    {$ENDIF}
    
    try
        TriCopyFromPtr(tri_temp, tri);
      result := sgGeometry.RectangleFrom(tri_temp);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_RectangleFromTriangle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_RectangleFromTriangle');
    {$ENDIF}
  end;
  
  function sg_Geometry_RectangleLeft(var rect: Rectangle): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_RectangleLeft');
    {$ENDIF}
    
    try
      result := sgGeometry.RectangleLeft(rect);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_RectangleLeft');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_RectangleLeft');
    {$ENDIF}
  end;
  
  function sg_Geometry_RectangleOffset(var rect: Rectangle; var vec: Vector): Rectangle; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_RectangleOffset');
    {$ENDIF}
    
    try
      result := sgGeometry.RectangleOffset(rect, vec);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_RectangleOffset');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_RectangleOffset');
    {$ENDIF}
  end;
  
  function sg_Geometry_RectangleRight(var rect: Rectangle): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_RectangleRight');
    {$ENDIF}
    
    try
      result := sgGeometry.RectangleRight(rect);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_RectangleRight');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_RectangleRight');
    {$ENDIF}
  end;
  
  procedure sg_Geometry_RectangleToString(var rect: Rectangle; result: PChar); cdecl; export;
    var
      result_temp: String;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_RectangleToString');
    {$ENDIF}
    
    try
      result_temp := sgGeometry.RectangleToString(rect);
        StrCopy(result, PChar(result_temp));
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_RectangleToString');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_RectangleToString');
    {$ENDIF}
  end;
  
  function sg_Geometry_RectangleTop(var rect: Rectangle): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_RectangleTop');
    {$ENDIF}
    
    try
      result := sgGeometry.RectangleTop(rect);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_RectangleTop');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_RectangleTop');
    {$ENDIF}
  end;
  
  function sg_Geometry_RectangleTopLeft(var rect: Rectangle): Point2D; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_RectangleTopLeft');
    {$ENDIF}
    
    try
      result := sgGeometry.RectangleTopLeft(rect);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_RectangleTopLeft');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_RectangleTopLeft');
    {$ENDIF}
  end;
  
  function sg_Geometry_RectangleTopRight(var rect: Rectangle): Point2D; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_RectangleTopRight');
    {$ENDIF}
    
    try
      result := sgGeometry.RectangleTopRight(rect);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_RectangleTopRight');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_RectangleTopRight');
    {$ENDIF}
  end;
  
  function sg_Geometry_RectanglesIntersect(var rect1: Rectangle; var rect2: Rectangle): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_RectanglesIntersect');
    {$ENDIF}
    
    try
      result := sgGeometry.RectanglesIntersect(rect1, rect2);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_RectanglesIntersect');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_RectanglesIntersect');
    {$ENDIF}
  end;
  
  procedure sg_Geometry_RotationMatrix(deg: Single; result: SinglePtr); cdecl; export;
    var
      result_temp: Matrix2D;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_RotationMatrix');
    {$ENDIF}
    
    try
      result_temp := sgGeometry.RotationMatrix(deg);
        MatrixCopyToPtr(result, result_temp);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_RotationMatrix');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_RotationMatrix');
    {$ENDIF}
  end;
  
  procedure sg_Geometry_ScaleMatrix(scale: Single; result: SinglePtr); cdecl; export;
    var
      result_temp: Matrix2D;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_ScaleMatrix');
    {$ENDIF}
    
    try
      result_temp := sgGeometry.ScaleMatrix(scale);
        MatrixCopyToPtr(result, result_temp);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_ScaleMatrix');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_ScaleMatrix');
    {$ENDIF}
  end;
  
  procedure sg_Geometry_ScaleMatrixByPoint(var scale: Point2D; result: SinglePtr); cdecl; export;
    var
      result_temp: Matrix2D;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_ScaleMatrixByPoint');
    {$ENDIF}
    
    try
      result_temp := sgGeometry.ScaleMatrix(scale);
        MatrixCopyToPtr(result, result_temp);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_ScaleMatrixByPoint');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_ScaleMatrixByPoint');
    {$ENDIF}
  end;
  
  procedure sg_Geometry_ScaleRotateTranslateMatrix(var scale: Point2D; deg: Single; var translate: Point2D; result: SinglePtr); cdecl; export;
    var
      result_temp: Matrix2D;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_ScaleRotateTranslateMatrix');
    {$ENDIF}
    
    try
      result_temp := sgGeometry.ScaleRotateTranslateMatrix(scale, deg, translate);
        MatrixCopyToPtr(result, result_temp);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_ScaleRotateTranslateMatrix');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_ScaleRotateTranslateMatrix');
    {$ENDIF}
  end;
  
  function sg_Geometry_ShapeAABB(shp: Shape): Rectangle; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_ShapeAABB');
    {$ENDIF}
    
    try
      result := sgGeometry.ShapeAABB(shp);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_ShapeAABB');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_ShapeAABB');
    {$ENDIF}
  end;
  
  procedure sg_Geometry_ShapeAddSubShape(parent: Shape; child: Shape); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_ShapeAddSubShape');
    {$ENDIF}
  
    try 
      sgGeometry.ShapeAddSubShape(parent, child);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_ShapeAddSubShape');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_ShapeAddSubShape');
    {$ENDIF}
  end;
  
  function sg_Geometry_ShapeAngle(s: Shape): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_ShapeAngle');
    {$ENDIF}
    
    try
      result := sgGeometry.ShapeAngle(s);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_ShapeAngle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_ShapeAngle');
    {$ENDIF}
  end;
  
  function sg_Geometry_ShapeAtPoint(p: ShapePrototype; var pt: Point2D): Shape; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_ShapeAtPoint');
    {$ENDIF}
    
    try
      result := sgGeometry.ShapeAtPoint(p, pt);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_ShapeAtPoint');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_ShapeAtPoint');
    {$ENDIF}
  end;
  
  function sg_Geometry_ShapeCircle(shp: Shape): Circle; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_ShapeCircle');
    {$ENDIF}
    
    try
      result := sgGeometry.ShapeCircle(shp);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_ShapeCircle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_ShapeCircle');
    {$ENDIF}
  end;
  
  function sg_Geometry_ShapeCircleOffset(shp: Shape; var offset: Point2D): Circle; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_ShapeCircleOffset');
    {$ENDIF}
    
    try
      result := sgGeometry.ShapeCircle(shp, offset);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_ShapeCircleOffset');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_ShapeCircleOffset');
    {$ENDIF}
  end;
  
  function sg_Geometry_ShapeColor(s: Shape): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_ShapeColor');
    {$ENDIF}
    
    try
      result := sgGeometry.ShapeColor(s);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_ShapeColor');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_ShapeColor');
    {$ENDIF}
  end;
  
  function sg_Geometry_ShapeLine(shp: Shape): LineSegment; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_ShapeLine');
    {$ENDIF}
    
    try
      result := sgGeometry.ShapeLine(shp);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_ShapeLine');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_ShapeLine');
    {$ENDIF}
  end;
  
  function sg_Geometry_ShapeLineOffset(shp: Shape; var offset: Point2D): LineSegment; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_ShapeLineOffset');
    {$ENDIF}
    
    try
      result := sgGeometry.ShapeLine(shp, offset);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_ShapeLineOffset');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_ShapeLineOffset');
    {$ENDIF}
  end;
  
  procedure sg_Geometry_ShapeLines(shp: Shape; kind: ShapeKind; result: LineSegmentPtr; result_len: LongInt); cdecl; export;
    var
      result_temp: LinesArray;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_ShapeLines');
    {$ENDIF}
    
    try
      result_temp := sgGeometry.ShapeLines(shp, kind);
        LineCopyToPtr(result_temp, result_len, result);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_ShapeLines');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_ShapeLines');
    {$ENDIF}
  end;
  
  procedure sg_Geometry_ShapeLinesWithOffset(shp: Shape; kind: ShapeKind; var offset: Point2D; result: LineSegmentPtr; result_len: LongInt); cdecl; export;
    var
      result_temp: LinesArray;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_ShapeLinesWithOffset');
    {$ENDIF}
    
    try
      result_temp := sgGeometry.ShapeLines(shp, kind, offset);
        LineCopyToPtr(result_temp, result_len, result);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_ShapeLinesWithOffset');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_ShapeLinesWithOffset');
    {$ENDIF}
  end;
  
  function sg_Geometry_ShapePointCount(s: Shape): LongInt; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_ShapePointCount');
    {$ENDIF}
    
    try
      result := sgGeometry.ShapePointCount(s);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_ShapePointCount');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_ShapePointCount');
    {$ENDIF}
  end;
  
  procedure sg_Geometry_ShapePoints(s: Shape; result: Point2DPtr; result_len: LongInt); cdecl; export;
    var
      result_temp: Point2DArray;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_ShapePoints');
    {$ENDIF}
    
    try
      result_temp := sgGeometry.ShapePoints(s);
        Point2DCopyToPtr(result_temp, result_len, result);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_ShapePoints');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_ShapePoints');
    {$ENDIF}
  end;
  
  function sg_Geometry_ShapeRectangleIntersect(shp: Shape; var rect: Rectangle): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_ShapeRectangleIntersect');
    {$ENDIF}
    
    try
      result := sgGeometry.ShapeRectangleIntersect(shp, rect);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_ShapeRectangleIntersect');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_ShapeRectangleIntersect');
    {$ENDIF}
  end;
  
  function sg_Geometry_ShapeScale(s: Shape): Point2D; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_ShapeScale');
    {$ENDIF}
    
    try
      result := sgGeometry.ShapeScale(s);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_ShapeScale');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_ShapeScale');
    {$ENDIF}
  end;
  
  procedure sg_Geometry_ShapeSetAngle(s: Shape; value: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_ShapeSetAngle');
    {$ENDIF}
  
    try 
      sgGeometry.ShapeSetAngle(s, value);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_ShapeSetAngle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_ShapeSetAngle');
    {$ENDIF}
  end;
  
  procedure sg_Geometry_ShapeSetColor(s: Shape; value: LongWord); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_ShapeSetColor');
    {$ENDIF}
  
    try 
      sgGeometry.ShapeSetColor(s, value);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_ShapeSetColor');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_ShapeSetColor');
    {$ENDIF}
  end;
  
  procedure sg_Geometry_ShapeSetPrototype(s: Shape; value: ShapePrototype); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_ShapeSetPrototype');
    {$ENDIF}
  
    try 
      sgGeometry.ShapeSetPrototype(s, value);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_ShapeSetPrototype');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_ShapeSetPrototype');
    {$ENDIF}
  end;
  
  procedure sg_Geometry_ShapeSetScale(s: Shape; var value: Point2D); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_ShapeSetScale');
    {$ENDIF}
  
    try 
      sgGeometry.ShapeSetScale(s, value);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_ShapeSetScale');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_ShapeSetScale');
    {$ENDIF}
  end;
  
  function sg_Geometry_ShapeShapeKind(shp: Shape): ShapeKind; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_ShapeShapeKind');
    {$ENDIF}
    
    try
      result := sgGeometry.ShapeShapeKind(shp);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_ShapeShapeKind');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_ShapeShapeKind');
    {$ENDIF}
  end;
  
  function sg_Geometry_ShapeShapePrototype(s: Shape): ShapePrototype; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_ShapeShapePrototype');
    {$ENDIF}
    
    try
      result := sgGeometry.ShapeShapePrototype(s);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_ShapeShapePrototype');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_ShapeShapePrototype');
    {$ENDIF}
  end;
  
  procedure sg_Geometry_ShapeTriangle(shp: Shape; result: Point2DPtr); cdecl; export;
    var
      result_temp: Triangle;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_ShapeTriangle');
    {$ENDIF}
    
    try
      result_temp := sgGeometry.ShapeTriangle(shp);
        TriCopyToPtr(result, result_temp);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_ShapeTriangle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_ShapeTriangle');
    {$ENDIF}
  end;
  
  procedure sg_Geometry_ShapeTriangleWithOffset(shp: Shape; var offset: Point2D; result: Point2DPtr); cdecl; export;
    var
      result_temp: Triangle;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_ShapeTriangleWithOffset');
    {$ENDIF}
    
    try
      result_temp := sgGeometry.ShapeTriangle(shp, offset);
        TriCopyToPtr(result, result_temp);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_ShapeTriangleWithOffset');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_ShapeTriangleWithOffset');
    {$ENDIF}
  end;
  
  procedure sg_Geometry_ShapeTriangles(shp: Shape; kind: ShapeKind; result: TrianglePtr; result_len: LongInt); cdecl; export;
    var
      result_temp: TriangleArray;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_ShapeTriangles');
    {$ENDIF}
    
    try
      result_temp := sgGeometry.ShapeTriangles(shp, kind);
        TriangleCopyToPtr(result_temp, result_len, result);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_ShapeTriangles');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_ShapeTriangles');
    {$ENDIF}
  end;
  
  procedure sg_Geometry_ShapeTrianglesOffset(shp: Shape; kind: ShapeKind; var offset: Point2D; result: TrianglePtr; result_len: LongInt); cdecl; export;
    var
      result_temp: TriangleArray;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_ShapeTrianglesOffset');
    {$ENDIF}
    
    try
      result_temp := sgGeometry.ShapeTriangles(shp, kind, offset);
        TriangleCopyToPtr(result_temp, result_len, result);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_ShapeTrianglesOffset');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_ShapeTrianglesOffset');
    {$ENDIF}
  end;
  
  function sg_Geometry_Sine(angle: Single): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_Sine');
    {$ENDIF}
    
    try
      result := sgGeometry.Sine(angle);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_Sine');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_Sine');
    {$ENDIF}
  end;
  
  function sg_Geometry_SubtractVectors(var v1: Vector; var v2: Vector): Vector; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_SubtractVectors');
    {$ENDIF}
    
    try
      result := sgGeometry.SubtractVectors(v1, v2);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_SubtractVectors');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_SubtractVectors');
    {$ENDIF}
  end;
  
  function sg_Geometry_Tangent(angle: Single): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_Tangent');
    {$ENDIF}
    
    try
      result := sgGeometry.Tangent(angle);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_Tangent');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_Tangent');
    {$ENDIF}
  end;
  
  function sg_Geometry_TangentPoints(var fromPt: Point2D; var c: Circle; out p1: Point2D; out p2: Point2D): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_TangentPoints');
    {$ENDIF}
    
    try
      result := sgGeometry.TangentPoints(fromPt, c, p1, p2);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_TangentPoints');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_TangentPoints');
    {$ENDIF}
  end;
  
  procedure sg_Geometry_TranslationMatrix(dx: Single; dy: Single; result: SinglePtr); cdecl; export;
    var
      result_temp: Matrix2D;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_TranslationMatrix');
    {$ENDIF}
    
    try
      result_temp := sgGeometry.TranslationMatrix(dx, dy);
        MatrixCopyToPtr(result, result_temp);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_TranslationMatrix');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_TranslationMatrix');
    {$ENDIF}
  end;
  
  procedure sg_Geometry_TranslationMatrixPt(var pt: Point2D; result: SinglePtr); cdecl; export;
    var
      result_temp: Matrix2D;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_TranslationMatrixPt');
    {$ENDIF}
    
    try
      result_temp := sgGeometry.TranslationMatrix(pt);
        MatrixCopyToPtr(result, result_temp);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_TranslationMatrixPt');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_TranslationMatrixPt');
    {$ENDIF}
  end;
  
  function sg_Geometry_TriangleBarycenter(tri: Point2DPtr): Point2D; cdecl; export;
    var
      tri_temp: Triangle;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_TriangleBarycenter');
    {$ENDIF}
    
    try
        TriCopyFromPtr(tri_temp, tri);
      result := sgGeometry.TriangleBarycenter(tri_temp);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_TriangleBarycenter');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_TriangleBarycenter');
    {$ENDIF}
  end;
  
  function sg_Geometry_TriangleFanPrototypeFrom(points: Point2DPtr; points_len: LongInt): ShapePrototype; cdecl; export;
    var
      points_temp: Point2DArray;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_TriangleFanPrototypeFrom');
    {$ENDIF}
    
    try
        Point2DCopyFromPtr(points, points_len, points_temp);
      result := sgGeometry.TriangleFanPrototypeFrom(points_temp);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_TriangleFanPrototypeFrom');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_TriangleFanPrototypeFrom');
    {$ENDIF}
  end;
  
  procedure sg_Geometry_TriangleFrom(ax: Single; ay: Single; bx: Single; by: Single; cx: Single; cy: Single; result: Point2DPtr); cdecl; export;
    var
      result_temp: Triangle;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_TriangleFrom');
    {$ENDIF}
    
    try
      result_temp := sgGeometry.TriangleFrom(ax, ay, bx, by, cx, cy);
        TriCopyToPtr(result, result_temp);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_TriangleFrom');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_TriangleFrom');
    {$ENDIF}
  end;
  
  procedure sg_Geometry_TriangleFromPoints(var a: Point2D; var b: Point2D; var c: Point2D; result: Point2DPtr); cdecl; export;
    var
      result_temp: Triangle;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_TriangleFromPoints');
    {$ENDIF}
    
    try
      result_temp := sgGeometry.TriangleFrom(a, b, c);
        TriCopyToPtr(result, result_temp);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_TriangleFromPoints');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_TriangleFromPoints');
    {$ENDIF}
  end;
  
  function sg_Geometry_TriangleListPrototypeFrom(points: Point2DPtr; points_len: LongInt): ShapePrototype; cdecl; export;
    var
      points_temp: Point2DArray;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_TriangleListPrototypeFrom');
    {$ENDIF}
    
    try
        Point2DCopyFromPtr(points, points_len, points_temp);
      result := sgGeometry.TriangleListPrototypeFrom(points_temp);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_TriangleListPrototypeFrom');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_TriangleListPrototypeFrom');
    {$ENDIF}
  end;
  
  function sg_Geometry_TrianglePrototypeFrom(var pt1: Point2D; var pt2: Point2D; var pt3: Point2D): ShapePrototype; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_TrianglePrototypeFrom');
    {$ENDIF}
    
    try
      result := sgGeometry.TrianglePrototypeFrom(pt1, pt2, pt3);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_TrianglePrototypeFrom');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_TrianglePrototypeFrom');
    {$ENDIF}
  end;
  
  function sg_Geometry_TriangleRectangleIntersect(tri: Point2DPtr; var rect: Rectangle): Boolean; cdecl; export;
    var
      tri_temp: Triangle;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_TriangleRectangleIntersect');
    {$ENDIF}
    
    try
        TriCopyFromPtr(tri_temp, tri);
      result := sgGeometry.TriangleRectangleIntersect(tri_temp, rect);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_TriangleRectangleIntersect');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_TriangleRectangleIntersect');
    {$ENDIF}
  end;
  
  function sg_Geometry_TriangleStripPrototypeFrom(points: Point2DPtr; points_len: LongInt): ShapePrototype; cdecl; export;
    var
      points_temp: Point2DArray;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_TriangleStripPrototypeFrom');
    {$ENDIF}
    
    try
        Point2DCopyFromPtr(points, points_len, points_temp);
      result := sgGeometry.TriangleStripPrototypeFrom(points_temp);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_TriangleStripPrototypeFrom');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_TriangleStripPrototypeFrom');
    {$ENDIF}
  end;
  
  procedure sg_Geometry_TriangleToString(tri: Point2DPtr; result: PChar); cdecl; export;
    var
      tri_temp: Triangle;
      result_temp: String;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_TriangleToString');
    {$ENDIF}
    
    try
        TriCopyFromPtr(tri_temp, tri);
      result_temp := sgGeometry.TriangleToString(tri_temp);
        StrCopy(result, PChar(result_temp));
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_TriangleToString');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_TriangleToString');
    {$ENDIF}
  end;
  
  function sg_Geometry_TrianglesRectangleIntersect(tri: TrianglePtr; var rect: Rectangle; tri_len: LongInt): Boolean; cdecl; export;
    var
      tri_temp: TriangleArray;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_TrianglesRectangleIntersect');
    {$ENDIF}
    
    try
        TriangleCopyFromPtr(tri, tri_len, tri_temp);
      result := sgGeometry.TrianglesRectangleIntersect(tri_temp, rect);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_TrianglesRectangleIntersect');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_TrianglesRectangleIntersect');
    {$ENDIF}
  end;
  
  function sg_Geometry_UnitVector(var v: Vector): Vector; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_UnitVector');
    {$ENDIF}
    
    try
      result := sgGeometry.UnitVector(v);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_UnitVector');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_UnitVector');
    {$ENDIF}
  end;
  
  procedure sg_Geometry_UpdateShapePoints(s: Shape); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_UpdateShapePoints');
    {$ENDIF}
  
    try 
      sgGeometry.UpdateShapePoints(s);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_UpdateShapePoints');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_UpdateShapePoints');
    {$ENDIF}
  end;
  
  function sg_Geometry_VectorAngle(var v: Vector): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_VectorAngle');
    {$ENDIF}
    
    try
      result := sgGeometry.VectorAngle(v);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_VectorAngle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_VectorAngle');
    {$ENDIF}
  end;
  
  function sg_Geometry_VectorFromAngle(angle: Single; magnitude: Single): Vector; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_VectorFromAngle');
    {$ENDIF}
    
    try
      result := sgGeometry.VectorFromAngle(angle, magnitude);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_VectorFromAngle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_VectorFromAngle');
    {$ENDIF}
  end;
  
  function sg_Geometry_VectorFromPointPtToRectangle(var pt: Point2D; var rect: Rectangle): Vector; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_VectorFromPointPtToRectangle');
    {$ENDIF}
    
    try
      result := sgGeometry.VectorFromPointToRect(pt, rect);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_VectorFromPointPtToRectangle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_VectorFromPointPtToRectangle');
    {$ENDIF}
  end;
  
  function sg_Geometry_VectorFromPointToRect(x: Single; y: Single; rectX: Single; rectY: Single; rectWidth: LongInt; rectHeight: LongInt): Vector; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_VectorFromPointToRect');
    {$ENDIF}
    
    try
      result := sgGeometry.VectorFromPointToRect(x, y, rectX, rectY, rectWidth, rectHeight);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_VectorFromPointToRect');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_VectorFromPointToRect');
    {$ENDIF}
  end;
  
  function sg_Geometry_VectorFromPointToRectangle(x: Single; y: Single; var rect: Rectangle): Vector; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_VectorFromPointToRectangle');
    {$ENDIF}
    
    try
      result := sgGeometry.VectorFromPointToRect(x, y, rect);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_VectorFromPointToRectangle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_VectorFromPointToRectangle');
    {$ENDIF}
  end;
  
  function sg_Geometry_VectorFromPoints(var p1: Point2D; var p2: Point2D): Vector; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_VectorFromPoints');
    {$ENDIF}
    
    try
      result := sgGeometry.VectorFromPoints(p1, p2);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_VectorFromPoints');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_VectorFromPoints');
    {$ENDIF}
  end;
  
  function sg_Geometry_VectorInRect(var v: Vector; var rect: Rectangle): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_VectorInRect');
    {$ENDIF}
    
    try
      result := sgGeometry.VectorInRect(v, rect);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_VectorInRect');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_VectorInRect');
    {$ENDIF}
  end;
  
  function sg_Geometry_VectorInRectXY(var v: Vector; x: Single; y: Single; w: Single; h: Single): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_VectorInRectXY');
    {$ENDIF}
    
    try
      result := sgGeometry.VectorInRect(v, x, y, w, h);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_VectorInRectXY');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_VectorInRectXY');
    {$ENDIF}
  end;
  
  function sg_Geometry_VectorIsZero(var v: Vector): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_VectorIsZero');
    {$ENDIF}
    
    try
      result := sgGeometry.VectorIsZero(v);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_VectorIsZero');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_VectorIsZero');
    {$ENDIF}
  end;
  
  function sg_Geometry_VectorMagnitude(var v: Vector): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_VectorMagnitude');
    {$ENDIF}
    
    try
      result := sgGeometry.VectorMagnitude(v);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_VectorMagnitude');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_VectorMagnitude');
    {$ENDIF}
  end;
  
  function sg_Geometry_VectorMagnitudeSq(var v: Vector): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_VectorMagnitudeSq');
    {$ENDIF}
    
    try
      result := sgGeometry.VectorMagnitudeSq(v);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_VectorMagnitudeSq');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_VectorMagnitudeSq');
    {$ENDIF}
  end;
  
  function sg_Geometry_VectorMultiply(var v: Vector; s: Single): Vector; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_VectorMultiply');
    {$ENDIF}
    
    try
      result := sgGeometry.VectorMultiply(v, s);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_VectorMultiply');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_VectorMultiply');
    {$ENDIF}
  end;
  
  function sg_Geometry_VectorNormal(var v: Vector): Vector; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_VectorNormal');
    {$ENDIF}
    
    try
      result := sgGeometry.VectorNormal(v);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_VectorNormal');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_VectorNormal');
    {$ENDIF}
  end;
  
  function sg_Geometry_VectorOutOfCircleFromCircle(var src: Circle; var bounds: Circle; var velocity: Vector): Vector; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_VectorOutOfCircleFromCircle');
    {$ENDIF}
    
    try
      result := sgGeometry.VectorOutOfCircleFromCircle(src, bounds, velocity);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_VectorOutOfCircleFromCircle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_VectorOutOfCircleFromCircle');
    {$ENDIF}
  end;
  
  function sg_Geometry_VectorOutOfCircleFromPoint(var pt: Point2D; var c: Circle; var velocity: Vector): Vector; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_VectorOutOfCircleFromPoint');
    {$ENDIF}
    
    try
      result := sgGeometry.VectorOutOfCircleFromPoint(pt, c, velocity);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_VectorOutOfCircleFromPoint');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_VectorOutOfCircleFromPoint');
    {$ENDIF}
  end;
  
  function sg_Geometry_VectorOutOfRectFromCircle(var c: Circle; var rect: Rectangle; var velocity: Vector): Vector; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_VectorOutOfRectFromCircle');
    {$ENDIF}
    
    try
      result := sgGeometry.VectorOutOfRectFromCircle(c, rect, velocity);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_VectorOutOfRectFromCircle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_VectorOutOfRectFromCircle');
    {$ENDIF}
  end;
  
  function sg_Geometry_VectorOutOfRectFromPoint(var pt: Point2D; var rect: Rectangle; var velocity: Vector): Vector; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_VectorOutOfRectFromPoint');
    {$ENDIF}
    
    try
      result := sgGeometry.VectorOutOfRectFromPoint(pt, rect, velocity);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_VectorOutOfRectFromPoint');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_VectorOutOfRectFromPoint');
    {$ENDIF}
  end;
  
  function sg_Geometry_VectorOutOfRectFromRect(var src: Rectangle; var bounds: Rectangle; var velocity: Vector): Vector; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_VectorOutOfRectFromRect');
    {$ENDIF}
    
    try
      result := sgGeometry.VectorOutOfRectFromRect(src, bounds, velocity);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_VectorOutOfRectFromRect');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_VectorOutOfRectFromRect');
    {$ENDIF}
  end;
  
  function sg_Geometry_VectorOutOfShapeFromRect(s: Shape; var bounds: Rectangle; var velocity: Vector): Vector; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_VectorOutOfShapeFromRect');
    {$ENDIF}
    
    try
      result := sgGeometry.VectorOutOfShapeFromRect(s, bounds, velocity);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_VectorOutOfShapeFromRect');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_VectorOutOfShapeFromRect');
    {$ENDIF}
  end;
  
  function sg_Geometry_VectorOverLinesFromCircle(var c: Circle; lines: LineSegmentPtr; var velocity: Vector; out maxIdx: LongInt; lines_len: LongInt): Vector; cdecl; export;
    var
      lines_temp: LinesArray;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_VectorOverLinesFromCircle');
    {$ENDIF}
    
    try
        LineCopyFromPtr(lines, lines_len, lines_temp);
      result := sgGeometry.VectorOverLinesFromCircle(c, lines_temp, velocity, maxIdx);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_VectorOverLinesFromCircle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_VectorOverLinesFromCircle');
    {$ENDIF}
  end;
  
  function sg_Geometry_VectorTo(x: Single; y: Single; invertY: Boolean): Vector; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_VectorTo');
    {$ENDIF}
    
    try
      result := sgGeometry.VectorTo(x, y, invertY);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_VectorTo');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_VectorTo');
    {$ENDIF}
  end;
  
  function sg_Geometry_VectorToPoint(var p1: Point2D): Vector; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_VectorToPoint');
    {$ENDIF}
    
    try
      result := sgGeometry.VectorToPoint(p1);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_VectorToPoint');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_VectorToPoint');
    {$ENDIF}
  end;
  
  function sg_Geometry_VectorsEqual(var v1: Vector; var v2: Vector): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_VectorsEqual');
    {$ENDIF}
    
    try
      result := sgGeometry.VectorsEqual(v1, v2);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_VectorsEqual');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_VectorsEqual');
    {$ENDIF}
  end;
  
  procedure sg_Geometry_WidestPoints(var c: Circle; var along: Vector; out pt1: Point2D; out pt2: Point2D); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Geometry_WidestPoints');
    {$ENDIF}
  
    try 
      sgGeometry.WidestPoints(c, along, pt1, pt2);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Geometry_WidestPoints');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Geometry_WidestPoints');
    {$ENDIF}
  end;
  
  procedure sg_Graphics_ClearScreenToBlack(); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ClearScreenToBlack');
    {$ENDIF}
  
    try 
      sgGraphics.ClearScreen();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ClearScreenToBlack');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ClearScreenToBlack');
    {$ENDIF}
  end;
  
  procedure sg_Graphics_ClearScreenWithColor(toColor: LongWord); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ClearScreenWithColor');
    {$ENDIF}
  
    try 
      sgGraphics.ClearScreen(toColor);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ClearScreenWithColor');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ClearScreenWithColor');
    {$ENDIF}
  end;
  
  function sg_Graphics_CurrentBmpClip(bmp: Bitmap): Rectangle; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_CurrentBmpClip');
    {$ENDIF}
    
    try
      result := sgGraphics.CurrentClip(bmp);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_CurrentBmpClip');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_CurrentBmpClip');
    {$ENDIF}
  end;
  
  function sg_Graphics_CurrentScreenClip(): Rectangle; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_CurrentScreenClip');
    {$ENDIF}
    
    try
      result := sgGraphics.CurrentClip();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_CurrentScreenClip');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_CurrentScreenClip');
    {$ENDIF}
  end;
  
  procedure sg_Graphics_DrawHorizontalLine(clr: LongWord; y: Single; x1: Single; x2: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawHorizontalLine');
    {$ENDIF}
  
    try 
      sgGraphics.DrawHorizontalLine(clr, y, x1, x2);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawHorizontalLine');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawHorizontalLine');
    {$ENDIF}
  end;
  
  procedure sg_Graphics_DrawHorizontalLineOnScreen(clr: LongWord; y: LongInt; x1: LongInt; x2: LongInt); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawHorizontalLineOnScreen');
    {$ENDIF}
  
    try 
      sgGraphics.DrawHorizontalLineOnScreen(clr, y, x1, x2);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawHorizontalLineOnScreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawHorizontalLineOnScreen');
    {$ENDIF}
  end;
  
  procedure sg_Graphics_DrawHorizontalLineOnto(dest: Bitmap; clr: LongWord; y: LongInt; x1: LongInt; x2: LongInt); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawHorizontalLineOnto');
    {$ENDIF}
  
    try 
      sgGraphics.DrawHorizontalLine(dest, clr, y, x1, x2);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawHorizontalLineOnto');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawHorizontalLineOnto');
    {$ENDIF}
  end;
  
  procedure sg_Graphics_DrawLine(clr: LongWord; xPosStart: Single; yPosStart: Single; xPosEnd: Single; yPosEnd: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawLine');
    {$ENDIF}
  
    try 
      sgGraphics.DrawLine(clr, xPosStart, yPosStart, xPosEnd, yPosEnd);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawLine');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawLine');
    {$ENDIF}
  end;
  
  procedure sg_Graphics_DrawLineOnScreen(clr: LongWord; xPosStart: LongInt; yPosStart: LongInt; xPosEnd: LongInt; yPosEnd: LongInt); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawLineOnScreen');
    {$ENDIF}
  
    try 
      sgGraphics.DrawLineOnScreen(clr, xPosStart, yPosStart, xPosEnd, yPosEnd);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawLineOnScreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawLineOnScreen');
    {$ENDIF}
  end;
  
  procedure sg_Graphics_DrawLineOnto(dest: Bitmap; clr: LongWord; xPosStart: LongInt; yPosStart: LongInt; xPosEnd: LongInt; yPosEnd: LongInt); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawLineOnto');
    {$ENDIF}
  
    try 
      sgGraphics.DrawLine(dest, clr, xPosStart, yPosStart, xPosEnd, yPosEnd);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawLineOnto');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawLineOnto');
    {$ENDIF}
  end;
  
  procedure sg_Graphics_DrawLinePts(clr: LongWord; var startPt: Point2D; var endPt: Point2D); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawLinePts');
    {$ENDIF}
  
    try 
      sgGraphics.DrawLine(clr, startPt, endPt);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawLinePts');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawLinePts');
    {$ENDIF}
  end;
  
  procedure sg_Graphics_DrawLinePtsOnScreen(clr: LongWord; var startPt: Point2D; var endPt: Point2D); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawLinePtsOnScreen');
    {$ENDIF}
  
    try 
      sgGraphics.DrawLineOnScreen(clr, startPt, endPt);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawLinePtsOnScreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawLinePtsOnScreen');
    {$ENDIF}
  end;
  
  procedure sg_Graphics_DrawLinePtsOnto(dest: Bitmap; clr: LongWord; var startPt: Point2D; var endPt: Point2D); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawLinePtsOnto');
    {$ENDIF}
  
    try 
      sgGraphics.DrawLine(dest, clr, startPt, endPt);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawLinePtsOnto');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawLinePtsOnto');
    {$ENDIF}
  end;
  
  procedure sg_Graphics_DrawLineSegment(clr: LongWord; var line: LineSegment); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawLineSegment');
    {$ENDIF}
  
    try 
      sgGraphics.DrawLine(clr, line);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawLineSegment');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawLineSegment');
    {$ENDIF}
  end;
  
  procedure sg_Graphics_DrawLineSegmentOnScreen(clr: LongWord; var line: LineSegment); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawLineSegmentOnScreen');
    {$ENDIF}
  
    try 
      sgGraphics.DrawLineOnScreen(clr, line);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawLineSegmentOnScreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawLineSegmentOnScreen');
    {$ENDIF}
  end;
  
  procedure sg_Graphics_DrawLineSegmentOnto(dest: Bitmap; clr: LongWord; var line: LineSegment); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawLineSegmentOnto');
    {$ENDIF}
  
    try 
      sgGraphics.DrawLine(dest, clr, line);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawLineSegmentOnto');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawLineSegmentOnto');
    {$ENDIF}
  end;
  
  procedure sg_Graphics_DrawLineSegments(clr: LongWord; lines: LineSegmentPtr; lines_len: LongInt); cdecl; export;
    var
      lines_temp: LinesArray;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawLineSegments');
    {$ENDIF}
  
    try 
        LineCopyFromPtr(lines, lines_len, lines_temp);
      sgGraphics.DrawLines(clr, lines_temp);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawLineSegments');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawLineSegments');
    {$ENDIF}
  end;
  
  procedure sg_Graphics_DrawOrFillCircle(clr: LongWord; filled: Boolean; var c: Circle); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawOrFillCircle');
    {$ENDIF}
  
    try 
      sgGraphics.DrawCircle(clr, filled, c);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawOrFillCircle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawOrFillCircle');
    {$ENDIF}
  end;
  
  procedure sg_Graphics_DrawOrFillCircleAtPointOnScreen(clr: LongWord; filled: Boolean; var position: Point2D; radius: LongInt); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawOrFillCircleAtPointOnScreen');
    {$ENDIF}
  
    try 
      sgGraphics.DrawCircleOnScreen(clr, filled, position, radius);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawOrFillCircleAtPointOnScreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawOrFillCircleAtPointOnScreen');
    {$ENDIF}
  end;
  
  procedure sg_Graphics_DrawOrFillCircleOnScreen(clr: LongWord; filled: Boolean; var c: Circle); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawOrFillCircleOnScreen');
    {$ENDIF}
  
    try 
      sgGraphics.DrawCircleOnScreen(clr, filled, c);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawOrFillCircleOnScreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawOrFillCircleOnScreen');
    {$ENDIF}
  end;
  
  procedure sg_Graphics_DrawOrFillCircleOnto(dest: Bitmap; clr: LongWord; filled: Boolean; var c: Circle); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawOrFillCircleOnto');
    {$ENDIF}
  
    try 
      sgGraphics.DrawCircle(dest, clr, filled, c);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawOrFillCircleOnto');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawOrFillCircleOnto');
    {$ENDIF}
  end;
  
  procedure sg_Graphics_DrawOrFillEllipse(clr: LongWord; filled: Boolean; xPos: Single; yPos: Single; width: LongInt; height: LongInt); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawOrFillEllipse');
    {$ENDIF}
  
    try 
      sgGraphics.DrawEllipse(clr, filled, xPos, yPos, width, height);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawOrFillEllipse');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawOrFillEllipse');
    {$ENDIF}
  end;
  
  procedure sg_Graphics_DrawOrFillEllipseInRect(clr: LongWord; filled: Boolean; var source: Rectangle); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawOrFillEllipseInRect');
    {$ENDIF}
  
    try 
      sgGraphics.DrawEllipse(clr, filled, source);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawOrFillEllipseInRect');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawOrFillEllipseInRect');
    {$ENDIF}
  end;
  
  procedure sg_Graphics_DrawOrFillEllipseInRectOnScreen(clr: LongWord; filled: Boolean; var source: Rectangle); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawOrFillEllipseInRectOnScreen');
    {$ENDIF}
  
    try 
      sgGraphics.DrawEllipseOnScreen(clr, filled, source);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawOrFillEllipseInRectOnScreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawOrFillEllipseInRectOnScreen');
    {$ENDIF}
  end;
  
  procedure sg_Graphics_DrawOrFillEllipseInRectOnto(dest: Bitmap; clr: LongWord; filled: Boolean; var source: Rectangle); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawOrFillEllipseInRectOnto');
    {$ENDIF}
  
    try 
      sgGraphics.DrawEllipse(dest, clr, filled, source);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawOrFillEllipseInRectOnto');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawOrFillEllipseInRectOnto');
    {$ENDIF}
  end;
  
  procedure sg_Graphics_DrawOrFillEllipseOnScreen(clr: LongWord; filled: Boolean; xPos: LongInt; yPos: LongInt; width: LongInt; height: LongInt); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawOrFillEllipseOnScreen');
    {$ENDIF}
  
    try 
      sgGraphics.DrawEllipseOnScreen(clr, filled, xPos, yPos, width, height);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawOrFillEllipseOnScreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawOrFillEllipseOnScreen');
    {$ENDIF}
  end;
  
  procedure sg_Graphics_DrawOrFillEllipseOnto(dest: Bitmap; clr: LongWord; filled: Boolean; xPos: LongInt; yPos: LongInt; width: LongInt; height: LongInt); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawOrFillEllipseOnto');
    {$ENDIF}
  
    try 
      sgGraphics.DrawEllipse(dest, clr, filled, xPos, yPos, width, height);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawOrFillEllipseOnto');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawOrFillEllipseOnto');
    {$ENDIF}
  end;
  
  procedure sg_Graphics_DrawOrFillPtCircle(clr: LongWord; filled: Boolean; xc: Single; yc: Single; radius: LongInt); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawOrFillPtCircle');
    {$ENDIF}
  
    try 
      sgGraphics.DrawCircle(clr, filled, xc, yc, radius);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawOrFillPtCircle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawOrFillPtCircle');
    {$ENDIF}
  end;
  
  procedure sg_Graphics_DrawOrFillPtCircleAtPoint(clr: LongWord; filled: Boolean; var position: Point2D; radius: LongInt); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawOrFillPtCircleAtPoint');
    {$ENDIF}
  
    try 
      sgGraphics.DrawCircle(clr, filled, position, radius);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawOrFillPtCircleAtPoint');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawOrFillPtCircleAtPoint');
    {$ENDIF}
  end;
  
  procedure sg_Graphics_DrawOrFillPtCircleAtPointOnto(dest: Bitmap; clr: LongWord; filled: Boolean; var point: Point2D; radius: LongInt); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawOrFillPtCircleAtPointOnto');
    {$ENDIF}
  
    try 
      sgGraphics.DrawCircle(dest, clr, filled, point, radius);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawOrFillPtCircleAtPointOnto');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawOrFillPtCircleAtPointOnto');
    {$ENDIF}
  end;
  
  procedure sg_Graphics_DrawOrFillPtCircleOnScreen(clr: LongWord; filled: Boolean; xc: Single; yc: Single; radius: LongInt); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawOrFillPtCircleOnScreen');
    {$ENDIF}
  
    try 
      sgGraphics.DrawCircleOnScreen(clr, filled, xc, yc, radius);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawOrFillPtCircleOnScreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawOrFillPtCircleOnScreen');
    {$ENDIF}
  end;
  
  procedure sg_Graphics_DrawOrFillPtCircleOnto(dest: Bitmap; clr: LongWord; filled: Boolean; xc: Single; yc: Single; radius: LongInt); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawOrFillPtCircleOnto');
    {$ENDIF}
  
    try 
      sgGraphics.DrawCircle(dest, clr, filled, xc, yc, radius);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawOrFillPtCircleOnto');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawOrFillPtCircleOnto');
    {$ENDIF}
  end;
  
  procedure sg_Graphics_DrawOrFillRectangle(clr: LongWord; filled: Boolean; xPos: Single; yPos: Single; width: LongInt; height: LongInt); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawOrFillRectangle');
    {$ENDIF}
  
    try 
      sgGraphics.DrawRectangle(clr, filled, xPos, yPos, width, height);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawOrFillRectangle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawOrFillRectangle');
    {$ENDIF}
  end;
  
  procedure sg_Graphics_DrawOrFillRectangleOnScreen(clr: LongWord; filled: Boolean; xPos: LongInt; yPos: LongInt; width: LongInt; height: LongInt); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawOrFillRectangleOnScreen');
    {$ENDIF}
  
    try 
      sgGraphics.DrawRectangleOnScreen(clr, filled, xPos, yPos, width, height);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawOrFillRectangleOnScreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawOrFillRectangleOnScreen');
    {$ENDIF}
  end;
  
  procedure sg_Graphics_DrawOrFillRectangleOnto(dest: Bitmap; clr: LongWord; filled: Boolean; xPos: LongInt; yPos: LongInt; width: LongInt; height: LongInt); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawOrFillRectangleOnto');
    {$ENDIF}
  
    try 
      sgGraphics.DrawRectangle(dest, clr, filled, xPos, yPos, width, height);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawOrFillRectangleOnto');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawOrFillRectangleOnto');
    {$ENDIF}
  end;
  
  procedure sg_Graphics_DrawOrFillRectangleRect(clr: LongWord; filled: Boolean; var source: Rectangle); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawOrFillRectangleRect');
    {$ENDIF}
  
    try 
      sgGraphics.DrawRectangle(clr, filled, source);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawOrFillRectangleRect');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawOrFillRectangleRect');
    {$ENDIF}
  end;
  
  procedure sg_Graphics_DrawOrFillRectangleRectOnScreen(clr: LongWord; filled: Boolean; var source: Rectangle); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawOrFillRectangleRectOnScreen');
    {$ENDIF}
  
    try 
      sgGraphics.DrawRectangleOnScreen(clr, filled, source);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawOrFillRectangleRectOnScreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawOrFillRectangleRectOnScreen');
    {$ENDIF}
  end;
  
  procedure sg_Graphics_DrawOrFillRectangleRectOnto(dest: Bitmap; clr: LongWord; filled: Boolean; var source: Rectangle); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawOrFillRectangleRectOnto');
    {$ENDIF}
  
    try 
      sgGraphics.DrawRectangle(dest, clr, filled, source);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawOrFillRectangleRectOnto');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawOrFillRectangleRectOnto');
    {$ENDIF}
  end;
  
  procedure sg_Graphics_DrawOrFillShape(s: Shape; filled: Boolean); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawOrFillShape');
    {$ENDIF}
  
    try 
      sgGraphics.DrawShape(s, filled);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawOrFillShape');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawOrFillShape');
    {$ENDIF}
  end;
  
  procedure sg_Graphics_DrawOrFillShapeOnScreen(s: Shape; filled: Boolean); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawOrFillShapeOnScreen');
    {$ENDIF}
  
    try 
      sgGraphics.DrawShapeOnScreen(s, filled);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawOrFillShapeOnScreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawOrFillShapeOnScreen');
    {$ENDIF}
  end;
  
  procedure sg_Graphics_DrawOrFillShapeOnto(dest: Bitmap; s: Shape; filled: Boolean); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawOrFillShapeOnto');
    {$ENDIF}
  
    try 
      sgGraphics.DrawShape(dest, s, filled);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawOrFillShapeOnto');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawOrFillShapeOnto');
    {$ENDIF}
  end;
  
  procedure sg_Graphics_DrawOrFillTriangle(clr: LongWord; filled: Boolean; tri: Point2DPtr); cdecl; export;
    var
      tri_temp: Triangle;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawOrFillTriangle');
    {$ENDIF}
  
    try 
        TriCopyFromPtr(tri_temp, tri);
      sgGraphics.DrawTriangle(clr, filled, tri_temp);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawOrFillTriangle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawOrFillTriangle');
    {$ENDIF}
  end;
  
  procedure sg_Graphics_DrawOrFillTriangleOnScreen(clr: LongWord; filled: Boolean; tri: Point2DPtr); cdecl; export;
    var
      tri_temp: Triangle;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawOrFillTriangleOnScreen');
    {$ENDIF}
  
    try 
        TriCopyFromPtr(tri_temp, tri);
      sgGraphics.DrawTriangleOnScreen(clr, filled, tri_temp);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawOrFillTriangleOnScreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawOrFillTriangleOnScreen');
    {$ENDIF}
  end;
  
  procedure sg_Graphics_DrawOrFillTriangleOnto(dest: Bitmap; clr: LongWord; filled: Boolean; tri: Point2DPtr); cdecl; export;
    var
      tri_temp: Triangle;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawOrFillTriangleOnto');
    {$ENDIF}
  
    try 
        TriCopyFromPtr(tri_temp, tri);
      sgGraphics.DrawTriangle(dest, clr, filled, tri_temp);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawOrFillTriangleOnto');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawOrFillTriangleOnto');
    {$ENDIF}
  end;
  
  procedure sg_Graphics_DrawPixel(clr: LongWord; x: Single; y: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawPixel');
    {$ENDIF}
  
    try 
      sgGraphics.DrawPixel(clr, x, y);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawPixel');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawPixel');
    {$ENDIF}
  end;
  
  procedure sg_Graphics_DrawPixelAtPoint(clr: LongWord; var position: Point2D); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawPixelAtPoint');
    {$ENDIF}
  
    try 
      sgGraphics.DrawPixel(clr, position);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawPixelAtPoint');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawPixelAtPoint');
    {$ENDIF}
  end;
  
  procedure sg_Graphics_DrawPixelAtPointOnScreen(clr: LongWord; var position: Point2D); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawPixelAtPointOnScreen');
    {$ENDIF}
  
    try 
      sgGraphics.DrawPixelOnScreen(clr, position);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawPixelAtPointOnScreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawPixelAtPointOnScreen');
    {$ENDIF}
  end;
  
  procedure sg_Graphics_DrawPixelAtPointOnto(dest: Bitmap; clr: LongWord; var position: Point2D); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawPixelAtPointOnto');
    {$ENDIF}
  
    try 
      sgGraphics.DrawPixel(dest, clr, position);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawPixelAtPointOnto');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawPixelAtPointOnto');
    {$ENDIF}
  end;
  
  procedure sg_Graphics_DrawPixelOnScreen(clr: LongWord; x: LongInt; y: LongInt); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawPixelOnScreen');
    {$ENDIF}
  
    try 
      sgGraphics.DrawPixelOnScreen(clr, x, y);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawPixelOnScreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawPixelOnScreen');
    {$ENDIF}
  end;
  
  procedure sg_Graphics_DrawPixelOnto(dest: Bitmap; clr: LongWord; x: LongInt; y: LongInt); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawPixelOnto');
    {$ENDIF}
  
    try 
      sgGraphics.DrawPixel(dest, clr, x, y);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawPixelOnto');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawPixelOnto');
    {$ENDIF}
  end;
  
  procedure sg_Graphics_DrawShape(s: Shape); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawShape');
    {$ENDIF}
  
    try 
      sgGraphics.DrawShape(s);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawShape');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawShape');
    {$ENDIF}
  end;
  
  procedure sg_Graphics_DrawShapeAsCircle(dest: Bitmap; s: Shape; filled: Boolean; var offset: Point2D); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawShapeAsCircle');
    {$ENDIF}
  
    try 
      sgGraphics.DrawShapeAsCircle(dest, s, filled, offset);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawShapeAsCircle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawShapeAsCircle');
    {$ENDIF}
  end;
  
  procedure sg_Graphics_DrawShapeAsLine(dest: Bitmap; s: Shape; filled: Boolean; var offset: Point2D); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawShapeAsLine');
    {$ENDIF}
  
    try 
      sgGraphics.DrawShapeAsLine(dest, s, filled, offset);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawShapeAsLine');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawShapeAsLine');
    {$ENDIF}
  end;
  
  procedure sg_Graphics_DrawShapeAsLineList(dest: Bitmap; s: Shape; filled: Boolean; var offset: Point2D); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawShapeAsLineList');
    {$ENDIF}
  
    try 
      sgGraphics.DrawShapeAsLineList(dest, s, filled, offset);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawShapeAsLineList');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawShapeAsLineList');
    {$ENDIF}
  end;
  
  procedure sg_Graphics_DrawShapeAsLineStrip(dest: Bitmap; s: Shape; filled: Boolean; var offset: Point2D); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawShapeAsLineStrip');
    {$ENDIF}
  
    try 
      sgGraphics.DrawShapeAsLineStrip(dest, s, filled, offset);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawShapeAsLineStrip');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawShapeAsLineStrip');
    {$ENDIF}
  end;
  
  procedure sg_Graphics_DrawShapeAsPoint(dest: Bitmap; s: Shape; filled: Boolean; var offset: Point2D); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawShapeAsPoint');
    {$ENDIF}
  
    try 
      sgGraphics.DrawShapeAsPoint(dest, s, filled, offset);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawShapeAsPoint');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawShapeAsPoint');
    {$ENDIF}
  end;
  
  procedure sg_Graphics_DrawShapeAsTriangle(dest: Bitmap; s: Shape; filled: Boolean; var offset: Point2D); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawShapeAsTriangle');
    {$ENDIF}
  
    try 
      sgGraphics.DrawShapeAsTriangle(dest, s, filled, offset);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawShapeAsTriangle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawShapeAsTriangle');
    {$ENDIF}
  end;
  
  procedure sg_Graphics_DrawShapeAsTriangleFan(dest: Bitmap; s: Shape; filled: Boolean; var offset: Point2D); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawShapeAsTriangleFan');
    {$ENDIF}
  
    try 
      sgGraphics.DrawShapeAsTriangleFan(dest, s, filled, offset);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawShapeAsTriangleFan');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawShapeAsTriangleFan');
    {$ENDIF}
  end;
  
  procedure sg_Graphics_DrawShapeAsTriangleList(dest: Bitmap; s: Shape; filled: Boolean; var offset: Point2D); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawShapeAsTriangleList');
    {$ENDIF}
  
    try 
      sgGraphics.DrawShapeAsTriangleList(dest, s, filled, offset);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawShapeAsTriangleList');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawShapeAsTriangleList');
    {$ENDIF}
  end;
  
  procedure sg_Graphics_DrawShapeAsTriangleStrip(dest: Bitmap; s: Shape; filled: Boolean; var offset: Point2D); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawShapeAsTriangleStrip');
    {$ENDIF}
  
    try 
      sgGraphics.DrawShapeAsTriangleStrip(dest, s, filled, offset);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawShapeAsTriangleStrip');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawShapeAsTriangleStrip');
    {$ENDIF}
  end;
  
  procedure sg_Graphics_DrawShapeOnScreen(s: Shape); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawShapeOnScreen');
    {$ENDIF}
  
    try 
      sgGraphics.DrawShapeOnScreen(s);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawShapeOnScreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawShapeOnScreen');
    {$ENDIF}
  end;
  
  procedure sg_Graphics_DrawShapeOnto(dest: Bitmap; s: Shape); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawShapeOnto');
    {$ENDIF}
  
    try 
      sgGraphics.DrawShape(dest, s);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawShapeOnto');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawShapeOnto');
    {$ENDIF}
  end;
  
  procedure sg_Graphics_DrawTriangleFromPoints(clr: LongWord; x1: Single; y1: Single; x2: Single; y2: Single; x3: Single; y3: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawTriangleFromPoints');
    {$ENDIF}
  
    try 
      sgGraphics.DrawTriangle(clr, x1, y1, x2, y2, x3, y3);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawTriangleFromPoints');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawTriangleFromPoints');
    {$ENDIF}
  end;
  
  procedure sg_Graphics_DrawTriangleFromPointsOnScreen(clr: LongWord; x1: Single; y1: Single; x2: Single; y2: Single; x3: Single; y3: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawTriangleFromPointsOnScreen');
    {$ENDIF}
  
    try 
      sgGraphics.DrawTriangleOnScreen(clr, x1, y1, x2, y2, x3, y3);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawTriangleFromPointsOnScreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawTriangleFromPointsOnScreen');
    {$ENDIF}
  end;
  
  procedure sg_Graphics_DrawTriangleFromPointsOnto(dest: Bitmap; clr: LongWord; x1: Single; y1: Single; x2: Single; y2: Single; x3: Single; y3: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawTriangleFromPointsOnto');
    {$ENDIF}
  
    try 
      sgGraphics.DrawTriangle(dest, clr, x1, y1, x2, y2, x3, y3);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawTriangleFromPointsOnto');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawTriangleFromPointsOnto');
    {$ENDIF}
  end;
  
  procedure sg_Graphics_DrawVerticalLine(clr: LongWord; x: Single; y1: Single; y2: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawVerticalLine');
    {$ENDIF}
  
    try 
      sgGraphics.DrawVerticalLine(clr, x, y1, y2);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawVerticalLine');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawVerticalLine');
    {$ENDIF}
  end;
  
  procedure sg_Graphics_DrawVerticalLineOnScreen(clr: LongWord; x: LongInt; y1: LongInt; y2: LongInt); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawVerticalLineOnScreen');
    {$ENDIF}
  
    try 
      sgGraphics.DrawVerticalLineOnScreen(clr, x, y1, y2);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawVerticalLineOnScreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawVerticalLineOnScreen');
    {$ENDIF}
  end;
  
  procedure sg_Graphics_DrawVerticalLineOnto(dest: Bitmap; clr: LongWord; x: LongInt; y1: LongInt; y2: LongInt); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_DrawVerticalLineOnto');
    {$ENDIF}
  
    try 
      sgGraphics.DrawVerticalLine(dest, clr, x, y1, y2);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_DrawVerticalLineOnto');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_DrawVerticalLineOnto');
    {$ENDIF}
  end;
  
  procedure sg_Graphics_FillShape(s: Shape); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_FillShape');
    {$ENDIF}
  
    try 
      sgGraphics.FillShape(s);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_FillShape');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_FillShape');
    {$ENDIF}
  end;
  
  procedure sg_Graphics_FillShapeOnScreen(s: Shape); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_FillShapeOnScreen');
    {$ENDIF}
  
    try 
      sgGraphics.FillShapeOnScreen(s);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_FillShapeOnScreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_FillShapeOnScreen');
    {$ENDIF}
  end;
  
  procedure sg_Graphics_FillShapeOnto(dest: Bitmap; s: Shape); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_FillShapeOnto');
    {$ENDIF}
  
    try 
      sgGraphics.FillShape(dest, s);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_FillShapeOnto');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_FillShapeOnto');
    {$ENDIF}
  end;
  
  procedure sg_Graphics_FillTriangleFromPoints(clr: LongWord; x1: Single; y1: Single; x2: Single; y2: Single; x3: Single; y3: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_FillTriangleFromPoints');
    {$ENDIF}
  
    try 
      sgGraphics.FillTriangle(clr, x1, y1, x2, y2, x3, y3);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_FillTriangleFromPoints');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_FillTriangleFromPoints');
    {$ENDIF}
  end;
  
  procedure sg_Graphics_FillTriangleFromPointsOnScreen(clr: LongWord; x1: Single; y1: Single; x2: Single; y2: Single; x3: Single; y3: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_FillTriangleFromPointsOnScreen');
    {$ENDIF}
  
    try 
      sgGraphics.FillTriangleOnScreen(clr, x1, y1, x2, y2, x3, y3);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_FillTriangleFromPointsOnScreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_FillTriangleFromPointsOnScreen');
    {$ENDIF}
  end;
  
  procedure sg_Graphics_FillTriangleFromPointsOnto(dest: Bitmap; clr: LongWord; x1: Single; y1: Single; x2: Single; y2: Single; x3: Single; y3: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_FillTriangleFromPointsOnto');
    {$ENDIF}
  
    try 
      sgGraphics.FillTriangle(dest, clr, x1, y1, x2, y2, x3, y3);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_FillTriangleFromPointsOnto');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_FillTriangleFromPointsOnto');
    {$ENDIF}
  end;
  
  function sg_Graphics_GetPixel(bmp: Bitmap; x: LongInt; y: LongInt): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_GetPixel');
    {$ENDIF}
    
    try
      result := sgGraphics.GetPixel(bmp, x, y);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_GetPixel');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_GetPixel');
    {$ENDIF}
  end;
  
  function sg_Graphics_GetPixelFromScreen(x: LongInt; y: LongInt): Color; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_GetPixelFromScreen');
    {$ENDIF}
    
    try
      result := sgGraphics.GetPixelFromScreen(x, y);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_GetPixelFromScreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_GetPixelFromScreen');
    {$ENDIF}
  end;
  
  procedure sg_Graphics_PopClipBmp(bmp: Bitmap); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_PopClipBmp');
    {$ENDIF}
  
    try 
      sgGraphics.PopClip(bmp);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_PopClipBmp');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_PopClipBmp');
    {$ENDIF}
  end;
  
  procedure sg_Graphics_PopClipScreen(); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_PopClipScreen');
    {$ENDIF}
  
    try 
      sgGraphics.PopClip();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_PopClipScreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_PopClipScreen');
    {$ENDIF}
  end;
  
  procedure sg_Graphics_PushClipRect(var r: Rectangle); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_PushClipRect');
    {$ENDIF}
  
    try 
      sgGraphics.PushClip(r);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_PushClipRect');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_PushClipRect');
    {$ENDIF}
  end;
  
  procedure sg_Graphics_PushClipRectForBitmap(bmp: Bitmap; var r: Rectangle); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_PushClipRectForBitmap');
    {$ENDIF}
  
    try 
      sgGraphics.PushClip(bmp, r);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_PushClipRectForBitmap');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_PushClipRectForBitmap');
    {$ENDIF}
  end;
  
  procedure sg_Graphics_PushClipXY(x: LongInt; y: LongInt; w: LongInt; h: LongInt); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_PushClipXY');
    {$ENDIF}
  
    try 
      sgGraphics.PushClip(x, y, w, h);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_PushClipXY');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_PushClipXY');
    {$ENDIF}
  end;
  
  procedure sg_Graphics_PutPixel(bmp: Bitmap; value: LongWord; x: LongInt; y: LongInt); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_PutPixel');
    {$ENDIF}
  
    try 
      sgGraphics.PutPixel(bmp, value, x, y);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_PutPixel');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_PutPixel');
    {$ENDIF}
  end;
  
  procedure sg_Graphics_ResetClip(); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ResetClip');
    {$ENDIF}
  
    try 
      sgGraphics.ResetClip();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ResetClip');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ResetClip');
    {$ENDIF}
  end;
  
  procedure sg_Graphics_ResetClipForBitmap(bmp: Bitmap); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_ResetClipForBitmap');
    {$ENDIF}
  
    try 
      sgGraphics.ResetClip(bmp);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_ResetClipForBitmap');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_ResetClipForBitmap');
    {$ENDIF}
  end;
  
  procedure sg_Graphics_SetBmpClip(bmp: Bitmap; var r: Rectangle); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_SetBmpClip');
    {$ENDIF}
  
    try 
      sgGraphics.SetClip(bmp, r);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_SetBmpClip');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_SetBmpClip');
    {$ENDIF}
  end;
  
  procedure sg_Graphics_SetBmpClipXY(bmp: Bitmap; x: LongInt; y: LongInt; w: LongInt; h: LongInt); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_SetBmpClipXY');
    {$ENDIF}
  
    try 
      sgGraphics.SetClip(bmp, x, y, w, h);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_SetBmpClipXY');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_SetBmpClipXY');
    {$ENDIF}
  end;
  
  procedure sg_Graphics_SetClip(var r: Rectangle); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_SetClip');
    {$ENDIF}
  
    try 
      sgGraphics.SetClip(r);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_SetClip');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_SetClip');
    {$ENDIF}
  end;
  
  procedure sg_Graphics_SetClipXY(x: LongInt; y: LongInt; w: LongInt; h: LongInt); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Graphics_SetClipXY');
    {$ENDIF}
  
    try 
      sgGraphics.SetClip(x, y, w, h);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Graphics_SetClipXY');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Graphics_SetClipXY');
    {$ENDIF}
  end;
  
  function sg_Images_BitmapCellCircle(bmp: Bitmap; var pt: Point2D): Circle; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_BitmapCellCircle');
    {$ENDIF}
    
    try
      result := sgImages.BitmapCellCircle(bmp, pt);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_BitmapCellCircle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_BitmapCellCircle');
    {$ENDIF}
  end;
  
  function sg_Images_BitmapCellCircleXY(bmp: Bitmap; x: LongInt; y: LongInt): Circle; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_BitmapCellCircleXY');
    {$ENDIF}
    
    try
      result := sgImages.BitmapCellCircle(bmp, x, y);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_BitmapCellCircleXY');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_BitmapCellCircleXY');
    {$ENDIF}
  end;
  
  function sg_Images_BitmapCellColumns(bmp: Bitmap): LongInt; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_BitmapCellColumns');
    {$ENDIF}
    
    try
      result := sgImages.BitmapCellColumns(bmp);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_BitmapCellColumns');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_BitmapCellColumns');
    {$ENDIF}
  end;
  
  function sg_Images_BitmapCellCount(bmp: Bitmap): LongInt; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_BitmapCellCount');
    {$ENDIF}
    
    try
      result := sgImages.BitmapCellCount(bmp);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_BitmapCellCount');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_BitmapCellCount');
    {$ENDIF}
  end;
  
  function sg_Images_BitmapCellHeight(bmp: Bitmap): LongInt; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_BitmapCellHeight');
    {$ENDIF}
    
    try
      result := sgImages.BitmapCellHeight(bmp);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_BitmapCellHeight');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_BitmapCellHeight');
    {$ENDIF}
  end;
  
  function sg_Images_BitmapCellOf(bmp: Bitmap; cell: LongInt): BitmapCell; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_BitmapCellOf');
    {$ENDIF}
    
    try
      result := sgImages.BitmapCellOf(bmp, cell);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_BitmapCellOf');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_BitmapCellOf');
    {$ENDIF}
  end;
  
  function sg_Images_BitmapCellRectangle(var pt: Point2D; bmp: Bitmap): Rectangle; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_BitmapCellRectangle');
    {$ENDIF}
    
    try
      result := sgImages.BitmapCellRectangle(pt, bmp);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_BitmapCellRectangle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_BitmapCellRectangle');
    {$ENDIF}
  end;
  
  function sg_Images_BitmapCellRectangleAtOrigin(bmp: Bitmap): Rectangle; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_BitmapCellRectangleAtOrigin');
    {$ENDIF}
    
    try
      result := sgImages.BitmapCellRectangle(bmp);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_BitmapCellRectangleAtOrigin');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_BitmapCellRectangleAtOrigin');
    {$ENDIF}
  end;
  
  function sg_Images_BitmapCellRectangleXY(x: Single; y: Single; bmp: Bitmap): Rectangle; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_BitmapCellRectangleXY');
    {$ENDIF}
    
    try
      result := sgImages.BitmapCellRectangle(x, y, bmp);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_BitmapCellRectangleXY');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_BitmapCellRectangleXY');
    {$ENDIF}
  end;
  
  function sg_Images_BitmapCellRows(bmp: Bitmap): LongInt; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_BitmapCellRows');
    {$ENDIF}
    
    try
      result := sgImages.BitmapCellRows(bmp);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_BitmapCellRows');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_BitmapCellRows');
    {$ENDIF}
  end;
  
  function sg_Images_BitmapCellWidth(bmp: Bitmap): LongInt; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_BitmapCellWidth');
    {$ENDIF}
    
    try
      result := sgImages.BitmapCellWidth(bmp);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_BitmapCellWidth');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_BitmapCellWidth');
    {$ENDIF}
  end;
  
  function sg_Images_BitmapCircle(bmp: Bitmap; var pt: Point2D): Circle; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_BitmapCircle');
    {$ENDIF}
    
    try
      result := sgImages.BitmapCircle(bmp, pt);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_BitmapCircle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_BitmapCircle');
    {$ENDIF}
  end;
  
  function sg_Images_BitmapCircleXY(bmp: Bitmap; x: LongInt; y: LongInt): Circle; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_BitmapCircleXY');
    {$ENDIF}
    
    try
      result := sgImages.BitmapCircle(bmp, x, y);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_BitmapCircleXY');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_BitmapCircleXY');
    {$ENDIF}
  end;
  
  function sg_Images_BitmapHeight(bmp: Bitmap): LongInt; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_BitmapHeight');
    {$ENDIF}
    
    try
      result := sgImages.BitmapHeight(bmp);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_BitmapHeight');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_BitmapHeight');
    {$ENDIF}
  end;
  
  function sg_Images_BitmapHeightForCell(var bmp: BitmapCell): LongInt; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_BitmapHeightForCell');
    {$ENDIF}
    
    try
      result := sgImages.BitmapHeight(bmp);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_BitmapHeightForCell');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_BitmapHeightForCell');
    {$ENDIF}
  end;
  
  procedure sg_Images_BitmapName(bmp: Bitmap; result: PChar); cdecl; export;
    var
      result_temp: String;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_BitmapName');
    {$ENDIF}
    
    try
      result_temp := sgImages.BitmapName(bmp);
        StrCopy(result, PChar(result_temp));
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_BitmapName');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_BitmapName');
    {$ENDIF}
  end;
  
  function sg_Images_BitmapNamed(name: PChar): Bitmap; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_BitmapNamed');
    {$ENDIF}
    
    try
      result := sgImages.BitmapNamed(name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_BitmapNamed');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_BitmapNamed');
    {$ENDIF}
  end;
  
  function sg_Images_BitmapRectAtOrigin(bmp: Bitmap): Rectangle; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_BitmapRectAtOrigin');
    {$ENDIF}
    
    try
      result := sgImages.BitmapRectangle(bmp);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_BitmapRectAtOrigin');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_BitmapRectAtOrigin');
    {$ENDIF}
  end;
  
  function sg_Images_BitmapRectXY(x: Single; y: Single; bmp: Bitmap): Rectangle; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_BitmapRectXY');
    {$ENDIF}
    
    try
      result := sgImages.BitmapRectangle(x, y, bmp);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_BitmapRectXY');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_BitmapRectXY');
    {$ENDIF}
  end;
  
  function sg_Images_BitmapRectangleOfCell(src: Bitmap; cell: LongInt): Rectangle; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_BitmapRectangleOfCell');
    {$ENDIF}
    
    try
      result := sgImages.BitmapRectangleOfCell(src, cell);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_BitmapRectangleOfCell');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_BitmapRectangleOfCell');
    {$ENDIF}
  end;
  
  procedure sg_Images_BitmapSetCellDetails(bmp: Bitmap; width: LongInt; height: LongInt; columns: LongInt; rows: LongInt; count: LongInt); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_BitmapSetCellDetails');
    {$ENDIF}
  
    try 
      sgImages.BitmapSetCellDetails(bmp, width, height, columns, rows, count);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_BitmapSetCellDetails');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_BitmapSetCellDetails');
    {$ENDIF}
  end;
  
  function sg_Images_BitmapWidth(bmp: Bitmap): LongInt; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_BitmapWidth');
    {$ENDIF}
    
    try
      result := sgImages.BitmapWidth(bmp);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_BitmapWidth');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_BitmapWidth');
    {$ENDIF}
  end;
  
  function sg_Images_BitmapWidthForCell(var bmp: BitmapCell): LongInt; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_BitmapWidthForCell');
    {$ENDIF}
    
    try
      result := sgImages.BitmapWidth(bmp);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_BitmapWidthForCell');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_BitmapWidthForCell');
    {$ENDIF}
  end;
  
  procedure sg_Images_BitmapfileName(bmp: Bitmap; result: PChar); cdecl; export;
    var
      result_temp: String;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_BitmapfileName');
    {$ENDIF}
    
    try
      result_temp := sgImages.BitmapfileName(bmp);
        StrCopy(result, PChar(result_temp));
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_BitmapfileName');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_BitmapfileName');
    {$ENDIF}
  end;
  
  function sg_Images_BitmapsInterchangable(bmp1: Bitmap; bmp2: Bitmap): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_BitmapsInterchangable');
    {$ENDIF}
    
    try
      result := sgImages.BitmapsInterchangable(bmp1, bmp2);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_BitmapsInterchangable');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_BitmapsInterchangable');
    {$ENDIF}
  end;
  
  procedure sg_Images_ClearSurface(dest: Bitmap; toColor: LongWord); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_ClearSurface');
    {$ENDIF}
  
    try 
      sgImages.ClearSurface(dest, toColor);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_ClearSurface');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_ClearSurface');
    {$ENDIF}
  end;
  
  procedure sg_Images_ClearSurfaceToBlack(dest: Bitmap); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_ClearSurfaceToBlack');
    {$ENDIF}
  
    try 
      sgImages.ClearSurface(dest);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_ClearSurfaceToBlack');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_ClearSurfaceToBlack');
    {$ENDIF}
  end;
  
  function sg_Images_CreateBitmap(width: LongInt; height: LongInt): Bitmap; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_CreateBitmap');
    {$ENDIF}
    
    try
      result := sgImages.CreateBitmap(width, height);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_CreateBitmap');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_CreateBitmap');
    {$ENDIF}
  end;
  
  procedure sg_Images_DrawBitmap(src: Bitmap; x: Single; y: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_DrawBitmap');
    {$ENDIF}
  
    try 
      sgImages.DrawBitmap(src, x, y);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_DrawBitmap');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_DrawBitmap');
    {$ENDIF}
  end;
  
  procedure sg_Images_DrawBitmapAtPoint(src: Bitmap; var position: Point2D); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_DrawBitmapAtPoint');
    {$ENDIF}
  
    try 
      sgImages.DrawBitmap(src, position);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_DrawBitmapAtPoint');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_DrawBitmapAtPoint');
    {$ENDIF}
  end;
  
  procedure sg_Images_DrawBitmapAtPointOnScreen(src: Bitmap; var position: Point2D); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_DrawBitmapAtPointOnScreen');
    {$ENDIF}
  
    try 
      sgImages.DrawBitmapOnScreen(src, position);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_DrawBitmapAtPointOnScreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_DrawBitmapAtPointOnScreen');
    {$ENDIF}
  end;
  
  procedure sg_Images_DrawBitmapAtPointOnto(dest: Bitmap; src: Bitmap; var position: Point2D); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_DrawBitmapAtPointOnto');
    {$ENDIF}
  
    try 
      sgImages.DrawBitmap(dest, src, position);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_DrawBitmapAtPointOnto');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_DrawBitmapAtPointOnto');
    {$ENDIF}
  end;
  
  procedure sg_Images_DrawBitmapCell(var src: BitmapCell; x: Single; y: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_DrawBitmapCell');
    {$ENDIF}
  
    try 
      sgImages.DrawBitmapCell(src, x, y);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_DrawBitmapCell');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_DrawBitmapCell');
    {$ENDIF}
  end;
  
  procedure sg_Images_DrawBitmapCellAtPoint(var src: BitmapCell; var position: Point2D); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_DrawBitmapCellAtPoint');
    {$ENDIF}
  
    try 
      sgImages.DrawBitmapCell(src, position);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_DrawBitmapCellAtPoint');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_DrawBitmapCellAtPoint');
    {$ENDIF}
  end;
  
  procedure sg_Images_DrawBitmapCellAtPointOnScreen(var src: BitmapCell; var position: Point2D); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_DrawBitmapCellAtPointOnScreen');
    {$ENDIF}
  
    try 
      sgImages.DrawBitmapCellOnScreen(src, position);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_DrawBitmapCellAtPointOnScreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_DrawBitmapCellAtPointOnScreen');
    {$ENDIF}
  end;
  
  procedure sg_Images_DrawBitmapCellAtPointOnto(dest: Bitmap; var src: BitmapCell; var position: Point2D); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_DrawBitmapCellAtPointOnto');
    {$ENDIF}
  
    try 
      sgImages.DrawBitmapCell(dest, src, position);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_DrawBitmapCellAtPointOnto');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_DrawBitmapCellAtPointOnto');
    {$ENDIF}
  end;
  
  procedure sg_Images_DrawBitmapCellOnScreen(var src: BitmapCell; x: LongInt; y: LongInt); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_DrawBitmapCellOnScreen');
    {$ENDIF}
  
    try 
      sgImages.DrawBitmapCellOnScreen(src, x, y);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_DrawBitmapCellOnScreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_DrawBitmapCellOnScreen');
    {$ENDIF}
  end;
  
  procedure sg_Images_DrawBitmapCellOnto(dest: Bitmap; var src: BitmapCell; x: LongInt; y: LongInt); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_DrawBitmapCellOnto');
    {$ENDIF}
  
    try 
      sgImages.DrawBitmapCell(dest, src, x, y);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_DrawBitmapCellOnto');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_DrawBitmapCellOnto');
    {$ENDIF}
  end;
  
  procedure sg_Images_DrawBitmapOnScreen(src: Bitmap; x: LongInt; y: LongInt); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_DrawBitmapOnScreen');
    {$ENDIF}
  
    try 
      sgImages.DrawBitmapOnScreen(src, x, y);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_DrawBitmapOnScreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_DrawBitmapOnScreen');
    {$ENDIF}
  end;
  
  procedure sg_Images_DrawBitmapOnto(dest: Bitmap; src: Bitmap; x: LongInt; y: LongInt); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_DrawBitmapOnto');
    {$ENDIF}
  
    try 
      sgImages.DrawBitmap(dest, src, x, y);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_DrawBitmapOnto');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_DrawBitmapOnto');
    {$ENDIF}
  end;
  
  procedure sg_Images_DrawBitmapPart(src: Bitmap; srcX: LongInt; srcY: LongInt; srcW: LongInt; srcH: LongInt; x: Single; y: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_DrawBitmapPart');
    {$ENDIF}
  
    try 
      sgImages.DrawBitmapPart(src, srcX, srcY, srcW, srcH, x, y);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_DrawBitmapPart');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_DrawBitmapPart');
    {$ENDIF}
  end;
  
  procedure sg_Images_DrawBitmapPartFromRect(src: Bitmap; var source: Rectangle; x: Single; y: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_DrawBitmapPartFromRect');
    {$ENDIF}
  
    try 
      sgImages.DrawBitmapPart(src, source, x, y);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_DrawBitmapPartFromRect');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_DrawBitmapPartFromRect');
    {$ENDIF}
  end;
  
  procedure sg_Images_DrawBitmapPartFromRectAtPoint(src: Bitmap; var source: Rectangle; var position: Point2D); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_DrawBitmapPartFromRectAtPoint');
    {$ENDIF}
  
    try 
      sgImages.DrawBitmapPart(src, source, position);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_DrawBitmapPartFromRectAtPoint');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_DrawBitmapPartFromRectAtPoint');
    {$ENDIF}
  end;
  
  procedure sg_Images_DrawBitmapPartFromRectAtPointOnScreen(src: Bitmap; var source: Rectangle; var position: Point2D); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_DrawBitmapPartFromRectAtPointOnScreen');
    {$ENDIF}
  
    try 
      sgImages.DrawBitmapPartOnScreen(src, source, position);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_DrawBitmapPartFromRectAtPointOnScreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_DrawBitmapPartFromRectAtPointOnScreen');
    {$ENDIF}
  end;
  
  procedure sg_Images_DrawBitmapPartFromRectAtPointOnto(dest: Bitmap; src: Bitmap; var source: Rectangle; var position: Point2D); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_DrawBitmapPartFromRectAtPointOnto');
    {$ENDIF}
  
    try 
      sgImages.DrawBitmapPart(dest, src, source, position);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_DrawBitmapPartFromRectAtPointOnto');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_DrawBitmapPartFromRectAtPointOnto');
    {$ENDIF}
  end;
  
  procedure sg_Images_DrawBitmapPartFromRectOnScreen(src: Bitmap; var source: Rectangle; x: LongInt; y: LongInt); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_DrawBitmapPartFromRectOnScreen');
    {$ENDIF}
  
    try 
      sgImages.DrawBitmapPartOnScreen(src, source, x, y);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_DrawBitmapPartFromRectOnScreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_DrawBitmapPartFromRectOnScreen');
    {$ENDIF}
  end;
  
  procedure sg_Images_DrawBitmapPartFromRectOnto(dest: Bitmap; src: Bitmap; var source: Rectangle; x: LongInt; y: LongInt); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_DrawBitmapPartFromRectOnto');
    {$ENDIF}
  
    try 
      sgImages.DrawBitmapPart(dest, src, source, x, y);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_DrawBitmapPartFromRectOnto');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_DrawBitmapPartFromRectOnto');
    {$ENDIF}
  end;
  
  procedure sg_Images_DrawBitmapPartOnScreen(src: Bitmap; srcX: LongInt; srcY: LongInt; srcW: LongInt; srcH: LongInt; x: LongInt; y: LongInt); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_DrawBitmapPartOnScreen');
    {$ENDIF}
  
    try 
      sgImages.DrawBitmapPartOnScreen(src, srcX, srcY, srcW, srcH, x, y);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_DrawBitmapPartOnScreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_DrawBitmapPartOnScreen');
    {$ENDIF}
  end;
  
  procedure sg_Images_DrawBitmapPartOnto(dest: Bitmap; src: Bitmap; srcX: LongInt; srcY: LongInt; srcW: LongInt; srcH: LongInt; x: LongInt; y: LongInt); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_DrawBitmapPartOnto');
    {$ENDIF}
  
    try 
      sgImages.DrawBitmapPart(dest, src, srcX, srcY, srcW, srcH, x, y);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_DrawBitmapPartOnto');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_DrawBitmapPartOnto');
    {$ENDIF}
  end;
  
  procedure sg_Images_DrawCell(src: Bitmap; cell: LongInt; var position: Point2D); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_DrawCell');
    {$ENDIF}
  
    try 
      sgImages.DrawCell(src, cell, position);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_DrawCell');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_DrawCell');
    {$ENDIF}
  end;
  
  procedure sg_Images_DrawCellOnScreen(src: Bitmap; cell: LongInt; var position: Point2D); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_DrawCellOnScreen');
    {$ENDIF}
  
    try 
      sgImages.DrawCellOnScreen(src, cell, position);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_DrawCellOnScreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_DrawCellOnScreen');
    {$ENDIF}
  end;
  
  procedure sg_Images_DrawCellOnScreenXY(src: Bitmap; cell: LongInt; x: Single; y: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_DrawCellOnScreenXY');
    {$ENDIF}
  
    try 
      sgImages.DrawCellOnScreen(src, cell, x, y);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_DrawCellOnScreenXY');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_DrawCellOnScreenXY');
    {$ENDIF}
  end;
  
  procedure sg_Images_DrawCellOnto(dest: Bitmap; src: Bitmap; cell: LongInt; var position: Point2D); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_DrawCellOnto');
    {$ENDIF}
  
    try 
      sgImages.DrawCell(dest, src, cell, position);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_DrawCellOnto');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_DrawCellOnto');
    {$ENDIF}
  end;
  
  procedure sg_Images_DrawCellOntoXY(dest: Bitmap; src: Bitmap; cell: LongInt; x: Single; y: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_DrawCellOntoXY');
    {$ENDIF}
  
    try 
      sgImages.DrawCell(dest, src, cell, x, y);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_DrawCellOntoXY');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_DrawCellOntoXY');
    {$ENDIF}
  end;
  
  procedure sg_Images_DrawCellXY(src: Bitmap; cell: LongInt; x: Single; y: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_DrawCellXY');
    {$ENDIF}
  
    try 
      sgImages.DrawCell(src, cell, x, y);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_DrawCellXY');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_DrawCellXY');
    {$ENDIF}
  end;
  
  procedure sg_Images_FreeBitmap(var bitmapToFree: Bitmap); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_FreeBitmap');
    {$ENDIF}
  
    try 
      sgImages.FreeBitmap(bitmapToFree);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_FreeBitmap');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_FreeBitmap');
    {$ENDIF}
  end;
  
  function sg_Images_HasBitmap(name: PChar): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_HasBitmap');
    {$ENDIF}
    
    try
      result := sgImages.HasBitmap(name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_HasBitmap');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_HasBitmap');
    {$ENDIF}
  end;
  
  function sg_Images_LoadBitmap(filename: PChar): Bitmap; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_LoadBitmap');
    {$ENDIF}
    
    try
      result := sgImages.LoadBitmap(filename);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_LoadBitmap');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_LoadBitmap');
    {$ENDIF}
  end;
  
  function sg_Images_LoadBitmapWithTransparentColor(filename: PChar; transparent: Boolean; transparentColor: LongWord): Bitmap; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_LoadBitmapWithTransparentColor');
    {$ENDIF}
    
    try
      result := sgImages.LoadBitmap(filename, transparent, transparentColor);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_LoadBitmapWithTransparentColor');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_LoadBitmapWithTransparentColor');
    {$ENDIF}
  end;
  
  procedure sg_Images_MakeOpaque(bmp: Bitmap); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_MakeOpaque');
    {$ENDIF}
  
    try 
      sgImages.MakeOpaque(bmp);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_MakeOpaque');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_MakeOpaque');
    {$ENDIF}
  end;
  
  procedure sg_Images_MakeTransparent(bmp: Bitmap); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_MakeTransparent');
    {$ENDIF}
  
    try 
      sgImages.MakeTransparent(bmp);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_MakeTransparent');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_MakeTransparent');
    {$ENDIF}
  end;
  
  function sg_Images_MapBitmap(name: PChar; filename: PChar): Bitmap; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_MapBitmap');
    {$ENDIF}
    
    try
      result := sgImages.MapBitmap(name, filename);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_MapBitmap');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_MapBitmap');
    {$ENDIF}
  end;
  
  function sg_Images_MapTransparentBitmap(name: PChar; filename: PChar; transparentColor: LongWord): Bitmap; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_MapTransparentBitmap');
    {$ENDIF}
    
    try
      result := sgImages.MapTransparentBitmap(name, filename, transparentColor);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_MapTransparentBitmap');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_MapTransparentBitmap');
    {$ENDIF}
  end;
  
  procedure sg_Images_OptimiseBitmap(surface: Bitmap); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_OptimiseBitmap');
    {$ENDIF}
  
    try 
      sgImages.OptimiseBitmap(surface);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_OptimiseBitmap');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_OptimiseBitmap');
    {$ENDIF}
  end;
  
  function sg_Images_PixelDrawnAtPoint(bmp: Bitmap; x: LongInt; y: LongInt): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_PixelDrawnAtPoint');
    {$ENDIF}
    
    try
      result := sgImages.PixelDrawnAtPoint(bmp, x, y);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_PixelDrawnAtPoint');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_PixelDrawnAtPoint');
    {$ENDIF}
  end;
  
  procedure sg_Images_ReleaseAllBitmaps(); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_ReleaseAllBitmaps');
    {$ENDIF}
  
    try 
      sgImages.ReleaseAllBitmaps();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_ReleaseAllBitmaps');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_ReleaseAllBitmaps');
    {$ENDIF}
  end;
  
  procedure sg_Images_ReleaseBitmap(name: PChar); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_ReleaseBitmap');
    {$ENDIF}
  
    try 
      sgImages.ReleaseBitmap(name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_ReleaseBitmap');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_ReleaseBitmap');
    {$ENDIF}
  end;
  
  function sg_Images_RotateScaleBitmap(src: Bitmap; degRot: Single; scale: Single): Bitmap; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_RotateScaleBitmap');
    {$ENDIF}
    
    try
      result := sgImages.RotateScaleBitmap(src, degRot, scale);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_RotateScaleBitmap');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_RotateScaleBitmap');
    {$ENDIF}
  end;
  
  function sg_Images_SameBitmapCell(var bmp1: BitmapCell; var bmp2: BitmapCell): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_SameBitmapCell');
    {$ENDIF}
    
    try
      result := sgImages.SameBitmapCell(bmp1, bmp2);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_SameBitmapCell');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_SameBitmapCell');
    {$ENDIF}
  end;
  
  procedure sg_Images_SaveBitmap(src: Bitmap; filepath: PChar); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_SaveBitmap');
    {$ENDIF}
  
    try 
      sgImages.SaveBitmap(src, filepath);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_SaveBitmap');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_SaveBitmap');
    {$ENDIF}
  end;
  
  procedure sg_Images_SaveToPNG(bmp: Bitmap; filename: PChar); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_SaveToPNG');
    {$ENDIF}
  
    try 
      sgImages.SaveToPNG(bmp, filename);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_SaveToPNG');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_SaveToPNG');
    {$ENDIF}
  end;
  
  procedure sg_Images_SetOpacity(bmp: Bitmap; pct: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_SetOpacity');
    {$ENDIF}
  
    try 
      sgImages.SetOpacity(bmp, pct);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_SetOpacity');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_SetOpacity');
    {$ENDIF}
  end;
  
  procedure sg_Images_SetTransparentColor(src: Bitmap; clr: LongWord); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_SetTransparentColor');
    {$ENDIF}
  
    try 
      sgImages.SetTransparentColor(src, clr);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_SetTransparentColor');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_SetTransparentColor');
    {$ENDIF}
  end;
  
  procedure sg_Images_SetupBitmapForCollisions(src: Bitmap); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Images_SetupBitmapForCollisions');
    {$ENDIF}
  
    try 
      sgImages.SetupBitmapForCollisions(src);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Images_SetupBitmapForCollisions');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Images_SetupBitmapForCollisions');
    {$ENDIF}
  end;
  
  function sg_Input_AnyKeyPressed(): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Input_AnyKeyPressed');
    {$ENDIF}
    
    try
      result := sgInput.AnyKeyPressed();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Input_AnyKeyPressed');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Input_AnyKeyPressed');
    {$ENDIF}
  end;
  
  procedure sg_Input_EndReadingText(result: PChar); cdecl; export;
    var
      result_temp: String;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Input_EndReadingText');
    {$ENDIF}
    
    try
      result_temp := sgInput.EndReadingText();
        StrCopy(result, PChar(result_temp));
    Except on exc: Exception do 
      TrapException(exc, 'sg_Input_EndReadingText');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Input_EndReadingText');
    {$ENDIF}
  end;
  
  procedure sg_Input_HideMouse(); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Input_HideMouse');
    {$ENDIF}
  
    try 
      sgInput.HideMouse();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Input_HideMouse');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Input_HideMouse');
    {$ENDIF}
  end;
  
  function sg_Input_KeyDown(key: KeyCode): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Input_KeyDown');
    {$ENDIF}
    
    try
      result := sgInput.KeyDown(key);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Input_KeyDown');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Input_KeyDown');
    {$ENDIF}
  end;
  
  procedure sg_Input_KeyName(key: KeyCode; result: PChar); cdecl; export;
    var
      result_temp: String;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Input_KeyName');
    {$ENDIF}
    
    try
      result_temp := sgInput.KeyName(key);
        StrCopy(result, PChar(result_temp));
    Except on exc: Exception do 
      TrapException(exc, 'sg_Input_KeyName');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Input_KeyName');
    {$ENDIF}
  end;
  
  function sg_Input_KeyTyped(key: KeyCode): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Input_KeyTyped');
    {$ENDIF}
    
    try
      result := sgInput.KeyTyped(key);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Input_KeyTyped');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Input_KeyTyped');
    {$ENDIF}
  end;
  
  function sg_Input_MouseClicked(button: MouseButton): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Input_MouseClicked');
    {$ENDIF}
    
    try
      result := sgInput.MouseClicked(button);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Input_MouseClicked');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Input_MouseClicked');
    {$ENDIF}
  end;
  
  function sg_Input_MouseDown(button: MouseButton): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Input_MouseDown');
    {$ENDIF}
    
    try
      result := sgInput.MouseDown(button);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Input_MouseDown');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Input_MouseDown');
    {$ENDIF}
  end;
  
  function sg_Input_MouseMovement(): Vector; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Input_MouseMovement');
    {$ENDIF}
    
    try
      result := sgInput.MouseMovement();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Input_MouseMovement');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Input_MouseMovement');
    {$ENDIF}
  end;
  
  function sg_Input_MousePosition(): Point2D; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Input_MousePosition');
    {$ENDIF}
    
    try
      result := sgInput.MousePosition();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Input_MousePosition');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Input_MousePosition');
    {$ENDIF}
  end;
  
  function sg_Input_MousePositionAsVector(): Vector; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Input_MousePositionAsVector');
    {$ENDIF}
    
    try
      result := sgInput.MousePositionAsVector();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Input_MousePositionAsVector');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Input_MousePositionAsVector');
    {$ENDIF}
  end;
  
  function sg_Input_MouseShown(): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Input_MouseShown');
    {$ENDIF}
    
    try
      result := sgInput.MouseShown();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Input_MouseShown');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Input_MouseShown');
    {$ENDIF}
  end;
  
  function sg_Input_MouseUp(button: MouseButton): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Input_MouseUp');
    {$ENDIF}
    
    try
      result := sgInput.MouseUp(button);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Input_MouseUp');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Input_MouseUp');
    {$ENDIF}
  end;
  
  function sg_Input_MouseX(): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Input_MouseX');
    {$ENDIF}
    
    try
      result := sgInput.MouseX();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Input_MouseX');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Input_MouseX');
    {$ENDIF}
  end;
  
  function sg_Input_MouseY(): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Input_MouseY');
    {$ENDIF}
    
    try
      result := sgInput.MouseY();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Input_MouseY');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Input_MouseY');
    {$ENDIF}
  end;
  
  procedure sg_Input_MoveMouse(x: UInt16; y: UInt16); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Input_MoveMouse');
    {$ENDIF}
  
    try 
      sgInput.MoveMouse(x, y);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Input_MoveMouse');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Input_MoveMouse');
    {$ENDIF}
  end;
  
  procedure sg_Input_MoveMouseToPoint(var point: Point2D); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Input_MoveMouseToPoint');
    {$ENDIF}
  
    try 
      sgInput.MoveMouse(point);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Input_MoveMouseToPoint');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Input_MoveMouseToPoint');
    {$ENDIF}
  end;
  
  function sg_Input_ReadingText(): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Input_ReadingText');
    {$ENDIF}
    
    try
      result := sgInput.ReadingText();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Input_ReadingText');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Input_ReadingText');
    {$ENDIF}
  end;
  
  procedure sg_Input_SetMouseVisible(show: Boolean); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Input_SetMouseVisible');
    {$ENDIF}
  
    try 
      sgInput.ShowMouse(show);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Input_SetMouseVisible');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Input_SetMouseVisible');
    {$ENDIF}
  end;
  
  procedure sg_Input_ShowMouse(); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Input_ShowMouse');
    {$ENDIF}
  
    try 
      sgInput.ShowMouse();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Input_ShowMouse');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Input_ShowMouse');
    {$ENDIF}
  end;
  
  procedure sg_Input_StartReadingText(textColor: LongWord; maxLength: LongInt; theFont: Font; x: LongInt; y: LongInt); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Input_StartReadingText');
    {$ENDIF}
  
    try 
      sgInput.StartReadingText(textColor, maxLength, theFont, x, y);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Input_StartReadingText');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Input_StartReadingText');
    {$ENDIF}
  end;
  
  procedure sg_Input_StartReadingTextWithText(text: PChar; textColor: LongWord; maxLength: LongInt; theFont: Font; x: LongInt; y: LongInt); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Input_StartReadingTextWithText');
    {$ENDIF}
  
    try 
      sgInput.StartReadingTextWithText(text, textColor, maxLength, theFont, x, y);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Input_StartReadingTextWithText');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Input_StartReadingTextWithText');
    {$ENDIF}
  end;
  
  procedure sg_Input_StartReadingTextWithTextAtPt(text: PChar; textColor: LongWord; maxLength: LongInt; theFont: Font; var pt: Point2D); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Input_StartReadingTextWithTextAtPt');
    {$ENDIF}
  
    try 
      sgInput.StartReadingTextWithText(text, textColor, maxLength, theFont, pt);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Input_StartReadingTextWithTextAtPt');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Input_StartReadingTextWithTextAtPt');
    {$ENDIF}
  end;
  
  procedure sg_Input_StartReadingTextWithTextInArea(text: PChar; textColor: LongWord; maxLength: LongInt; theFont: Font; var area: Rectangle); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Input_StartReadingTextWithTextInArea');
    {$ENDIF}
  
    try 
      sgInput.StartReadingTextWithText(text, textColor, maxLength, theFont, area);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Input_StartReadingTextWithTextInArea');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Input_StartReadingTextWithTextInArea');
    {$ENDIF}
  end;
  
  procedure sg_Input_StartReadingTextWithinArea(textColor: LongWord; maxLength: LongInt; theFont: Font; var area: Rectangle); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Input_StartReadingTextWithinArea');
    {$ENDIF}
  
    try 
      sgInput.StartReadingText(textColor, maxLength, theFont, area);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Input_StartReadingTextWithinArea');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Input_StartReadingTextWithinArea');
    {$ENDIF}
  end;
  
  function sg_Input_TextEntryCancelled(): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Input_TextEntryCancelled');
    {$ENDIF}
    
    try
      result := sgInput.TextEntryCancelled();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Input_TextEntryCancelled');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Input_TextEntryCancelled');
    {$ENDIF}
  end;
  
  procedure sg_Input_TextReadAsASCII(result: PChar); cdecl; export;
    var
      result_temp: String;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Input_TextReadAsASCII');
    {$ENDIF}
    
    try
      result_temp := sgInput.TextReadAsASCII();
        StrCopy(result, PChar(result_temp));
    Except on exc: Exception do 
      TrapException(exc, 'sg_Input_TextReadAsASCII');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Input_TextReadAsASCII');
    {$ENDIF}
  end;
  
  function sg_Physics_BitmapAtPointsCollision(bmp1: Bitmap; var pt1: Point2D; bmp2: Bitmap; var pt2: Point2D): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Physics_BitmapAtPointsCollision');
    {$ENDIF}
    
    try
      result := sgPhysics.BitmapCollision(bmp1, pt1, bmp2, pt2);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Physics_BitmapAtPointsCollision');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Physics_BitmapAtPointsCollision');
    {$ENDIF}
  end;
  
  function sg_Physics_BitmapCollision(bmp1: Bitmap; x1: LongInt; y1: LongInt; bmp2: Bitmap; x2: LongInt; y2: LongInt): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Physics_BitmapCollision');
    {$ENDIF}
    
    try
      result := sgPhysics.BitmapCollision(bmp1, x1, y1, bmp2, x2, y2);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Physics_BitmapCollision');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Physics_BitmapCollision');
    {$ENDIF}
  end;
  
  function sg_Physics_BitmapPartAtPtRectCollision(bmp: Bitmap; var pt: Point2D; var part: Rectangle; var rect: Rectangle): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Physics_BitmapPartAtPtRectCollision');
    {$ENDIF}
    
    try
      result := sgPhysics.BitmapRectCollision(bmp, pt, part, rect);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Physics_BitmapPartAtPtRectCollision');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Physics_BitmapPartAtPtRectCollision');
    {$ENDIF}
  end;
  
  function sg_Physics_BitmapPartRectCollision(bmp: Bitmap; x: LongInt; y: LongInt; var part: Rectangle; var rect: Rectangle): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Physics_BitmapPartRectCollision');
    {$ENDIF}
    
    try
      result := sgPhysics.BitmapRectCollision(bmp, x, y, part, rect);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Physics_BitmapPartRectCollision');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Physics_BitmapPartRectCollision');
    {$ENDIF}
  end;
  
  function sg_Physics_BitmapPointCollision(bmp: Bitmap; x: LongInt; y: LongInt; ptX: Single; ptY: Single): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Physics_BitmapPointCollision');
    {$ENDIF}
    
    try
      result := sgPhysics.BitmapPointCollision(bmp, x, y, ptX, ptY);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Physics_BitmapPointCollision');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Physics_BitmapPointCollision');
    {$ENDIF}
  end;
  
  function sg_Physics_BitmapPointCollisionPart(bmp: Bitmap; x: LongInt; y: LongInt; var part: Rectangle; ptX: Single; ptY: Single): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Physics_BitmapPointCollisionPart');
    {$ENDIF}
    
    try
      result := sgPhysics.BitmapPointCollisionPart(bmp, x, y, part, ptX, ptY);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Physics_BitmapPointCollisionPart');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Physics_BitmapPointCollisionPart');
    {$ENDIF}
  end;
  
  function sg_Physics_BitmapPointPtCollision(bmp: Bitmap; x: LongInt; y: LongInt; var pt: Point2D): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Physics_BitmapPointPtCollision');
    {$ENDIF}
    
    try
      result := sgPhysics.BitmapPointCollision(bmp, x, y, pt);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Physics_BitmapPointPtCollision');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Physics_BitmapPointPtCollision');
    {$ENDIF}
  end;
  
  function sg_Physics_BitmapPointXYCollisionPart(bmp: Bitmap; x: LongInt; y: LongInt; var part: Rectangle; var pt: Point2D): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Physics_BitmapPointXYCollisionPart');
    {$ENDIF}
    
    try
      result := sgPhysics.BitmapPointCollisionPart(bmp, x, y, part, pt);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Physics_BitmapPointXYCollisionPart');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Physics_BitmapPointXYCollisionPart');
    {$ENDIF}
  end;
  
  function sg_Physics_BitmapRectCollision(bmp: Bitmap; x: LongInt; y: LongInt; rectX: LongInt; rectY: LongInt; rectWidth: LongInt; rectHeight: LongInt): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Physics_BitmapRectCollision');
    {$ENDIF}
    
    try
      result := sgPhysics.BitmapRectCollision(bmp, x, y, rectX, rectY, rectWidth, rectHeight);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Physics_BitmapRectCollision');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Physics_BitmapRectCollision');
    {$ENDIF}
  end;
  
  function sg_Physics_BitmapRectangleCollision(bmp: Bitmap; x: LongInt; y: LongInt; var rect: Rectangle): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Physics_BitmapRectangleCollision');
    {$ENDIF}
    
    try
      result := sgPhysics.BitmapRectCollision(bmp, x, y, rect);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Physics_BitmapRectangleCollision');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Physics_BitmapRectangleCollision');
    {$ENDIF}
  end;
  
  function sg_Physics_BitmapsPartsCollision(bmp1: Bitmap; var pt1: Point2D; var part1: Rectangle; bmp2: Bitmap; var pt2: Point2D; var part2: Rectangle): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Physics_BitmapsPartsCollision');
    {$ENDIF}
    
    try
      result := sgPhysics.BitmapCollision(bmp1, pt1, part1, bmp2, pt2, part2);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Physics_BitmapsPartsCollision');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Physics_BitmapsPartsCollision');
    {$ENDIF}
  end;
  
  function sg_Physics_CellBitmapCollision(bmp1: Bitmap; cell: LongInt; x1: LongInt; y1: LongInt; bmp2: Bitmap; x2: LongInt; y2: LongInt): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Physics_CellBitmapCollision');
    {$ENDIF}
    
    try
      result := sgPhysics.CellBitmapCollision(bmp1, cell, x1, y1, bmp2, x2, y2);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Physics_CellBitmapCollision');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Physics_CellBitmapCollision');
    {$ENDIF}
  end;
  
  function sg_Physics_CellBitmapCollisionAtPt(bmp1: Bitmap; cell: LongInt; var pt1: Point2D; bmp2: Bitmap; var pt2: Point2D): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Physics_CellBitmapCollisionAtPt');
    {$ENDIF}
    
    try
      result := sgPhysics.CellBitmapCollision(bmp1, cell, pt1, bmp2, pt2);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Physics_CellBitmapCollisionAtPt');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Physics_CellBitmapCollisionAtPt');
    {$ENDIF}
  end;
  
  function sg_Physics_CellBitmapPartCollision(bmp1: Bitmap; cell: LongInt; x1: LongInt; y1: LongInt; bmp2: Bitmap; x2: LongInt; y2: LongInt; var part: Rectangle): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Physics_CellBitmapPartCollision');
    {$ENDIF}
    
    try
      result := sgPhysics.CellBitmapCollision(bmp1, cell, x1, y1, bmp2, x2, y2, part);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Physics_CellBitmapPartCollision');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Physics_CellBitmapPartCollision');
    {$ENDIF}
  end;
  
  function sg_Physics_CellBitmapPartCollisionAtPt(bmp1: Bitmap; cell: LongInt; var pt1: Point2D; bmp2: Bitmap; var pt2: Point2D; var part: Rectangle): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Physics_CellBitmapPartCollisionAtPt');
    {$ENDIF}
    
    try
      result := sgPhysics.CellBitmapCollision(bmp1, cell, pt1, bmp2, pt2, part);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Physics_CellBitmapPartCollisionAtPt');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Physics_CellBitmapPartCollisionAtPt');
    {$ENDIF}
  end;
  
  function sg_Physics_CellCollision(bmp1: Bitmap; cell1: LongInt; x1: LongInt; y1: LongInt; bmp2: Bitmap; cell2: LongInt; x2: LongInt; y2: LongInt): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Physics_CellCollision');
    {$ENDIF}
    
    try
      result := sgPhysics.CellCollision(bmp1, cell1, x1, y1, bmp2, cell2, x2, y2);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Physics_CellCollision');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Physics_CellCollision');
    {$ENDIF}
  end;
  
  function sg_Physics_CellCollisionAtPt(bmp1: Bitmap; cell1: LongInt; var pt1: Point2D; bmp2: Bitmap; cell2: LongInt; var pt2: Point2D): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Physics_CellCollisionAtPt');
    {$ENDIF}
    
    try
      result := sgPhysics.CellCollision(bmp1, cell1, pt1, bmp2, cell2, pt2);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Physics_CellCollisionAtPt');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Physics_CellCollisionAtPt');
    {$ENDIF}
  end;
  
  function sg_Physics_CellRectCollision(bmp: Bitmap; cell: LongInt; x: LongInt; y: LongInt; var rect: Rectangle): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Physics_CellRectCollision');
    {$ENDIF}
    
    try
      result := sgPhysics.CellRectCollision(bmp, cell, x, y, rect);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Physics_CellRectCollision');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Physics_CellRectCollision');
    {$ENDIF}
  end;
  
  function sg_Physics_CellRectCollisionAtPt(bmp: Bitmap; cell: LongInt; var pt: Point2D; var rect: Rectangle): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Physics_CellRectCollisionAtPt');
    {$ENDIF}
    
    try
      result := sgPhysics.CellRectCollision(bmp, cell, pt, rect);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Physics_CellRectCollisionAtPt');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Physics_CellRectCollisionAtPt');
    {$ENDIF}
  end;
  
  function sg_Physics_CircleCircleCollision(var c1: Circle; var c2: Circle): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Physics_CircleCircleCollision');
    {$ENDIF}
    
    try
      result := sgPhysics.CircleCircleCollision(c1, c2);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Physics_CircleCircleCollision');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Physics_CircleCircleCollision');
    {$ENDIF}
  end;
  
  function sg_Physics_CircleLinesCollision(var c: Circle; lines: LineSegmentPtr; lines_len: LongInt): Boolean; cdecl; export;
    var
      lines_temp: LinesArray;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Physics_CircleLinesCollision');
    {$ENDIF}
    
    try
        LineCopyFromPtr(lines, lines_len, lines_temp);
      result := sgPhysics.CircleLinesCollision(c, lines_temp);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Physics_CircleLinesCollision');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Physics_CircleLinesCollision');
    {$ENDIF}
  end;
  
  function sg_Physics_CircleRectCollision(var c: Circle; var rect: Rectangle): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Physics_CircleRectCollision');
    {$ENDIF}
    
    try
      result := sgPhysics.CircleRectCollision(c, rect);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Physics_CircleRectCollision');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Physics_CircleRectCollision');
    {$ENDIF}
  end;
  
  function sg_Physics_CircleTriangleCollision(var c: Circle; tri: Point2DPtr): Boolean; cdecl; export;
    var
      tri_temp: Triangle;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Physics_CircleTriangleCollision');
    {$ENDIF}
    
    try
        TriCopyFromPtr(tri_temp, tri);
      result := sgPhysics.CircleTriangleCollision(c, tri_temp);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Physics_CircleTriangleCollision');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Physics_CircleTriangleCollision');
    {$ENDIF}
  end;
  
  procedure sg_Physics_CollideCircleCircle(s: Sprite; var c: Circle); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Physics_CollideCircleCircle');
    {$ENDIF}
  
    try 
      sgPhysics.CollideCircleCircle(s, c);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Physics_CollideCircleCircle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Physics_CollideCircleCircle');
    {$ENDIF}
  end;
  
  procedure sg_Physics_CollideCircleLine(s: Sprite; var line: LineSegment); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Physics_CollideCircleLine');
    {$ENDIF}
  
    try 
      sgPhysics.CollideCircleLine(s, line);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Physics_CollideCircleLine');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Physics_CollideCircleLine');
    {$ENDIF}
  end;
  
  procedure sg_Physics_CollideCircleLines(s: Sprite; lines: LineSegmentPtr; lines_len: LongInt); cdecl; export;
    var
      lines_temp: LinesArray;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Physics_CollideCircleLines');
    {$ENDIF}
  
    try 
        LineCopyFromPtr(lines, lines_len, lines_temp);
      sgPhysics.CollideCircleLines(s, lines_temp);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Physics_CollideCircleLines');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Physics_CollideCircleLines');
    {$ENDIF}
  end;
  
  procedure sg_Physics_CollideCircleRectangle(s: Sprite; var rect: Rectangle); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Physics_CollideCircleRectangle');
    {$ENDIF}
  
    try 
      sgPhysics.CollideCircleRectangle(s, rect);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Physics_CollideCircleRectangle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Physics_CollideCircleRectangle');
    {$ENDIF}
  end;
  
  procedure sg_Physics_CollideCircles(s1: Sprite; s2: Sprite); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Physics_CollideCircles');
    {$ENDIF}
  
    try 
      sgPhysics.CollideCircles(s1, s2);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Physics_CollideCircles');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Physics_CollideCircles');
    {$ENDIF}
  end;
  
  function sg_Physics_RectLineCollision(var rect: Rectangle; var line: LineSegment): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Physics_RectLineCollision');
    {$ENDIF}
    
    try
      result := sgPhysics.RectLineCollision(rect, line);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Physics_RectLineCollision');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Physics_RectLineCollision');
    {$ENDIF}
  end;
  
  function sg_Physics_SideForCollisionTest(var velocity: Vector): CollisionSide; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Physics_SideForCollisionTest');
    {$ENDIF}
    
    try
      result := sgPhysics.SideForCollisionTest(velocity);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Physics_SideForCollisionTest');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Physics_SideForCollisionTest');
    {$ENDIF}
  end;
  
  function sg_Physics_SpriteBitmapAtPointCollision(s: Sprite; bmp: Bitmap; var pt: Point2D): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Physics_SpriteBitmapAtPointCollision');
    {$ENDIF}
    
    try
      result := sgPhysics.SpriteBitmapCollision(s, bmp, pt);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Physics_SpriteBitmapAtPointCollision');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Physics_SpriteBitmapAtPointCollision');
    {$ENDIF}
  end;
  
  function sg_Physics_SpriteBitmapCollision(s: Sprite; bmp: Bitmap; x: Single; y: Single): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Physics_SpriteBitmapCollision');
    {$ENDIF}
    
    try
      result := sgPhysics.SpriteBitmapCollision(s, bmp, x, y);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Physics_SpriteBitmapCollision');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Physics_SpriteBitmapCollision');
    {$ENDIF}
  end;
  
  function sg_Physics_SpriteCircleLineCollision(s: Sprite; var line: LineSegment): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Physics_SpriteCircleLineCollision');
    {$ENDIF}
    
    try
      result := sgPhysics.CircleLineCollision(s, line);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Physics_SpriteCircleLineCollision');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Physics_SpriteCircleLineCollision');
    {$ENDIF}
  end;
  
  function sg_Physics_SpriteCollision(s1: Sprite; s2: Sprite): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Physics_SpriteCollision');
    {$ENDIF}
    
    try
      result := sgPhysics.SpriteCollision(s1, s2);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Physics_SpriteCollision');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Physics_SpriteCollision');
    {$ENDIF}
  end;
  
  function sg_Physics_SpriteRectCollision(s: Sprite; x: Single; y: Single; width: LongInt; height: LongInt): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Physics_SpriteRectCollision');
    {$ENDIF}
    
    try
      result := sgPhysics.SpriteRectCollision(s, x, y, width, height);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Physics_SpriteRectCollision');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Physics_SpriteRectCollision');
    {$ENDIF}
  end;
  
  function sg_Physics_SpriteRectLineCollision(s: Sprite; var line: LineSegment): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Physics_SpriteRectLineCollision');
    {$ENDIF}
    
    try
      result := sgPhysics.RectLineCollision(s, line);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Physics_SpriteRectLineCollision');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Physics_SpriteRectLineCollision');
    {$ENDIF}
  end;
  
  function sg_Physics_SpriteRectangleCollision(s: Sprite; var r: Rectangle): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Physics_SpriteRectangleCollision');
    {$ENDIF}
    
    try
      result := sgPhysics.SpriteRectCollision(s, r);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Physics_SpriteRectangleCollision');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Physics_SpriteRectangleCollision');
    {$ENDIF}
  end;
  
  function sg_Physics_SpriteShapeCollision(s: Sprite; shp: Shape): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Physics_SpriteShapeCollision');
    {$ENDIF}
    
    try
      result := sgPhysics.SpriteShapeCollision(s, shp);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Physics_SpriteShapeCollision');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Physics_SpriteShapeCollision');
    {$ENDIF}
  end;
  
  function sg_Physics_TriangleLineCollision(tri: Point2DPtr; var ln: LineSegment): Boolean; cdecl; export;
    var
      tri_temp: Triangle;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Physics_TriangleLineCollision');
    {$ENDIF}
    
    try
        TriCopyFromPtr(tri_temp, tri);
      result := sgPhysics.TriangleLineCollision(tri_temp, ln);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Physics_TriangleLineCollision');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Physics_TriangleLineCollision');
    {$ENDIF}
  end;
  
  procedure sg_Resources_AppPath(result: PChar); cdecl; export;
    var
      result_temp: String;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Resources_AppPath');
    {$ENDIF}
    
    try
      result_temp := sgResources.AppPath();
        StrCopy(result, PChar(result_temp));
    Except on exc: Exception do 
      TrapException(exc, 'sg_Resources_AppPath');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Resources_AppPath');
    {$ENDIF}
  end;
  
  procedure sg_Resources_FilenameToResource(name: PChar; kind: ResourceKind; result: PChar); cdecl; export;
    var
      result_temp: String;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Resources_FilenameToResource');
    {$ENDIF}
    
    try
      result_temp := sgResources.FilenameToResource(name, kind);
        StrCopy(result, PChar(result_temp));
    Except on exc: Exception do 
      TrapException(exc, 'sg_Resources_FilenameToResource');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Resources_FilenameToResource');
    {$ENDIF}
  end;
  
  function sg_Resources_HasResourceBundle(name: PChar): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Resources_HasResourceBundle');
    {$ENDIF}
    
    try
      result := sgResources.HasResourceBundle(name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Resources_HasResourceBundle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Resources_HasResourceBundle');
    {$ENDIF}
  end;
  
  procedure sg_Resources_LoadResourceBundle(name: PChar; showProgress: Boolean); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Resources_LoadResourceBundle');
    {$ENDIF}
  
    try 
      sgResources.LoadResourceBundle(name, showProgress);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Resources_LoadResourceBundle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Resources_LoadResourceBundle');
    {$ENDIF}
  end;
  
  procedure sg_Resources_MapResourceBundle(name: PChar; filename: PChar; showProgress: Boolean); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Resources_MapResourceBundle');
    {$ENDIF}
  
    try 
      sgResources.MapResourceBundle(name, filename, showProgress);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Resources_MapResourceBundle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Resources_MapResourceBundle');
    {$ENDIF}
  end;
  
  procedure sg_Resources_PathToOtherResource(filename: PChar; result: PChar); cdecl; export;
    var
      result_temp: String;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Resources_PathToOtherResource');
    {$ENDIF}
    
    try
      result_temp := sgResources.PathToResource(filename);
        StrCopy(result, PChar(result_temp));
    Except on exc: Exception do 
      TrapException(exc, 'sg_Resources_PathToOtherResource');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Resources_PathToOtherResource');
    {$ENDIF}
  end;
  
  procedure sg_Resources_PathToOtherResourceWithBase(path: PChar; filename: PChar; result: PChar); cdecl; export;
    var
      result_temp: String;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Resources_PathToOtherResourceWithBase');
    {$ENDIF}
    
    try
      result_temp := sgResources.PathToResourceWithBase(path, filename);
        StrCopy(result, PChar(result_temp));
    Except on exc: Exception do 
      TrapException(exc, 'sg_Resources_PathToOtherResourceWithBase');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Resources_PathToOtherResourceWithBase');
    {$ENDIF}
  end;
  
  procedure sg_Resources_PathToResource(filename: PChar; kind: ResourceKind; result: PChar); cdecl; export;
    var
      result_temp: String;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Resources_PathToResource');
    {$ENDIF}
    
    try
      result_temp := sgResources.PathToResource(filename, kind);
        StrCopy(result, PChar(result_temp));
    Except on exc: Exception do 
      TrapException(exc, 'sg_Resources_PathToResource');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Resources_PathToResource');
    {$ENDIF}
  end;
  
  procedure sg_Resources_PathToResourceWithBase(path: PChar; filename: PChar; kind: ResourceKind; result: PChar); cdecl; export;
    var
      result_temp: String;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Resources_PathToResourceWithBase');
    {$ENDIF}
    
    try
      result_temp := sgResources.PathToResourceWithBase(path, filename, kind);
        StrCopy(result, PChar(result_temp));
    Except on exc: Exception do 
      TrapException(exc, 'sg_Resources_PathToResourceWithBase');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Resources_PathToResourceWithBase');
    {$ENDIF}
  end;
  
  procedure sg_Resources_PathToResourceWithSubPaths(filename: PChar; kind: ResourceKind; subPaths: StringPtr; result: PChar; subPaths_len: LongInt); cdecl; export;
    var
      subPaths_temp: StringArray;
      result_temp: String;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Resources_PathToResourceWithSubPaths');
    {$ENDIF}
    
    try
        StringCopyFromPtr(subPaths, subPaths_len, subPaths_temp);
      result_temp := sgResources.PathToResource(filename, kind, subPaths_temp);
        StrCopy(result, PChar(result_temp));
    Except on exc: Exception do 
      TrapException(exc, 'sg_Resources_PathToResourceWithSubPaths');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Resources_PathToResourceWithSubPaths');
    {$ENDIF}
  end;
  
  procedure sg_Resources_RegisterFreeNotifier(fn: FreeNotifier); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Resources_RegisterFreeNotifier');
    {$ENDIF}
  
    try 
      sgResources.RegisterFreeNotifier(fn);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Resources_RegisterFreeNotifier');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Resources_RegisterFreeNotifier');
    {$ENDIF}
  end;
  
  procedure sg_Resources_ReleaseAllResources(); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Resources_ReleaseAllResources');
    {$ENDIF}
  
    try 
      sgResources.ReleaseAllResources();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Resources_ReleaseAllResources');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Resources_ReleaseAllResources');
    {$ENDIF}
  end;
  
  procedure sg_Resources_ReleaseResourceBundle(name: PChar); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Resources_ReleaseResourceBundle');
    {$ENDIF}
  
    try 
      sgResources.ReleaseResourceBundle(name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Resources_ReleaseResourceBundle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Resources_ReleaseResourceBundle');
    {$ENDIF}
  end;
  
  procedure sg_Resources_SetAppPath(path: PChar); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Resources_SetAppPath');
    {$ENDIF}
  
    try 
      sgResources.SetAppPath(path);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Resources_SetAppPath');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Resources_SetAppPath');
    {$ENDIF}
  end;
  
  procedure sg_Resources_SetAppPathWithExe(path: PChar; withExe: Boolean); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Resources_SetAppPathWithExe');
    {$ENDIF}
  
    try 
      sgResources.SetAppPath(path, withExe);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Resources_SetAppPathWithExe');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Resources_SetAppPathWithExe');
    {$ENDIF}
  end;
  
  procedure sg_Resources_ShowLogos(); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Resources_ShowLogos');
    {$ENDIF}
  
    try 
      sgResources.ShowLogos();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Resources_ShowLogos');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Resources_ShowLogos');
    {$ENDIF}
  end;
  
  function sg_Sprites_CenterPoint(s: Sprite): Point2D; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_CenterPoint');
    {$ENDIF}
    
    try
      result := sgSprites.CenterPoint(s);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_CenterPoint');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_CenterPoint');
    {$ENDIF}
  end;
  
  function sg_Sprites_CreateBasicSprite(layer: Bitmap): Sprite; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_CreateBasicSprite');
    {$ENDIF}
    
    try
      result := sgSprites.CreateSprite(layer);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_CreateBasicSprite');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_CreateBasicSprite');
    {$ENDIF}
  end;
  
  function sg_Sprites_CreateLayeredSprite(layers: BitmapPtr; layers_len: LongInt): Sprite; cdecl; export;
    var
      layers_temp: BitmapArray;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_CreateLayeredSprite');
    {$ENDIF}
    
    try
        BmpCopyFromPtr(layers, layers_len, layers_temp);
      result := sgSprites.CreateSprite(layers_temp);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_CreateLayeredSprite');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_CreateLayeredSprite');
    {$ENDIF}
  end;
  
  function sg_Sprites_CreateLayeredSpriteWithAnimationTemplate(layers: BitmapPtr; ani: AnimationTemplate; layers_len: LongInt): Sprite; cdecl; export;
    var
      layers_temp: BitmapArray;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_CreateLayeredSpriteWithAnimationTemplate');
    {$ENDIF}
    
    try
        BmpCopyFromPtr(layers, layers_len, layers_temp);
      result := sgSprites.CreateSprite(layers_temp, ani);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_CreateLayeredSpriteWithAnimationTemplate');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_CreateLayeredSpriteWithAnimationTemplate');
    {$ENDIF}
  end;
  
  function sg_Sprites_CreateLayeredSpriteWithLayerNames(layers: BitmapPtr; layerNames: StringPtr; layers_len: LongInt; layerNames_len: LongInt): Sprite; cdecl; export;
    var
      layers_temp: BitmapArray;
      layerNames_temp: StringArray;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_CreateLayeredSpriteWithLayerNames');
    {$ENDIF}
    
    try
        BmpCopyFromPtr(layers, layers_len, layers_temp);
        StringCopyFromPtr(layerNames, layerNames_len, layerNames_temp);
      result := sgSprites.CreateSprite(layers_temp, layerNames_temp);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_CreateLayeredSpriteWithLayerNames');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_CreateLayeredSpriteWithLayerNames');
    {$ENDIF}
  end;
  
  function sg_Sprites_CreateLayeredSpriteWithLayerNamesAndAnimationTemplate(layers: BitmapPtr; layerNames: StringPtr; ani: AnimationTemplate; layers_len: LongInt; layerNames_len: LongInt): Sprite; cdecl; export;
    var
      layers_temp: BitmapArray;
      layerNames_temp: StringArray;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_CreateLayeredSpriteWithLayerNamesAndAnimationTemplate');
    {$ENDIF}
    
    try
        BmpCopyFromPtr(layers, layers_len, layers_temp);
        StringCopyFromPtr(layerNames, layerNames_len, layerNames_temp);
      result := sgSprites.CreateSprite(layers_temp, layerNames_temp, ani);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_CreateLayeredSpriteWithLayerNamesAndAnimationTemplate');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_CreateLayeredSpriteWithLayerNamesAndAnimationTemplate');
    {$ENDIF}
  end;
  
  function sg_Sprites_CreateSpriteWithAnimation(layer: Bitmap; ani: AnimationTemplate): Sprite; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_CreateSpriteWithAnimation');
    {$ENDIF}
    
    try
      result := sgSprites.CreateSprite(layer, ani);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_CreateSpriteWithAnimation');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_CreateSpriteWithAnimation');
    {$ENDIF}
  end;
  
  function sg_Sprites_CreateSpriteWithLayer(layer: Bitmap; layerName: PChar): Sprite; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_CreateSpriteWithLayer');
    {$ENDIF}
    
    try
      result := sgSprites.CreateSprite(layer, layerName);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_CreateSpriteWithLayer');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_CreateSpriteWithLayer');
    {$ENDIF}
  end;
  
  function sg_Sprites_CreateSpriteWithLayerAndAnimation(layer: Bitmap; layerName: PChar; ani: AnimationTemplate): Sprite; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_CreateSpriteWithLayerAndAnimation');
    {$ENDIF}
    
    try
      result := sgSprites.CreateSprite(layer, layerName, ani);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_CreateSpriteWithLayerAndAnimation');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_CreateSpriteWithLayerAndAnimation');
    {$ENDIF}
  end;
  
  procedure sg_Sprites_DrawSpriteOffsetPoint(s: Sprite; var position: Point2D); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_DrawSpriteOffsetPoint');
    {$ENDIF}
  
    try 
      sgSprites.DrawSprite(s, position);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_DrawSpriteOffsetPoint');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_DrawSpriteOffsetPoint');
    {$ENDIF}
  end;
  
  procedure sg_Sprites_DrawSpriteOffsetXY(s: Sprite; xOffset: LongInt; yOffset: LongInt); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_DrawSpriteOffsetXY');
    {$ENDIF}
  
    try 
      sgSprites.DrawSprite(s, xOffset, yOffset);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_DrawSpriteOffsetXY');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_DrawSpriteOffsetXY');
    {$ENDIF}
  end;
  
  procedure sg_Sprites_FreeSprite(var s: Sprite); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_FreeSprite');
    {$ENDIF}
  
    try 
      sgSprites.FreeSprite(s);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_FreeSprite');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_FreeSprite');
    {$ENDIF}
  end;
  
  function sg_Sprites_IsSpriteOffscreen(s: Sprite): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_IsSpriteOffscreen');
    {$ENDIF}
    
    try
      result := sgSprites.IsSpriteOffscreen(s);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_IsSpriteOffscreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_IsSpriteOffscreen');
    {$ENDIF}
  end;
  
  procedure sg_Sprites_MoveSprite(s: Sprite; pct: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_MoveSprite');
    {$ENDIF}
  
    try 
      sgSprites.MoveSprite(s, pct);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_MoveSprite');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_MoveSprite');
    {$ENDIF}
  end;
  
  procedure sg_Sprites_MoveSpriteTo(s: Sprite; x: LongInt; y: LongInt); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_MoveSpriteTo');
    {$ENDIF}
  
    try 
      sgSprites.MoveSpriteTo(s, x, y);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_MoveSpriteTo');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_MoveSpriteTo');
    {$ENDIF}
  end;
  
  procedure sg_Sprites_MoveSpriteVecPct(s: Sprite; var velocity: Vector; pct: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_MoveSpriteVecPct');
    {$ENDIF}
  
    try 
      sgSprites.MoveSprite(s, velocity, pct);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_MoveSpriteVecPct');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_MoveSpriteVecPct');
    {$ENDIF}
  end;
  
  procedure sg_Sprites_ReplayAnimationWithSound(s: Sprite; withSound: Boolean); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_ReplayAnimationWithSound');
    {$ENDIF}
  
    try 
      sgSprites.SpriteReplayAnimation(s, withSound);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_ReplayAnimationWithSound');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_ReplayAnimationWithSound');
    {$ENDIF}
  end;
  
  function sg_Sprites_SpriteAddLayer(s: Sprite; newLayer: Bitmap; layerName: PChar): LongInt; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteAddLayer');
    {$ENDIF}
    
    try
      result := sgSprites.SpriteAddLayer(s, newLayer, layerName);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteAddLayer');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteAddLayer');
    {$ENDIF}
  end;
  
  procedure sg_Sprites_SpriteAddValue(s: Sprite; name: PChar); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteAddValue');
    {$ENDIF}
  
    try 
      sgSprites.SpriteAddValue(s, name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteAddValue');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteAddValue');
    {$ENDIF}
  end;
  
  procedure sg_Sprites_SpriteAddValueWithInitialValue(s: Sprite; name: PChar; initVal: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteAddValueWithInitialValue');
    {$ENDIF}
  
    try 
      sgSprites.SpriteAddValue(s, name, initVal);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteAddValueWithInitialValue');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteAddValueWithInitialValue');
    {$ENDIF}
  end;
  
  function sg_Sprites_SpriteAnimationHasEnded(s: Sprite): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteAnimationHasEnded');
    {$ENDIF}
    
    try
      result := sgSprites.SpriteAnimationHasEnded(s);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteAnimationHasEnded');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteAnimationHasEnded');
    {$ENDIF}
  end;
  
  procedure sg_Sprites_SpriteBringLayerForward(s: Sprite; visibleLayer: LongInt); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteBringLayerForward');
    {$ENDIF}
  
    try 
      sgSprites.SpriteBringLayerForward(s, visibleLayer);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteBringLayerForward');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteBringLayerForward');
    {$ENDIF}
  end;
  
  procedure sg_Sprites_SpriteBringLayerToFront(s: Sprite; visibleLayer: LongInt); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteBringLayerToFront');
    {$ENDIF}
  
    try 
      sgSprites.SpriteBringLayerToFront(s, visibleLayer);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteBringLayerToFront');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteBringLayerToFront');
    {$ENDIF}
  end;
  
  function sg_Sprites_SpriteCircle(s: Sprite): Circle; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteCircle');
    {$ENDIF}
    
    try
      result := sgSprites.SpriteCircle(s);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteCircle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteCircle');
    {$ENDIF}
  end;
  
  function sg_Sprites_SpriteCollisionBitmap(s: Sprite): Bitmap; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteCollisionBitmap');
    {$ENDIF}
    
    try
      result := sgSprites.SpriteCollisionBitmap(s);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteCollisionBitmap');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteCollisionBitmap');
    {$ENDIF}
  end;
  
  function sg_Sprites_SpriteCollisionCircle(s: Sprite): Circle; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteCollisionCircle');
    {$ENDIF}
    
    try
      result := sgSprites.SpriteCollisionCircle(s);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteCollisionCircle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteCollisionCircle');
    {$ENDIF}
  end;
  
  function sg_Sprites_SpriteCollisionKind(s: Sprite): CollisionTestKind; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteCollisionKind');
    {$ENDIF}
    
    try
      result := sgSprites.SpriteCollisionKind(s);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteCollisionKind');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteCollisionKind');
    {$ENDIF}
  end;
  
  function sg_Sprites_SpriteCollisionRectangle(s: Sprite): Rectangle; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteCollisionRectangle');
    {$ENDIF}
    
    try
      result := sgSprites.SpriteCollisionRectangle(s);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteCollisionRectangle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteCollisionRectangle');
    {$ENDIF}
  end;
  
  function sg_Sprites_SpriteCurrentCell(s: Sprite): LongInt; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteCurrentCell');
    {$ENDIF}
    
    try
      result := sgSprites.SpriteCurrentCell(s);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteCurrentCell');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteCurrentCell');
    {$ENDIF}
  end;
  
  function sg_Sprites_SpriteCurrentCellRectangle(s: Sprite): Rectangle; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteCurrentCellRectangle');
    {$ENDIF}
    
    try
      result := sgSprites.SpriteCurrentCellRectangle(s);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteCurrentCellRectangle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteCurrentCellRectangle');
    {$ENDIF}
  end;
  
  function sg_Sprites_SpriteDX(s: Sprite): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteDX');
    {$ENDIF}
    
    try
      result := sgSprites.SpriteDX(s);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteDX');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteDX');
    {$ENDIF}
  end;
  
  function sg_Sprites_SpriteDY(s: Sprite): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteDY');
    {$ENDIF}
    
    try
      result := sgSprites.SpriteDY(s);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteDY');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteDY');
    {$ENDIF}
  end;
  
  function sg_Sprites_SpriteHeading(s: Sprite): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteHeading');
    {$ENDIF}
    
    try
      result := sgSprites.SpriteHeading(s);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteHeading');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteHeading');
    {$ENDIF}
  end;
  
  function sg_Sprites_SpriteHeight(s: Sprite): LongInt; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteHeight');
    {$ENDIF}
    
    try
      result := sgSprites.SpriteHeight(s);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteHeight');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteHeight');
    {$ENDIF}
  end;
  
  procedure sg_Sprites_SpriteHideLayer(s: Sprite; id: LongInt); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteHideLayer');
    {$ENDIF}
  
    try 
      sgSprites.SpriteHideLayer(s, id);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteHideLayer');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteHideLayer');
    {$ENDIF}
  end;
  
  procedure sg_Sprites_SpriteHideLayerNamed(s: Sprite; name: PChar); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteHideLayerNamed');
    {$ENDIF}
  
    try 
      sgSprites.SpriteHideLayer(s, name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteHideLayerNamed');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteHideLayerNamed');
    {$ENDIF}
  end;
  
  function sg_Sprites_SpriteLayerAtIdx(s: Sprite; idx: LongInt): Bitmap; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteLayerAtIdx');
    {$ENDIF}
    
    try
      result := sgSprites.SpriteLayer(s, idx);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteLayerAtIdx');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteLayerAtIdx');
    {$ENDIF}
  end;
  
  function sg_Sprites_SpriteLayerCircle(s: Sprite; idx: LongInt): Circle; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteLayerCircle');
    {$ENDIF}
    
    try
      result := sgSprites.SpriteLayerCircle(s, idx);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteLayerCircle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteLayerCircle');
    {$ENDIF}
  end;
  
  function sg_Sprites_SpriteLayerCount(s: Sprite): LongInt; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteLayerCount');
    {$ENDIF}
    
    try
      result := sgSprites.SpriteLayerCount(s);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteLayerCount');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteLayerCount');
    {$ENDIF}
  end;
  
  function sg_Sprites_SpriteLayerHeight(s: Sprite; idx: LongInt): LongInt; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteLayerHeight');
    {$ENDIF}
    
    try
      result := sgSprites.SpriteLayerHeight(s, idx);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteLayerHeight');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteLayerHeight');
    {$ENDIF}
  end;
  
  function sg_Sprites_SpriteLayerIndex(s: Sprite; name: PChar): LongInt; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteLayerIndex');
    {$ENDIF}
    
    try
      result := sgSprites.SpriteLayerIndex(s, name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteLayerIndex');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteLayerIndex');
    {$ENDIF}
  end;
  
  procedure sg_Sprites_SpriteLayerName(s: Sprite; idx: LongInt; result: PChar); cdecl; export;
    var
      result_temp: String;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteLayerName');
    {$ENDIF}
    
    try
      result_temp := sgSprites.SpriteLayerName(s, idx);
        StrCopy(result, PChar(result_temp));
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteLayerName');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteLayerName');
    {$ENDIF}
  end;
  
  function sg_Sprites_SpriteLayerNamed(s: Sprite; name: PChar): Bitmap; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteLayerNamed');
    {$ENDIF}
    
    try
      result := sgSprites.SpriteLayer(s, name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteLayerNamed');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteLayerNamed');
    {$ENDIF}
  end;
  
  function sg_Sprites_SpriteLayerNamedCircle(s: Sprite; name: PChar): Circle; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteLayerNamedCircle');
    {$ENDIF}
    
    try
      result := sgSprites.SpriteLayerCircle(s, name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteLayerNamedCircle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteLayerNamedCircle');
    {$ENDIF}
  end;
  
  function sg_Sprites_SpriteLayerNamedHeight(s: Sprite; name: PChar): LongInt; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteLayerNamedHeight');
    {$ENDIF}
    
    try
      result := sgSprites.SpriteLayerHeight(s, name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteLayerNamedHeight');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteLayerNamedHeight');
    {$ENDIF}
  end;
  
  function sg_Sprites_SpriteLayerNamedRectangle(s: Sprite; name: PChar): Rectangle; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteLayerNamedRectangle');
    {$ENDIF}
    
    try
      result := sgSprites.SpriteLayerRectangle(s, name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteLayerNamedRectangle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteLayerNamedRectangle');
    {$ENDIF}
  end;
  
  function sg_Sprites_SpriteLayerNamedWidth(s: Sprite; name: PChar): LongInt; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteLayerNamedWidth');
    {$ENDIF}
    
    try
      result := sgSprites.SpriteLayerWidth(s, name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteLayerNamedWidth');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteLayerNamedWidth');
    {$ENDIF}
  end;
  
  function sg_Sprites_SpriteLayerOffset(s: Sprite; idx: LongInt): Point2D; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteLayerOffset');
    {$ENDIF}
    
    try
      result := sgSprites.SpriteLayerOffset(s, idx);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteLayerOffset');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteLayerOffset');
    {$ENDIF}
  end;
  
  function sg_Sprites_SpriteLayerOffsetNamed(s: Sprite; name: PChar): Point2D; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteLayerOffsetNamed');
    {$ENDIF}
    
    try
      result := sgSprites.SpriteLayerOffset(s, name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteLayerOffsetNamed');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteLayerOffsetNamed');
    {$ENDIF}
  end;
  
  procedure sg_Sprites_SpriteLayerOffsets(s: Sprite; result: Point2DPtr; result_len: LongInt); cdecl; export;
    var
      result_temp: Point2DArray;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteLayerOffsets');
    {$ENDIF}
    
    try
      result_temp := sgSprites.SpriteLayerOffsets(s);
        Point2DCopyToPtr(result_temp, result_len, result);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteLayerOffsets');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteLayerOffsets');
    {$ENDIF}
  end;
  
  function sg_Sprites_SpriteLayerRectangle(s: Sprite; idx: LongInt): Rectangle; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteLayerRectangle');
    {$ENDIF}
    
    try
      result := sgSprites.SpriteLayerRectangle(s, idx);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteLayerRectangle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteLayerRectangle');
    {$ENDIF}
  end;
  
  function sg_Sprites_SpriteLayerWidth(s: Sprite; idx: LongInt): LongInt; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteLayerWidth');
    {$ENDIF}
    
    try
      result := sgSprites.SpriteLayerWidth(s, idx);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteLayerWidth');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteLayerWidth');
    {$ENDIF}
  end;
  
  procedure sg_Sprites_SpriteLayers(s: Sprite; result: BitmapPtr; result_len: LongInt); cdecl; export;
    var
      result_temp: BitmapArray;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteLayers');
    {$ENDIF}
    
    try
      result_temp := sgSprites.SpriteLayers(s);
        BmpCopyToPtr(result_temp, result_len, result);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteLayers');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteLayers');
    {$ENDIF}
  end;
  
  function sg_Sprites_SpriteMass(s: Sprite): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteMass');
    {$ENDIF}
    
    try
      result := sgSprites.SpriteMass(s);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteMass');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteMass');
    {$ENDIF}
  end;
  
  function sg_Sprites_SpriteOnScreenAt(s: Sprite; x: LongInt; y: LongInt): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteOnScreenAt');
    {$ENDIF}
    
    try
      result := sgSprites.SpriteOnScreenAt(s, x, y);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteOnScreenAt');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteOnScreenAt');
    {$ENDIF}
  end;
  
  function sg_Sprites_SpriteOnScreenAtPoint(s: Sprite; var pt: Point2D): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteOnScreenAtPoint');
    {$ENDIF}
    
    try
      result := sgSprites.SpriteOnScreenAt(s, pt);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteOnScreenAtPoint');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteOnScreenAtPoint');
    {$ENDIF}
  end;
  
  function sg_Sprites_SpritePosition(s: Sprite): Point2D; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpritePosition');
    {$ENDIF}
    
    try
      result := sgSprites.SpritePosition(s);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpritePosition');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpritePosition');
    {$ENDIF}
  end;
  
  procedure sg_Sprites_SpriteReplayAnimation(s: Sprite); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteReplayAnimation');
    {$ENDIF}
  
    try 
      sgSprites.SpriteReplayAnimation(s);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteReplayAnimation');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteReplayAnimation');
    {$ENDIF}
  end;
  
  function sg_Sprites_SpriteRotation(s: Sprite): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteRotation');
    {$ENDIF}
    
    try
      result := sgSprites.SpriteRotation(s);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteRotation');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteRotation');
    {$ENDIF}
  end;
  
  function sg_Sprites_SpriteScale(s: Sprite): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteScale');
    {$ENDIF}
    
    try
      result := sgSprites.SpriteScale(s);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteScale');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteScale');
    {$ENDIF}
  end;
  
  function sg_Sprites_SpriteScreenRectangle(s: Sprite): Rectangle; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteScreenRectangle');
    {$ENDIF}
    
    try
      result := sgSprites.SpriteScreenRectangle(s);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteScreenRectangle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteScreenRectangle');
    {$ENDIF}
  end;
  
  procedure sg_Sprites_SpriteSendLayerBackward(s: Sprite; visibleLayer: LongInt); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteSendLayerBackward');
    {$ENDIF}
  
    try 
      sgSprites.SpriteSendLayerBackward(s, visibleLayer);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteSendLayerBackward');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteSendLayerBackward');
    {$ENDIF}
  end;
  
  procedure sg_Sprites_SpriteSendLayerToBack(s: Sprite; visibleLayer: LongInt); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteSendLayerToBack');
    {$ENDIF}
  
    try 
      sgSprites.SpriteSendLayerToBack(s, visibleLayer);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteSendLayerToBack');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteSendLayerToBack');
    {$ENDIF}
  end;
  
  procedure sg_Sprites_SpriteSetCollisionBitmap(s: Sprite; bmp: Bitmap); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteSetCollisionBitmap');
    {$ENDIF}
  
    try 
      sgSprites.SpriteSetCollisionBitmap(s, bmp);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteSetCollisionBitmap');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteSetCollisionBitmap');
    {$ENDIF}
  end;
  
  procedure sg_Sprites_SpriteSetCollisionKind(s: Sprite; value: CollisionTestKind); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteSetCollisionKind');
    {$ENDIF}
  
    try 
      sgSprites.SpriteSetCollisionKind(s, value);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteSetCollisionKind');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteSetCollisionKind');
    {$ENDIF}
  end;
  
  procedure sg_Sprites_SpriteSetDX(s: Sprite; value: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteSetDX');
    {$ENDIF}
  
    try 
      sgSprites.SpriteSetDX(s, value);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteSetDX');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteSetDX');
    {$ENDIF}
  end;
  
  procedure sg_Sprites_SpriteSetDY(s: Sprite; value: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteSetDY');
    {$ENDIF}
  
    try 
      sgSprites.SpriteSetDY(s, value);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteSetDY');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteSetDY');
    {$ENDIF}
  end;
  
  procedure sg_Sprites_SpriteSetHeading(s: Sprite; value: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteSetHeading');
    {$ENDIF}
  
    try 
      sgSprites.SpriteSetHeading(s, value);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteSetHeading');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteSetHeading');
    {$ENDIF}
  end;
  
  procedure sg_Sprites_SpriteSetLayerOffset(s: Sprite; idx: LongInt; var value: Point2D); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteSetLayerOffset');
    {$ENDIF}
  
    try 
      sgSprites.SpriteSetLayerOffset(s, idx, value);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteSetLayerOffset');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteSetLayerOffset');
    {$ENDIF}
  end;
  
  procedure sg_Sprites_SpriteSetLayerOffsetNamed(s: Sprite; name: PChar; var value: Point2D); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteSetLayerOffsetNamed');
    {$ENDIF}
  
    try 
      sgSprites.SpriteSetLayerOffset(s, name, value);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteSetLayerOffsetNamed');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteSetLayerOffsetNamed');
    {$ENDIF}
  end;
  
  procedure sg_Sprites_SpriteSetLayerOffsets(s: Sprite; value: Point2DPtr; value_len: LongInt); cdecl; export;
    var
      value_temp: Point2DArray;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteSetLayerOffsets');
    {$ENDIF}
  
    try 
        Point2DCopyFromPtr(value, value_len, value_temp);
      sgSprites.SpriteSetLayerOffsets(s, value_temp);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteSetLayerOffsets');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteSetLayerOffsets');
    {$ENDIF}
  end;
  
  procedure sg_Sprites_SpriteSetMass(s: Sprite; value: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteSetMass');
    {$ENDIF}
  
    try 
      sgSprites.SpriteSetMass(s, value);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteSetMass');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteSetMass');
    {$ENDIF}
  end;
  
  procedure sg_Sprites_SpriteSetPosition(s: Sprite; var value: Point2D); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteSetPosition');
    {$ENDIF}
  
    try 
      sgSprites.SpriteSetPosition(s, value);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteSetPosition');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteSetPosition');
    {$ENDIF}
  end;
  
  procedure sg_Sprites_SpriteSetRotation(s: Sprite; value: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteSetRotation');
    {$ENDIF}
  
    try 
      sgSprites.SpriteSetRotation(s, value);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteSetRotation');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteSetRotation');
    {$ENDIF}
  end;
  
  procedure sg_Sprites_SpriteSetScale(s: Sprite; value: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteSetScale');
    {$ENDIF}
  
    try 
      sgSprites.SpriteSetScale(s, value);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteSetScale');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteSetScale');
    {$ENDIF}
  end;
  
  procedure sg_Sprites_SpriteSetSpeed(s: Sprite; value: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteSetSpeed');
    {$ENDIF}
  
    try 
      sgSprites.SpriteSetSpeed(s, value);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteSetSpeed');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteSetSpeed');
    {$ENDIF}
  end;
  
  procedure sg_Sprites_SpriteSetValue(s: Sprite; idx: LongInt; val: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteSetValue');
    {$ENDIF}
  
    try 
      sgSprites.SpriteSetValue(s, idx, val);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteSetValue');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteSetValue');
    {$ENDIF}
  end;
  
  procedure sg_Sprites_SpriteSetValueNamed(s: Sprite; name: PChar; val: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteSetValueNamed');
    {$ENDIF}
  
    try 
      sgSprites.SpriteSetValue(s, name, val);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteSetValueNamed');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteSetValueNamed');
    {$ENDIF}
  end;
  
  procedure sg_Sprites_SpriteSetVelocity(s: Sprite; var value: Vector); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteSetVelocity');
    {$ENDIF}
  
    try 
      sgSprites.SpriteSetVelocity(s, value);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteSetVelocity');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteSetVelocity');
    {$ENDIF}
  end;
  
  procedure sg_Sprites_SpriteSetX(s: Sprite; value: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteSetX');
    {$ENDIF}
  
    try 
      sgSprites.SpriteSetX(s, value);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteSetX');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteSetX');
    {$ENDIF}
  end;
  
  procedure sg_Sprites_SpriteSetY(s: Sprite; value: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteSetY');
    {$ENDIF}
  
    try 
      sgSprites.SpriteSetY(s, value);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteSetY');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteSetY');
    {$ENDIF}
  end;
  
  function sg_Sprites_SpriteShowLayer(s: Sprite; id: LongInt): LongInt; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteShowLayer');
    {$ENDIF}
    
    try
      result := sgSprites.SpriteShowLayer(s, id);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteShowLayer');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteShowLayer');
    {$ENDIF}
  end;
  
  function sg_Sprites_SpriteShowLayerNamed(s: Sprite; name: PChar): LongInt; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteShowLayerNamed');
    {$ENDIF}
    
    try
      result := sgSprites.SpriteShowLayer(s, name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteShowLayerNamed');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteShowLayerNamed');
    {$ENDIF}
  end;
  
  function sg_Sprites_SpriteSpeed(s: Sprite): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteSpeed');
    {$ENDIF}
    
    try
      result := sgSprites.SpriteSpeed(s);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteSpeed');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteSpeed');
    {$ENDIF}
  end;
  
  procedure sg_Sprites_SpriteStartAnimation(s: Sprite; idx: LongInt); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteStartAnimation');
    {$ENDIF}
  
    try 
      sgSprites.SpriteStartAnimation(s, idx);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteStartAnimation');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteStartAnimation');
    {$ENDIF}
  end;
  
  procedure sg_Sprites_SpriteStartAnimationNamed(s: Sprite; named: PChar); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteStartAnimationNamed');
    {$ENDIF}
  
    try 
      sgSprites.SpriteStartAnimation(s, named);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteStartAnimationNamed');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteStartAnimationNamed');
    {$ENDIF}
  end;
  
  procedure sg_Sprites_SpriteStartAnimationNamedWithSound(s: Sprite; named: PChar; withSound: Boolean); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteStartAnimationNamedWithSound');
    {$ENDIF}
  
    try 
      sgSprites.SpriteStartAnimation(s, named, withSound);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteStartAnimationNamedWithSound');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteStartAnimationNamedWithSound');
    {$ENDIF}
  end;
  
  procedure sg_Sprites_SpriteStartAnimationWithSound(s: Sprite; idx: LongInt; withSound: Boolean); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteStartAnimationWithSound');
    {$ENDIF}
  
    try 
      sgSprites.SpriteStartAnimation(s, idx, withSound);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteStartAnimationWithSound');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteStartAnimationWithSound');
    {$ENDIF}
  end;
  
  procedure sg_Sprites_SpriteToggleLayerNamedVisible(s: Sprite; name: PChar); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteToggleLayerNamedVisible');
    {$ENDIF}
  
    try 
      sgSprites.SpriteToggleLayerVisible(s, name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteToggleLayerNamedVisible');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteToggleLayerNamedVisible');
    {$ENDIF}
  end;
  
  procedure sg_Sprites_SpriteToggleLayerVisible(s: Sprite; id: LongInt); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteToggleLayerVisible');
    {$ENDIF}
  
    try 
      sgSprites.SpriteToggleLayerVisible(s, id);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteToggleLayerVisible');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteToggleLayerVisible');
    {$ENDIF}
  end;
  
  function sg_Sprites_SpriteValue(s: Sprite; index: LongInt): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteValue');
    {$ENDIF}
    
    try
      result := sgSprites.SpriteValue(s, index);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteValue');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteValue');
    {$ENDIF}
  end;
  
  function sg_Sprites_SpriteValueCount(s: Sprite): LongInt; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteValueCount');
    {$ENDIF}
    
    try
      result := sgSprites.SpriteValueCount(s);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteValueCount');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteValueCount');
    {$ENDIF}
  end;
  
  function sg_Sprites_SpriteValueNamed(s: Sprite; name: PChar): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteValueNamed');
    {$ENDIF}
    
    try
      result := sgSprites.SpriteValue(s, name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteValueNamed');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteValueNamed');
    {$ENDIF}
  end;
  
  procedure sg_Sprites_SpriteValueNames(s: Sprite; result: StringPtr; result_len: LongInt); cdecl; export;
    var
      result_temp: StringArray;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteValueNames');
    {$ENDIF}
    
    try
      result_temp := sgSprites.SpriteValueNames(s);
        StringCopyToPtr(result_temp, result_len, result);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteValueNames');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteValueNames');
    {$ENDIF}
  end;
  
  function sg_Sprites_SpriteVelocity(s: Sprite): Vector; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteVelocity');
    {$ENDIF}
    
    try
      result := sgSprites.SpriteVelocity(s);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteVelocity');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteVelocity');
    {$ENDIF}
  end;
  
  function sg_Sprites_SpriteVisibleIndexOfLayer(s: Sprite; id: LongInt): LongInt; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteVisibleIndexOfLayer');
    {$ENDIF}
    
    try
      result := sgSprites.SpriteVisibleIndexOfLayer(s, id);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteVisibleIndexOfLayer');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteVisibleIndexOfLayer');
    {$ENDIF}
  end;
  
  function sg_Sprites_SpriteVisibleIndexOfLayerNamed(s: Sprite; name: PChar): LongInt; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteVisibleIndexOfLayerNamed');
    {$ENDIF}
    
    try
      result := sgSprites.SpriteVisibleIndexOfLayer(s, name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteVisibleIndexOfLayerNamed');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteVisibleIndexOfLayerNamed');
    {$ENDIF}
  end;
  
  function sg_Sprites_SpriteVisibleLayer(s: Sprite; idx: LongInt): LongInt; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteVisibleLayer');
    {$ENDIF}
    
    try
      result := sgSprites.SpriteVisibleLayer(s, idx);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteVisibleLayer');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteVisibleLayer');
    {$ENDIF}
  end;
  
  function sg_Sprites_SpriteVisibleLayerCount(s: Sprite): LongInt; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteVisibleLayerCount');
    {$ENDIF}
    
    try
      result := sgSprites.SpriteVisibleLayerCount(s);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteVisibleLayerCount');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteVisibleLayerCount');
    {$ENDIF}
  end;
  
  procedure sg_Sprites_SpriteVisibleLayerIds(s: Sprite; result: LongIntPtr; result_len: LongInt); cdecl; export;
    var
      result_temp: LongIntArray;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteVisibleLayerIds');
    {$ENDIF}
    
    try
      result_temp := sgSprites.SpriteVisibleLayerIds(s);
        LongIntCopyToPtr(result_temp, result_len, result);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteVisibleLayerIds');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteVisibleLayerIds');
    {$ENDIF}
  end;
  
  function sg_Sprites_SpriteWidth(s: Sprite): LongInt; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteWidth');
    {$ENDIF}
    
    try
      result := sgSprites.SpriteWidth(s);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteWidth');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteWidth');
    {$ENDIF}
  end;
  
  function sg_Sprites_SpriteX(s: Sprite): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteX');
    {$ENDIF}
    
    try
      result := sgSprites.SpriteX(s);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteX');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteX');
    {$ENDIF}
  end;
  
  function sg_Sprites_SpriteY(s: Sprite): Single; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_SpriteY');
    {$ENDIF}
    
    try
      result := sgSprites.SpriteY(s);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_SpriteY');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_SpriteY');
    {$ENDIF}
  end;
  
  procedure sg_Sprites_UpdateSpriteAnimationPctWithSound(s: Sprite; pct: Single; withSound: Boolean); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_UpdateSpriteAnimationPctWithSound');
    {$ENDIF}
  
    try 
      sgSprites.UpdateSpriteAnimation(s, pct, withSound);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_UpdateSpriteAnimationPctWithSound');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_UpdateSpriteAnimationPctWithSound');
    {$ENDIF}
  end;
  
  procedure sg_Sprites_UpdateSpritePctWithSound(s: Sprite; pct: Single; withSound: Boolean); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_UpdateSpritePctWithSound');
    {$ENDIF}
  
    try 
      sgSprites.UpdateSprite(s, pct, withSound);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_UpdateSpritePctWithSound');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_UpdateSpritePctWithSound');
    {$ENDIF}
  end;
  
  function sg_Sprites_VectorFromCenterSpriteToPoint(s: Sprite; var pt: Point2D): Vector; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_VectorFromCenterSpriteToPoint');
    {$ENDIF}
    
    try
      result := sgSprites.VectorFromCenterSpriteToPoint(s, pt);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_VectorFromCenterSpriteToPoint');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_VectorFromCenterSpriteToPoint');
    {$ENDIF}
  end;
  
  function sg_Sprites_VectorFromTo(s1: Sprite; s2: Sprite): Vector; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Sprites_VectorFromTo');
    {$ENDIF}
    
    try
      result := sgSprites.VectorFromTo(s1, s2);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Sprites_VectorFromTo');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Sprites_VectorFromTo');
    {$ENDIF}
  end;
  
  procedure sg_Text_DrawFrameRateWithSimpleFont(x: LongInt; y: LongInt); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Text_DrawFrameRateWithSimpleFont');
    {$ENDIF}
  
    try 
      sgText.DrawFramerate(x, y);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Text_DrawFrameRateWithSimpleFont');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Text_DrawFrameRateWithSimpleFont');
    {$ENDIF}
  end;
  
  procedure sg_Text_DrawFramerate(x: LongInt; y: LongInt; font: Font); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Text_DrawFramerate');
    {$ENDIF}
  
    try 
      sgText.DrawFramerate(x, y, font);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Text_DrawFramerate');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Text_DrawFramerate');
    {$ENDIF}
  end;
  
  procedure sg_Text_DrawSimpleText(theText: PChar; textColor: LongWord; x: Single; y: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Text_DrawSimpleText');
    {$ENDIF}
  
    try 
      sgText.DrawText(theText, textColor, x, y);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Text_DrawSimpleText');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Text_DrawSimpleText');
    {$ENDIF}
  end;
  
  procedure sg_Text_DrawSimpleTextOnBitmap(dest: Bitmap; theText: PChar; textColor: LongWord; x: Single; y: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Text_DrawSimpleTextOnBitmap');
    {$ENDIF}
  
    try 
      sgText.DrawText(dest, theText, textColor, x, y);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Text_DrawSimpleTextOnBitmap');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Text_DrawSimpleTextOnBitmap');
    {$ENDIF}
  end;
  
  procedure sg_Text_DrawSimpleTextOnScreen(theText: PChar; textColor: LongWord; x: Single; y: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Text_DrawSimpleTextOnScreen');
    {$ENDIF}
  
    try 
      sgText.DrawTextOnScreen(theText, textColor, x, y);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Text_DrawSimpleTextOnScreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Text_DrawSimpleTextOnScreen');
    {$ENDIF}
  end;
  
  procedure sg_Text_DrawSimpleTextPt(theText: PChar; textColor: LongWord; var pt: Point2D); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Text_DrawSimpleTextPt');
    {$ENDIF}
  
    try 
      sgText.DrawText(theText, textColor, pt);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Text_DrawSimpleTextPt');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Text_DrawSimpleTextPt');
    {$ENDIF}
  end;
  
  procedure sg_Text_DrawText(theText: PChar; textColor: LongWord; theFont: Font; x: Single; y: Single); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Text_DrawText');
    {$ENDIF}
  
    try 
      sgText.DrawText(theText, textColor, theFont, x, y);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Text_DrawText');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Text_DrawText');
    {$ENDIF}
  end;
  
  procedure sg_Text_DrawTextAtPoint(theText: PChar; textColor: LongWord; theFont: Font; var pt: Point2D); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Text_DrawTextAtPoint');
    {$ENDIF}
  
    try 
      sgText.DrawText(theText, textColor, theFont, pt);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Text_DrawTextAtPoint');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Text_DrawTextAtPoint');
    {$ENDIF}
  end;
  
  procedure sg_Text_DrawTextLines(theText: PChar; textColor: LongWord; backColor: LongWord; theFont: Font; align: FontAlignment; x: Single; y: Single; w: LongInt; h: LongInt); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Text_DrawTextLines');
    {$ENDIF}
  
    try 
      sgText.DrawTextLines(theText, textColor, backColor, theFont, align, x, y, w, h);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Text_DrawTextLines');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Text_DrawTextLines');
    {$ENDIF}
  end;
  
  procedure sg_Text_DrawTextLinesInRect(theText: PChar; textColor: LongWord; backColor: LongWord; theFont: Font; align: FontAlignment; var withinRect: Rectangle); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Text_DrawTextLinesInRect');
    {$ENDIF}
  
    try 
      sgText.DrawTextLines(theText, textColor, backColor, theFont, align, withinRect);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Text_DrawTextLinesInRect');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Text_DrawTextLinesInRect');
    {$ENDIF}
  end;
  
  procedure sg_Text_DrawTextLinesInRectOnBitmap(dest: Bitmap; theText: PChar; textColor: LongWord; backColor: LongWord; theFont: Font; align: FontAlignment; var withinRect: Rectangle); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Text_DrawTextLinesInRectOnBitmap');
    {$ENDIF}
  
    try 
      sgText.DrawTextLines(dest, theText, textColor, backColor, theFont, align, withinRect);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Text_DrawTextLinesInRectOnBitmap');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Text_DrawTextLinesInRectOnBitmap');
    {$ENDIF}
  end;
  
  procedure sg_Text_DrawTextLinesInRectOnScreen(theText: PChar; textColor: LongWord; backColor: LongWord; theFont: Font; align: FontAlignment; var withinRect: Rectangle); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Text_DrawTextLinesInRectOnScreen');
    {$ENDIF}
  
    try 
      sgText.DrawTextLinesOnScreen(theText, textColor, backColor, theFont, align, withinRect);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Text_DrawTextLinesInRectOnScreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Text_DrawTextLinesInRectOnScreen');
    {$ENDIF}
  end;
  
  procedure sg_Text_DrawTextLinesOnBitmap(dest: Bitmap; theText: PChar; textColor: LongWord; backColor: LongWord; theFont: Font; align: FontAlignment; x: LongInt; y: LongInt; w: LongInt; h: LongInt); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Text_DrawTextLinesOnBitmap');
    {$ENDIF}
  
    try 
      sgText.DrawTextLines(dest, theText, textColor, backColor, theFont, align, x, y, w, h);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Text_DrawTextLinesOnBitmap');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Text_DrawTextLinesOnBitmap');
    {$ENDIF}
  end;
  
  procedure sg_Text_DrawTextLinesOnScreen(theText: PChar; textColor: LongWord; backColor: LongWord; theFont: Font; align: FontAlignment; x: LongInt; y: LongInt; w: LongInt; h: LongInt); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Text_DrawTextLinesOnScreen');
    {$ENDIF}
  
    try 
      sgText.DrawTextLinesOnScreen(theText, textColor, backColor, theFont, align, x, y, w, h);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Text_DrawTextLinesOnScreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Text_DrawTextLinesOnScreen');
    {$ENDIF}
  end;
  
  procedure sg_Text_DrawTextOnBitmap(dest: Bitmap; theText: PChar; textColor: LongWord; theFont: Font; x: LongInt; y: LongInt); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Text_DrawTextOnBitmap');
    {$ENDIF}
  
    try 
      sgText.DrawText(dest, theText, textColor, theFont, x, y);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Text_DrawTextOnBitmap');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Text_DrawTextOnBitmap');
    {$ENDIF}
  end;
  
  procedure sg_Text_DrawTextOnBitmapAtPoint(dest: Bitmap; theText: PChar; textColor: LongWord; theFont: Font; var pt: Point2D); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Text_DrawTextOnBitmapAtPoint');
    {$ENDIF}
  
    try 
      sgText.DrawText(dest, theText, textColor, theFont, pt);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Text_DrawTextOnBitmapAtPoint');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Text_DrawTextOnBitmapAtPoint');
    {$ENDIF}
  end;
  
  procedure sg_Text_DrawTextOnScreen(theText: PChar; textColor: LongWord; theFont: Font; x: LongInt; y: LongInt); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Text_DrawTextOnScreen');
    {$ENDIF}
  
    try 
      sgText.DrawTextOnScreen(theText, textColor, theFont, x, y);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Text_DrawTextOnScreen');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Text_DrawTextOnScreen');
    {$ENDIF}
  end;
  
  procedure sg_Text_DrawTextOnScreenAtPoint(theText: PChar; textColor: LongWord; theFont: Font; var pt: Point2D); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Text_DrawTextOnScreenAtPoint');
    {$ENDIF}
  
    try 
      sgText.DrawTextOnScreen(theText, textColor, theFont, pt);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Text_DrawTextOnScreenAtPoint');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Text_DrawTextOnScreenAtPoint');
    {$ENDIF}
  end;
  
  function sg_Text_FontFontStyle(font: Font): FontStyle; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Text_FontFontStyle');
    {$ENDIF}
    
    try
      result := sgText.FontFontStyle(font);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Text_FontFontStyle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Text_FontFontStyle');
    {$ENDIF}
  end;
  
  procedure sg_Text_FontNameFor(fontName: PChar; size: LongInt; result: PChar); cdecl; export;
    var
      result_temp: String;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Text_FontNameFor');
    {$ENDIF}
    
    try
      result_temp := sgText.FontNameFor(fontName, size);
        StrCopy(result, PChar(result_temp));
    Except on exc: Exception do 
      TrapException(exc, 'sg_Text_FontNameFor');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Text_FontNameFor');
    {$ENDIF}
  end;
  
  function sg_Text_FontNamed(name: PChar): Font; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Text_FontNamed');
    {$ENDIF}
    
    try
      result := sgText.FontNamed(name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Text_FontNamed');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Text_FontNamed');
    {$ENDIF}
  end;
  
  function sg_Text_FontNamedWithSize(name: PChar; size: LongInt): Font; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Text_FontNamedWithSize');
    {$ENDIF}
    
    try
      result := sgText.FontNamed(name, size);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Text_FontNamedWithSize');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Text_FontNamedWithSize');
    {$ENDIF}
  end;
  
  procedure sg_Text_FontSetStyle(font: Font; value: FontStyle); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Text_FontSetStyle');
    {$ENDIF}
  
    try 
      sgText.FontSetStyle(font, value);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Text_FontSetStyle');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Text_FontSetStyle');
    {$ENDIF}
  end;
  
  procedure sg_Text_FreeFont(var fontToFree: Font); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Text_FreeFont');
    {$ENDIF}
  
    try 
      sgText.FreeFont(fontToFree);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Text_FreeFont');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Text_FreeFont');
    {$ENDIF}
  end;
  
  function sg_Text_HasFont(name: PChar): Boolean; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Text_HasFont');
    {$ENDIF}
    
    try
      result := sgText.HasFont(name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Text_HasFont');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Text_HasFont');
    {$ENDIF}
  end;
  
  function sg_Text_LoadFont(fontName: PChar; size: LongInt): Font; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Text_LoadFont');
    {$ENDIF}
    
    try
      result := sgText.LoadFont(fontName, size);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Text_LoadFont');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Text_LoadFont');
    {$ENDIF}
  end;
  
  function sg_Text_MapFont(name: PChar; filename: PChar; size: LongInt): Font; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Text_MapFont');
    {$ENDIF}
    
    try
      result := sgText.MapFont(name, filename, size);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Text_MapFont');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Text_MapFont');
    {$ENDIF}
  end;
  
  procedure sg_Text_ReleaseAllFonts(); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Text_ReleaseAllFonts');
    {$ENDIF}
  
    try 
      sgText.ReleaseAllFonts();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Text_ReleaseAllFonts');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Text_ReleaseAllFonts');
    {$ENDIF}
  end;
  
  procedure sg_Text_ReleaseFont(name: PChar); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Text_ReleaseFont');
    {$ENDIF}
  
    try 
      sgText.ReleaseFont(name);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Text_ReleaseFont');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Text_ReleaseFont');
    {$ENDIF}
  end;
  
  function sg_Text_TextAlignmentFrom(str: PChar): FontAlignment; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Text_TextAlignmentFrom');
    {$ENDIF}
    
    try
      result := sgText.TextAlignmentFrom(str);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Text_TextAlignmentFrom');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Text_TextAlignmentFrom');
    {$ENDIF}
  end;
  
  function sg_Text_TextHeight(theFont: Font; theText: PChar): LongInt; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Text_TextHeight');
    {$ENDIF}
    
    try
      result := sgText.TextHeight(theFont, theText);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Text_TextHeight');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Text_TextHeight');
    {$ENDIF}
  end;
  
  function sg_Text_TextWidth(theFont: Font; theText: PChar): LongInt; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Text_TextWidth');
    {$ENDIF}
    
    try
      result := sgText.TextWidth(theFont, theText);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Text_TextWidth');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Text_TextWidth');
    {$ENDIF}
  end;
  
  function sg_Timers_CreateTimer(): Timer; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Timers_CreateTimer');
    {$ENDIF}
    
    try
      result := sgTimers.CreateTimer();
    Except on exc: Exception do 
      TrapException(exc, 'sg_Timers_CreateTimer');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Timers_CreateTimer');
    {$ENDIF}
  end;
  
  procedure sg_Timers_FreeTimer(var toFree: Timer); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Timers_FreeTimer');
    {$ENDIF}
  
    try 
      sgTimers.FreeTimer(toFree);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Timers_FreeTimer');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Timers_FreeTimer');
    {$ENDIF}
  end;
  
  procedure sg_Timers_PauseTimer(toPause: Timer); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Timers_PauseTimer');
    {$ENDIF}
  
    try 
      sgTimers.PauseTimer(toPause);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Timers_PauseTimer');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Timers_PauseTimer');
    {$ENDIF}
  end;
  
  procedure sg_Timers_ResetTimer(tmr: Timer); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Timers_ResetTimer');
    {$ENDIF}
  
    try 
      sgTimers.ResetTimer(tmr);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Timers_ResetTimer');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Timers_ResetTimer');
    {$ENDIF}
  end;
  
  procedure sg_Timers_ResumeTimer(toUnpause: Timer); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Timers_ResumeTimer');
    {$ENDIF}
  
    try 
      sgTimers.ResumeTimer(toUnpause);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Timers_ResumeTimer');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Timers_ResumeTimer');
    {$ENDIF}
  end;
  
  procedure sg_Timers_StartTimer(toStart: Timer); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Timers_StartTimer');
    {$ENDIF}
  
    try 
      sgTimers.StartTimer(toStart);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Timers_StartTimer');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Timers_StartTimer');
    {$ENDIF}
  end;
  
  procedure sg_Timers_StopTimer(toStop: Timer); cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Timers_StopTimer');
    {$ENDIF}
  
    try 
      sgTimers.StopTimer(toStop);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Timers_StopTimer');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Timers_StopTimer');
    {$ENDIF}
  end;
  
  function sg_Timers_TimerTicks(toGet: Timer): UInt32; cdecl; export;
  begin
    {$IFDEF TRACE}
      TraceEnter('SGSDK.dll', 'sg_Timers_TimerTicks');
    {$ENDIF}
    
    try
      result := sgTimers.TimerTicks(toGet);
    Except on exc: Exception do 
      TrapException(exc, 'sg_Timers_TimerTicks');
    end;  
    
    {$IFDEF TRACE}
      TraceExit('SGSDK.dll', 'sg_Timers_TimerTicks');
    {$ENDIF}
  end;
  
  
  {$ifdef UNIX}
    {$ifndef DARWIN}
  end.
    {$endif}  
  {$endif}
  
    exports
    sg_Animation_AnimationCurrentCell name 'sg_Animation_AnimationCurrentCell',
    sg_Animation_AnimationEnded name 'sg_Animation_AnimationEnded',
    sg_Animation_AnimationEnteredFrame name 'sg_Animation_AnimationEnteredFrame',
    sg_Animation_AnimationFrameTime name 'sg_Animation_AnimationFrameTime',
    sg_Animation_AnimationIndex name 'sg_Animation_AnimationIndex',
    sg_Animation_AnimationName name 'sg_Animation_AnimationName',
    sg_Animation_AnimationTemplateNamed name 'sg_Animation_AnimationTemplateNamed',
    sg_Animation_AssignAnimation name 'sg_Animation_AssignAnimation',
    sg_Animation_AssignAnimationNamed name 'sg_Animation_AssignAnimationNamed',
    sg_Animation_AssignAnimationNamedWithSound name 'sg_Animation_AssignAnimationNamedWithSound',
    sg_Animation_AssignAnimationWithSound name 'sg_Animation_AssignAnimationWithSound',
    sg_Animation_CreateAnimation name 'sg_Animation_CreateAnimation',
    sg_Animation_CreateAnimationNamed name 'sg_Animation_CreateAnimationNamed',
    sg_Animation_CreateAnimationNamedWithSound name 'sg_Animation_CreateAnimationNamedWithSound',
    sg_Animation_CreateAnimationWithSound name 'sg_Animation_CreateAnimationWithSound',
    sg_Animation_DrawAnimation name 'sg_Animation_DrawAnimation',
    sg_Animation_DrawAnimationAtPoint name 'sg_Animation_DrawAnimationAtPoint',
    sg_Animation_DrawAnimationOnScreen name 'sg_Animation_DrawAnimationOnScreen',
    sg_Animation_DrawAnimationOnScreenAtPt name 'sg_Animation_DrawAnimationOnScreenAtPt',
    sg_Animation_DrawAnimationOntoDest name 'sg_Animation_DrawAnimationOntoDest',
    sg_Animation_DrawAnimationOntoDestAtPt name 'sg_Animation_DrawAnimationOntoDestAtPt',
    sg_Animation_FreeAnimation name 'sg_Animation_FreeAnimation',
    sg_Animation_FreeAnimationTemplate name 'sg_Animation_FreeAnimationTemplate',
    sg_Animation_HasAnimationTemplate name 'sg_Animation_HasAnimationTemplate',
    sg_Animation_LoadAnimationTemplate name 'sg_Animation_LoadAnimationTemplate',
    sg_Animation_MapAnimationTemplate name 'sg_Animation_MapAnimationTemplate',
    sg_Animation_ReleaseAllAnimationTemplates name 'sg_Animation_ReleaseAllAnimationTemplates',
    sg_Animation_ReleaseAnimationTemplate name 'sg_Animation_ReleaseAnimationTemplate',
    sg_Animation_ResetAnimation name 'sg_Animation_ResetAnimation',
    sg_Animation_ResetAnimationWithSound name 'sg_Animation_ResetAnimationWithSound',
    sg_Animation_UpdateAnimation name 'sg_Animation_UpdateAnimation',
    sg_Animation_UpdateAnimationPct name 'sg_Animation_UpdateAnimationPct',
    sg_Animation_UpdateAnimationPctAndSound name 'sg_Animation_UpdateAnimationPctAndSound',
    sg_Audio_AudioReady name 'sg_Audio_AudioReady',
    sg_Audio_CloseAudio name 'sg_Audio_CloseAudio',
    sg_Audio_FadeMusicIn name 'sg_Audio_FadeMusicIn',
    sg_Audio_FadeMusicInWithLoops name 'sg_Audio_FadeMusicInWithLoops',
    sg_Audio_FadeMusicOut name 'sg_Audio_FadeMusicOut',
    sg_Audio_FreeMusic name 'sg_Audio_FreeMusic',
    sg_Audio_FreeSoundEffect name 'sg_Audio_FreeSoundEffect',
    sg_Audio_HasMusic name 'sg_Audio_HasMusic',
    sg_Audio_HasSoundEffect name 'sg_Audio_HasSoundEffect',
    sg_Audio_LoadMusic name 'sg_Audio_LoadMusic',
    sg_Audio_LoadSoundEffect name 'sg_Audio_LoadSoundEffect',
    sg_Audio_MapMusic name 'sg_Audio_MapMusic',
    sg_Audio_MapSoundEffect name 'sg_Audio_MapSoundEffect',
    sg_Audio_MusicFilename name 'sg_Audio_MusicFilename',
    sg_Audio_MusicName name 'sg_Audio_MusicName',
    sg_Audio_MusicNamed name 'sg_Audio_MusicNamed',
    sg_Audio_MusicPlaying name 'sg_Audio_MusicPlaying',
    sg_Audio_MusicVolume name 'sg_Audio_MusicVolume',
    sg_Audio_OpenAudio name 'sg_Audio_OpenAudio',
    sg_Audio_PlayMusicWithLoops name 'sg_Audio_PlayMusicWithLoops',
    sg_Audio_PlaySoundEffectWithLoopAndVolume name 'sg_Audio_PlaySoundEffectWithLoopAndVolume',
    sg_Audio_ReleaseAllMusic name 'sg_Audio_ReleaseAllMusic',
    sg_Audio_ReleaseAllSoundEffects name 'sg_Audio_ReleaseAllSoundEffects',
    sg_Audio_ReleaseMusic name 'sg_Audio_ReleaseMusic',
    sg_Audio_ReleaseSoundEffect name 'sg_Audio_ReleaseSoundEffect',
    sg_Audio_SetMusicVolume name 'sg_Audio_SetMusicVolume',
    sg_Audio_SoundEffectFilename name 'sg_Audio_SoundEffectFilename',
    sg_Audio_SoundEffectName name 'sg_Audio_SoundEffectName',
    sg_Audio_SoundEffectNamed name 'sg_Audio_SoundEffectNamed',
    sg_Audio_SoundEffectPlaying name 'sg_Audio_SoundEffectPlaying',
    sg_Audio_StopMusic name 'sg_Audio_StopMusic',
    sg_Audio_StopSoundEffect name 'sg_Audio_StopSoundEffect',
    sg_Audio_TryOpenAudio name 'sg_Audio_TryOpenAudio',
    sg_Camera_CameraPos name 'sg_Camera_CameraPos',
    sg_Camera_CameraScreenRect name 'sg_Camera_CameraScreenRect',
    sg_Camera_CameraX name 'sg_Camera_CameraX',
    sg_Camera_CameraY name 'sg_Camera_CameraY',
    sg_Camera_CenterCameraOn name 'sg_Camera_CenterCameraOn',
    sg_Camera_CenterCameraOnCharacter name 'sg_Camera_CenterCameraOnCharacter',
    sg_Camera_CenterCameraOnWithXYOffset name 'sg_Camera_CenterCameraOnWithXYOffset',
    sg_Camera_MoveCameraBy name 'sg_Camera_MoveCameraBy',
    sg_Camera_MoveCameraByXY name 'sg_Camera_MoveCameraByXY',
    sg_Camera_MoveCameraTo name 'sg_Camera_MoveCameraTo',
    sg_Camera_MoveCameraToXY name 'sg_Camera_MoveCameraToXY',
    sg_Camera_PointOnScreen name 'sg_Camera_PointOnScreen',
    sg_Camera_RectOnScreen name 'sg_Camera_RectOnScreen',
    sg_Camera_SetCameraPos name 'sg_Camera_SetCameraPos',
    sg_Camera_SetCameraX name 'sg_Camera_SetCameraX',
    sg_Camera_SetCameraY name 'sg_Camera_SetCameraY',
    sg_Camera_ToScreen name 'sg_Camera_ToScreen',
    sg_Camera_ToScreenRect name 'sg_Camera_ToScreenRect',
    sg_Camera_ToScreenX name 'sg_Camera_ToScreenX',
    sg_Camera_ToScreenY name 'sg_Camera_ToScreenY',
    sg_Camera_ToWorld name 'sg_Camera_ToWorld',
    sg_Camera_ToWorldX name 'sg_Camera_ToWorldX',
    sg_Camera_ToWorldY name 'sg_Camera_ToWorldY',
    sg_Core_BlueOf name 'sg_Core_BlueOf',
    sg_Core_BrightnessOf name 'sg_Core_BrightnessOf',
    sg_Core_CalculateFramerate name 'sg_Core_CalculateFramerate',
    sg_Core_ChangeScreenSize name 'sg_Core_ChangeScreenSize',
    sg_Core_ColorComponents name 'sg_Core_ColorComponents',
    sg_Core_ColorFromBitmap name 'sg_Core_ColorFromBitmap',
    sg_Core_ColorToString name 'sg_Core_ColorToString',
    sg_Core_Delay name 'sg_Core_Delay',
    sg_Core_ExceptionMessage name 'sg_Core_ExceptionMessage',
    sg_Core_ExceptionOccured name 'sg_Core_ExceptionOccured',
    sg_Core_GetFramerate name 'sg_Core_GetFramerate',
    sg_Core_GetTicks name 'sg_Core_GetTicks',
    sg_Core_GreenOf name 'sg_Core_GreenOf',
    sg_Core_HSBColor name 'sg_Core_HSBColor',
    sg_Core_HSBValuesOf name 'sg_Core_HSBValuesOf',
    sg_Core_HueOf name 'sg_Core_HueOf',
    sg_Core_OpenGraphicsWindow name 'sg_Core_OpenGraphicsWindow',
    sg_Core_ProcessEvents name 'sg_Core_ProcessEvents',
    sg_Core_RGBAColor name 'sg_Core_RGBAColor',
    sg_Core_RGBAFloatColor name 'sg_Core_RGBAFloatColor',
    sg_Core_RGBFloatColor name 'sg_Core_RGBFloatColor',
    sg_Core_RandomColor name 'sg_Core_RandomColor',
    sg_Core_RandomRGBColor name 'sg_Core_RandomRGBColor',
    sg_Core_RedOf name 'sg_Core_RedOf',
    sg_Core_RefreshScreen name 'sg_Core_RefreshScreen',
    sg_Core_RefreshScreenRestrictFPS name 'sg_Core_RefreshScreenRestrictFPS',
    sg_Core_Rnd name 'sg_Core_Rnd',
    sg_Core_RndUpto name 'sg_Core_RndUpto',
    sg_Core_SaturationOf name 'sg_Core_SaturationOf',
    sg_Core_ScreenHeight name 'sg_Core_ScreenHeight',
    sg_Core_ScreenWidth name 'sg_Core_ScreenWidth',
    sg_Core_SetIcon name 'sg_Core_SetIcon',
    sg_Core_SwinGameVersion name 'sg_Core_SwinGameVersion',
    sg_Core_TakeScreenshot name 'sg_Core_TakeScreenshot',
    sg_Core_ToggleFullScreen name 'sg_Core_ToggleFullScreen',
    sg_Core_ToggleWindowBorder name 'sg_Core_ToggleWindowBorder',
    sg_Core_TransparencyOf name 'sg_Core_TransparencyOf',
    sg_Core_WindowCloseRequested name 'sg_Core_WindowCloseRequested',
    sg_Geometry_AddVectors name 'sg_Geometry_AddVectors',
    sg_Geometry_ApplyMatrix name 'sg_Geometry_ApplyMatrix',
    sg_Geometry_ApplyMatrixToPoints name 'sg_Geometry_ApplyMatrixToPoints',
    sg_Geometry_CalculateAngle name 'sg_Geometry_CalculateAngle',
    sg_Geometry_CalculateAngleBetween name 'sg_Geometry_CalculateAngleBetween',
    sg_Geometry_CalculateAngleBetweenSprites name 'sg_Geometry_CalculateAngleBetweenSprites',
    sg_Geometry_CalculateAngleBetweenVectors name 'sg_Geometry_CalculateAngleBetweenVectors',
    sg_Geometry_CircleAt name 'sg_Geometry_CircleAt',
    sg_Geometry_CircleCenterPoint name 'sg_Geometry_CircleCenterPoint',
    sg_Geometry_CircleFromXY name 'sg_Geometry_CircleFromXY',
    sg_Geometry_CirclePrototypeFrom name 'sg_Geometry_CirclePrototypeFrom',
    sg_Geometry_CircleRadius name 'sg_Geometry_CircleRadius',
    sg_Geometry_CircleWithinRect name 'sg_Geometry_CircleWithinRect',
    sg_Geometry_CircleX name 'sg_Geometry_CircleX',
    sg_Geometry_CircleY name 'sg_Geometry_CircleY',
    sg_Geometry_ClosestPointOnCircle name 'sg_Geometry_ClosestPointOnCircle',
    sg_Geometry_ClosestPointOnLine name 'sg_Geometry_ClosestPointOnLine',
    sg_Geometry_ClosestPointOnLineFromCircle name 'sg_Geometry_ClosestPointOnLineFromCircle',
    sg_Geometry_ClosestPointOnLineXY name 'sg_Geometry_ClosestPointOnLineXY',
    sg_Geometry_ClosestPointOnLinesFromCircle name 'sg_Geometry_ClosestPointOnLinesFromCircle',
    sg_Geometry_ClosestPointOnRectFromCircle name 'sg_Geometry_ClosestPointOnRectFromCircle',
    sg_Geometry_Cosine name 'sg_Geometry_Cosine',
    sg_Geometry_DistantPointOnCircle name 'sg_Geometry_DistantPointOnCircle',
    sg_Geometry_DistantPointOnCircleHeading name 'sg_Geometry_DistantPointOnCircleHeading',
    sg_Geometry_DotProduct name 'sg_Geometry_DotProduct',
    sg_Geometry_FixRect name 'sg_Geometry_FixRect',
    sg_Geometry_FixRectangle name 'sg_Geometry_FixRectangle',
    sg_Geometry_FreePrototype name 'sg_Geometry_FreePrototype',
    sg_Geometry_FreeShape name 'sg_Geometry_FreeShape',
    sg_Geometry_IdentityMatrix name 'sg_Geometry_IdentityMatrix',
    sg_Geometry_InsetRectangle name 'sg_Geometry_InsetRectangle',
    sg_Geometry_Intersection name 'sg_Geometry_Intersection',
    sg_Geometry_InvertVector name 'sg_Geometry_InvertVector',
    sg_Geometry_LimitVector name 'sg_Geometry_LimitVector',
    sg_Geometry_LineAsVector name 'sg_Geometry_LineAsVector',
    sg_Geometry_LineCircleHit name 'sg_Geometry_LineCircleHit',
    sg_Geometry_LineCount name 'sg_Geometry_LineCount',
    sg_Geometry_LineFrom name 'sg_Geometry_LineFrom',
    sg_Geometry_LineFromPointToPoint name 'sg_Geometry_LineFromPointToPoint',
    sg_Geometry_LineFromVector name 'sg_Geometry_LineFromVector',
    sg_Geometry_LineFromVectorWithStartPoint name 'sg_Geometry_LineFromVectorWithStartPoint',
    sg_Geometry_LineFromVectorWithStartXY name 'sg_Geometry_LineFromVectorWithStartXY',
    sg_Geometry_LineIntersectionPoint name 'sg_Geometry_LineIntersectionPoint',
    sg_Geometry_LineIntersectsCircle name 'sg_Geometry_LineIntersectsCircle',
    sg_Geometry_LineIntersectsLines name 'sg_Geometry_LineIntersectsLines',
    sg_Geometry_LineIntersectsRect name 'sg_Geometry_LineIntersectsRect',
    sg_Geometry_LineListPrototypeFrom name 'sg_Geometry_LineListPrototypeFrom',
    sg_Geometry_LineMagnitudeSq name 'sg_Geometry_LineMagnitudeSq',
    sg_Geometry_LineMagnitudeSqFromLine name 'sg_Geometry_LineMagnitudeSqFromLine',
    sg_Geometry_LineMidPoint name 'sg_Geometry_LineMidPoint',
    sg_Geometry_LineNormal name 'sg_Geometry_LineNormal',
    sg_Geometry_LinePrototypeFrom name 'sg_Geometry_LinePrototypeFrom',
    sg_Geometry_LineSegmentsIntersect name 'sg_Geometry_LineSegmentsIntersect',
    sg_Geometry_LineStripPrototypeFrom name 'sg_Geometry_LineStripPrototypeFrom',
    sg_Geometry_LineToString name 'sg_Geometry_LineToString',
    sg_Geometry_LinesFromRect name 'sg_Geometry_LinesFromRect',
    sg_Geometry_LinesFromShape name 'sg_Geometry_LinesFromShape',
    sg_Geometry_LinesFromTriangle name 'sg_Geometry_LinesFromTriangle',
    sg_Geometry_MatrixMultiply name 'sg_Geometry_MatrixMultiply',
    sg_Geometry_MatrixMultiplyVector name 'sg_Geometry_MatrixMultiplyVector',
    sg_Geometry_MatrixToString name 'sg_Geometry_MatrixToString',
    sg_Geometry_MinimumPointsForKind name 'sg_Geometry_MinimumPointsForKind',
    sg_Geometry_PointAdd name 'sg_Geometry_PointAdd',
    sg_Geometry_PointAt name 'sg_Geometry_PointAt',
    sg_Geometry_PointAtStartWithOffset name 'sg_Geometry_PointAtStartWithOffset',
    sg_Geometry_PointInCircle name 'sg_Geometry_PointInCircle',
    sg_Geometry_PointInRect name 'sg_Geometry_PointInRect',
    sg_Geometry_PointInRectXY name 'sg_Geometry_PointInRectXY',
    sg_Geometry_PointInShape name 'sg_Geometry_PointInShape',
    sg_Geometry_PointInTriangle name 'sg_Geometry_PointInTriangle',
    sg_Geometry_PointLineDistance name 'sg_Geometry_PointLineDistance',
    sg_Geometry_PointOnLine name 'sg_Geometry_PointOnLine',
    sg_Geometry_PointPointDistance name 'sg_Geometry_PointPointDistance',
    sg_Geometry_PointPrototypeFrom name 'sg_Geometry_PointPrototypeFrom',
    sg_Geometry_PointToString name 'sg_Geometry_PointToString',
    sg_Geometry_PointXYInRect name 'sg_Geometry_PointXYInRect',
    sg_Geometry_PointXYInRectXY name 'sg_Geometry_PointXYInRectXY',
    sg_Geometry_PointXYLineDistance name 'sg_Geometry_PointXYLineDistance',
    sg_Geometry_PointsFromLine name 'sg_Geometry_PointsFromLine',
    sg_Geometry_PointsFromRect name 'sg_Geometry_PointsFromRect',
    sg_Geometry_PrototypeFrom name 'sg_Geometry_PrototypeFrom',
    sg_Geometry_PrototypeKind name 'sg_Geometry_PrototypeKind',
    sg_Geometry_PrototypePointCount name 'sg_Geometry_PrototypePointCount',
    sg_Geometry_PrototypePoints name 'sg_Geometry_PrototypePoints',
    sg_Geometry_PrototypeSetKind name 'sg_Geometry_PrototypeSetKind',
    sg_Geometry_PrototypeSetPoints name 'sg_Geometry_PrototypeSetPoints',
    sg_Geometry_RayCircleIntersectDistance name 'sg_Geometry_RayCircleIntersectDistance',
    sg_Geometry_RayIntersectionPoint name 'sg_Geometry_RayIntersectionPoint',
    sg_Geometry_RectangleAfterMove name 'sg_Geometry_RectangleAfterMove',
    sg_Geometry_RectangleAtPoint name 'sg_Geometry_RectangleAtPoint',
    sg_Geometry_RectangleBottom name 'sg_Geometry_RectangleBottom',
    sg_Geometry_RectangleBottomLeft name 'sg_Geometry_RectangleBottomLeft',
    sg_Geometry_RectangleBottomRight name 'sg_Geometry_RectangleBottomRight',
    sg_Geometry_RectangleCenter name 'sg_Geometry_RectangleCenter',
    sg_Geometry_RectangleCenterBottom name 'sg_Geometry_RectangleCenterBottom',
    sg_Geometry_RectangleCenterLeft name 'sg_Geometry_RectangleCenterLeft',
    sg_Geometry_RectangleCenterRight name 'sg_Geometry_RectangleCenterRight',
    sg_Geometry_RectangleCenterTop name 'sg_Geometry_RectangleCenterTop',
    sg_Geometry_RectangleForPoints name 'sg_Geometry_RectangleForPoints',
    sg_Geometry_RectangleFrom name 'sg_Geometry_RectangleFrom',
    sg_Geometry_RectangleFromCircle name 'sg_Geometry_RectangleFromCircle',
    sg_Geometry_RectangleFromLine name 'sg_Geometry_RectangleFromLine',
    sg_Geometry_RectangleFromLines name 'sg_Geometry_RectangleFromLines',
    sg_Geometry_RectangleFromTriangle name 'sg_Geometry_RectangleFromTriangle',
    sg_Geometry_RectangleLeft name 'sg_Geometry_RectangleLeft',
    sg_Geometry_RectangleOffset name 'sg_Geometry_RectangleOffset',
    sg_Geometry_RectangleRight name 'sg_Geometry_RectangleRight',
    sg_Geometry_RectangleToString name 'sg_Geometry_RectangleToString',
    sg_Geometry_RectangleTop name 'sg_Geometry_RectangleTop',
    sg_Geometry_RectangleTopLeft name 'sg_Geometry_RectangleTopLeft',
    sg_Geometry_RectangleTopRight name 'sg_Geometry_RectangleTopRight',
    sg_Geometry_RectanglesIntersect name 'sg_Geometry_RectanglesIntersect',
    sg_Geometry_RotationMatrix name 'sg_Geometry_RotationMatrix',
    sg_Geometry_ScaleMatrix name 'sg_Geometry_ScaleMatrix',
    sg_Geometry_ScaleMatrixByPoint name 'sg_Geometry_ScaleMatrixByPoint',
    sg_Geometry_ScaleRotateTranslateMatrix name 'sg_Geometry_ScaleRotateTranslateMatrix',
    sg_Geometry_ShapeAABB name 'sg_Geometry_ShapeAABB',
    sg_Geometry_ShapeAddSubShape name 'sg_Geometry_ShapeAddSubShape',
    sg_Geometry_ShapeAngle name 'sg_Geometry_ShapeAngle',
    sg_Geometry_ShapeAtPoint name 'sg_Geometry_ShapeAtPoint',
    sg_Geometry_ShapeCircle name 'sg_Geometry_ShapeCircle',
    sg_Geometry_ShapeCircleOffset name 'sg_Geometry_ShapeCircleOffset',
    sg_Geometry_ShapeColor name 'sg_Geometry_ShapeColor',
    sg_Geometry_ShapeLine name 'sg_Geometry_ShapeLine',
    sg_Geometry_ShapeLineOffset name 'sg_Geometry_ShapeLineOffset',
    sg_Geometry_ShapeLines name 'sg_Geometry_ShapeLines',
    sg_Geometry_ShapeLinesWithOffset name 'sg_Geometry_ShapeLinesWithOffset',
    sg_Geometry_ShapePointCount name 'sg_Geometry_ShapePointCount',
    sg_Geometry_ShapePoints name 'sg_Geometry_ShapePoints',
    sg_Geometry_ShapeRectangleIntersect name 'sg_Geometry_ShapeRectangleIntersect',
    sg_Geometry_ShapeScale name 'sg_Geometry_ShapeScale',
    sg_Geometry_ShapeSetAngle name 'sg_Geometry_ShapeSetAngle',
    sg_Geometry_ShapeSetColor name 'sg_Geometry_ShapeSetColor',
    sg_Geometry_ShapeSetPrototype name 'sg_Geometry_ShapeSetPrototype',
    sg_Geometry_ShapeSetScale name 'sg_Geometry_ShapeSetScale',
    sg_Geometry_ShapeShapeKind name 'sg_Geometry_ShapeShapeKind',
    sg_Geometry_ShapeShapePrototype name 'sg_Geometry_ShapeShapePrototype',
    sg_Geometry_ShapeTriangle name 'sg_Geometry_ShapeTriangle',
    sg_Geometry_ShapeTriangleWithOffset name 'sg_Geometry_ShapeTriangleWithOffset',
    sg_Geometry_ShapeTriangles name 'sg_Geometry_ShapeTriangles',
    sg_Geometry_ShapeTrianglesOffset name 'sg_Geometry_ShapeTrianglesOffset',
    sg_Geometry_Sine name 'sg_Geometry_Sine',
    sg_Geometry_SubtractVectors name 'sg_Geometry_SubtractVectors',
    sg_Geometry_Tangent name 'sg_Geometry_Tangent',
    sg_Geometry_TangentPoints name 'sg_Geometry_TangentPoints',
    sg_Geometry_TranslationMatrix name 'sg_Geometry_TranslationMatrix',
    sg_Geometry_TranslationMatrixPt name 'sg_Geometry_TranslationMatrixPt',
    sg_Geometry_TriangleBarycenter name 'sg_Geometry_TriangleBarycenter',
    sg_Geometry_TriangleFanPrototypeFrom name 'sg_Geometry_TriangleFanPrototypeFrom',
    sg_Geometry_TriangleFrom name 'sg_Geometry_TriangleFrom',
    sg_Geometry_TriangleFromPoints name 'sg_Geometry_TriangleFromPoints',
    sg_Geometry_TriangleListPrototypeFrom name 'sg_Geometry_TriangleListPrototypeFrom',
    sg_Geometry_TrianglePrototypeFrom name 'sg_Geometry_TrianglePrototypeFrom',
    sg_Geometry_TriangleRectangleIntersect name 'sg_Geometry_TriangleRectangleIntersect',
    sg_Geometry_TriangleStripPrototypeFrom name 'sg_Geometry_TriangleStripPrototypeFrom',
    sg_Geometry_TriangleToString name 'sg_Geometry_TriangleToString',
    sg_Geometry_TrianglesRectangleIntersect name 'sg_Geometry_TrianglesRectangleIntersect',
    sg_Geometry_UnitVector name 'sg_Geometry_UnitVector',
    sg_Geometry_UpdateShapePoints name 'sg_Geometry_UpdateShapePoints',
    sg_Geometry_VectorAngle name 'sg_Geometry_VectorAngle',
    sg_Geometry_VectorFromAngle name 'sg_Geometry_VectorFromAngle',
    sg_Geometry_VectorFromPointPtToRectangle name 'sg_Geometry_VectorFromPointPtToRectangle',
    sg_Geometry_VectorFromPointToRect name 'sg_Geometry_VectorFromPointToRect',
    sg_Geometry_VectorFromPointToRectangle name 'sg_Geometry_VectorFromPointToRectangle',
    sg_Geometry_VectorFromPoints name 'sg_Geometry_VectorFromPoints',
    sg_Geometry_VectorInRect name 'sg_Geometry_VectorInRect',
    sg_Geometry_VectorInRectXY name 'sg_Geometry_VectorInRectXY',
    sg_Geometry_VectorIsZero name 'sg_Geometry_VectorIsZero',
    sg_Geometry_VectorMagnitude name 'sg_Geometry_VectorMagnitude',
    sg_Geometry_VectorMagnitudeSq name 'sg_Geometry_VectorMagnitudeSq',
    sg_Geometry_VectorMultiply name 'sg_Geometry_VectorMultiply',
    sg_Geometry_VectorNormal name 'sg_Geometry_VectorNormal',
    sg_Geometry_VectorOutOfCircleFromCircle name 'sg_Geometry_VectorOutOfCircleFromCircle',
    sg_Geometry_VectorOutOfCircleFromPoint name 'sg_Geometry_VectorOutOfCircleFromPoint',
    sg_Geometry_VectorOutOfRectFromCircle name 'sg_Geometry_VectorOutOfRectFromCircle',
    sg_Geometry_VectorOutOfRectFromPoint name 'sg_Geometry_VectorOutOfRectFromPoint',
    sg_Geometry_VectorOutOfRectFromRect name 'sg_Geometry_VectorOutOfRectFromRect',
    sg_Geometry_VectorOutOfShapeFromRect name 'sg_Geometry_VectorOutOfShapeFromRect',
    sg_Geometry_VectorOverLinesFromCircle name 'sg_Geometry_VectorOverLinesFromCircle',
    sg_Geometry_VectorTo name 'sg_Geometry_VectorTo',
    sg_Geometry_VectorToPoint name 'sg_Geometry_VectorToPoint',
    sg_Geometry_VectorsEqual name 'sg_Geometry_VectorsEqual',
    sg_Geometry_WidestPoints name 'sg_Geometry_WidestPoints',
    sg_Graphics_ClearScreenToBlack name 'sg_Graphics_ClearScreenToBlack',
    sg_Graphics_ClearScreenWithColor name 'sg_Graphics_ClearScreenWithColor',
    sg_Graphics_CurrentBmpClip name 'sg_Graphics_CurrentBmpClip',
    sg_Graphics_CurrentScreenClip name 'sg_Graphics_CurrentScreenClip',
    sg_Graphics_DrawHorizontalLine name 'sg_Graphics_DrawHorizontalLine',
    sg_Graphics_DrawHorizontalLineOnScreen name 'sg_Graphics_DrawHorizontalLineOnScreen',
    sg_Graphics_DrawHorizontalLineOnto name 'sg_Graphics_DrawHorizontalLineOnto',
    sg_Graphics_DrawLine name 'sg_Graphics_DrawLine',
    sg_Graphics_DrawLineOnScreen name 'sg_Graphics_DrawLineOnScreen',
    sg_Graphics_DrawLineOnto name 'sg_Graphics_DrawLineOnto',
    sg_Graphics_DrawLinePts name 'sg_Graphics_DrawLinePts',
    sg_Graphics_DrawLinePtsOnScreen name 'sg_Graphics_DrawLinePtsOnScreen',
    sg_Graphics_DrawLinePtsOnto name 'sg_Graphics_DrawLinePtsOnto',
    sg_Graphics_DrawLineSegment name 'sg_Graphics_DrawLineSegment',
    sg_Graphics_DrawLineSegmentOnScreen name 'sg_Graphics_DrawLineSegmentOnScreen',
    sg_Graphics_DrawLineSegmentOnto name 'sg_Graphics_DrawLineSegmentOnto',
    sg_Graphics_DrawLineSegments name 'sg_Graphics_DrawLineSegments',
    sg_Graphics_DrawOrFillCircle name 'sg_Graphics_DrawOrFillCircle',
    sg_Graphics_DrawOrFillCircleAtPointOnScreen name 'sg_Graphics_DrawOrFillCircleAtPointOnScreen',
    sg_Graphics_DrawOrFillCircleOnScreen name 'sg_Graphics_DrawOrFillCircleOnScreen',
    sg_Graphics_DrawOrFillCircleOnto name 'sg_Graphics_DrawOrFillCircleOnto',
    sg_Graphics_DrawOrFillEllipse name 'sg_Graphics_DrawOrFillEllipse',
    sg_Graphics_DrawOrFillEllipseInRect name 'sg_Graphics_DrawOrFillEllipseInRect',
    sg_Graphics_DrawOrFillEllipseInRectOnScreen name 'sg_Graphics_DrawOrFillEllipseInRectOnScreen',
    sg_Graphics_DrawOrFillEllipseInRectOnto name 'sg_Graphics_DrawOrFillEllipseInRectOnto',
    sg_Graphics_DrawOrFillEllipseOnScreen name 'sg_Graphics_DrawOrFillEllipseOnScreen',
    sg_Graphics_DrawOrFillEllipseOnto name 'sg_Graphics_DrawOrFillEllipseOnto',
    sg_Graphics_DrawOrFillPtCircle name 'sg_Graphics_DrawOrFillPtCircle',
    sg_Graphics_DrawOrFillPtCircleAtPoint name 'sg_Graphics_DrawOrFillPtCircleAtPoint',
    sg_Graphics_DrawOrFillPtCircleAtPointOnto name 'sg_Graphics_DrawOrFillPtCircleAtPointOnto',
    sg_Graphics_DrawOrFillPtCircleOnScreen name 'sg_Graphics_DrawOrFillPtCircleOnScreen',
    sg_Graphics_DrawOrFillPtCircleOnto name 'sg_Graphics_DrawOrFillPtCircleOnto',
    sg_Graphics_DrawOrFillRectangle name 'sg_Graphics_DrawOrFillRectangle',
    sg_Graphics_DrawOrFillRectangleOnScreen name 'sg_Graphics_DrawOrFillRectangleOnScreen',
    sg_Graphics_DrawOrFillRectangleOnto name 'sg_Graphics_DrawOrFillRectangleOnto',
    sg_Graphics_DrawOrFillRectangleRect name 'sg_Graphics_DrawOrFillRectangleRect',
    sg_Graphics_DrawOrFillRectangleRectOnScreen name 'sg_Graphics_DrawOrFillRectangleRectOnScreen',
    sg_Graphics_DrawOrFillRectangleRectOnto name 'sg_Graphics_DrawOrFillRectangleRectOnto',
    sg_Graphics_DrawOrFillShape name 'sg_Graphics_DrawOrFillShape',
    sg_Graphics_DrawOrFillShapeOnScreen name 'sg_Graphics_DrawOrFillShapeOnScreen',
    sg_Graphics_DrawOrFillShapeOnto name 'sg_Graphics_DrawOrFillShapeOnto',
    sg_Graphics_DrawOrFillTriangle name 'sg_Graphics_DrawOrFillTriangle',
    sg_Graphics_DrawOrFillTriangleOnScreen name 'sg_Graphics_DrawOrFillTriangleOnScreen',
    sg_Graphics_DrawOrFillTriangleOnto name 'sg_Graphics_DrawOrFillTriangleOnto',
    sg_Graphics_DrawPixel name 'sg_Graphics_DrawPixel',
    sg_Graphics_DrawPixelAtPoint name 'sg_Graphics_DrawPixelAtPoint',
    sg_Graphics_DrawPixelAtPointOnScreen name 'sg_Graphics_DrawPixelAtPointOnScreen',
    sg_Graphics_DrawPixelAtPointOnto name 'sg_Graphics_DrawPixelAtPointOnto',
    sg_Graphics_DrawPixelOnScreen name 'sg_Graphics_DrawPixelOnScreen',
    sg_Graphics_DrawPixelOnto name 'sg_Graphics_DrawPixelOnto',
    sg_Graphics_DrawShape name 'sg_Graphics_DrawShape',
    sg_Graphics_DrawShapeAsCircle name 'sg_Graphics_DrawShapeAsCircle',
    sg_Graphics_DrawShapeAsLine name 'sg_Graphics_DrawShapeAsLine',
    sg_Graphics_DrawShapeAsLineList name 'sg_Graphics_DrawShapeAsLineList',
    sg_Graphics_DrawShapeAsLineStrip name 'sg_Graphics_DrawShapeAsLineStrip',
    sg_Graphics_DrawShapeAsPoint name 'sg_Graphics_DrawShapeAsPoint',
    sg_Graphics_DrawShapeAsTriangle name 'sg_Graphics_DrawShapeAsTriangle',
    sg_Graphics_DrawShapeAsTriangleFan name 'sg_Graphics_DrawShapeAsTriangleFan',
    sg_Graphics_DrawShapeAsTriangleList name 'sg_Graphics_DrawShapeAsTriangleList',
    sg_Graphics_DrawShapeAsTriangleStrip name 'sg_Graphics_DrawShapeAsTriangleStrip',
    sg_Graphics_DrawShapeOnScreen name 'sg_Graphics_DrawShapeOnScreen',
    sg_Graphics_DrawShapeOnto name 'sg_Graphics_DrawShapeOnto',
    sg_Graphics_DrawTriangleFromPoints name 'sg_Graphics_DrawTriangleFromPoints',
    sg_Graphics_DrawTriangleFromPointsOnScreen name 'sg_Graphics_DrawTriangleFromPointsOnScreen',
    sg_Graphics_DrawTriangleFromPointsOnto name 'sg_Graphics_DrawTriangleFromPointsOnto',
    sg_Graphics_DrawVerticalLine name 'sg_Graphics_DrawVerticalLine',
    sg_Graphics_DrawVerticalLineOnScreen name 'sg_Graphics_DrawVerticalLineOnScreen',
    sg_Graphics_DrawVerticalLineOnto name 'sg_Graphics_DrawVerticalLineOnto',
    sg_Graphics_FillShape name 'sg_Graphics_FillShape',
    sg_Graphics_FillShapeOnScreen name 'sg_Graphics_FillShapeOnScreen',
    sg_Graphics_FillShapeOnto name 'sg_Graphics_FillShapeOnto',
    sg_Graphics_FillTriangleFromPoints name 'sg_Graphics_FillTriangleFromPoints',
    sg_Graphics_FillTriangleFromPointsOnScreen name 'sg_Graphics_FillTriangleFromPointsOnScreen',
    sg_Graphics_FillTriangleFromPointsOnto name 'sg_Graphics_FillTriangleFromPointsOnto',
    sg_Graphics_GetPixel name 'sg_Graphics_GetPixel',
    sg_Graphics_GetPixelFromScreen name 'sg_Graphics_GetPixelFromScreen',
    sg_Graphics_PopClipBmp name 'sg_Graphics_PopClipBmp',
    sg_Graphics_PopClipScreen name 'sg_Graphics_PopClipScreen',
    sg_Graphics_PushClipRect name 'sg_Graphics_PushClipRect',
    sg_Graphics_PushClipRectForBitmap name 'sg_Graphics_PushClipRectForBitmap',
    sg_Graphics_PushClipXY name 'sg_Graphics_PushClipXY',
    sg_Graphics_PutPixel name 'sg_Graphics_PutPixel',
    sg_Graphics_ResetClip name 'sg_Graphics_ResetClip',
    sg_Graphics_ResetClipForBitmap name 'sg_Graphics_ResetClipForBitmap',
    sg_Graphics_SetBmpClip name 'sg_Graphics_SetBmpClip',
    sg_Graphics_SetBmpClipXY name 'sg_Graphics_SetBmpClipXY',
    sg_Graphics_SetClip name 'sg_Graphics_SetClip',
    sg_Graphics_SetClipXY name 'sg_Graphics_SetClipXY',
    sg_Images_BitmapCellCircle name 'sg_Images_BitmapCellCircle',
    sg_Images_BitmapCellCircleXY name 'sg_Images_BitmapCellCircleXY',
    sg_Images_BitmapCellColumns name 'sg_Images_BitmapCellColumns',
    sg_Images_BitmapCellCount name 'sg_Images_BitmapCellCount',
    sg_Images_BitmapCellHeight name 'sg_Images_BitmapCellHeight',
    sg_Images_BitmapCellOf name 'sg_Images_BitmapCellOf',
    sg_Images_BitmapCellRectangle name 'sg_Images_BitmapCellRectangle',
    sg_Images_BitmapCellRectangleAtOrigin name 'sg_Images_BitmapCellRectangleAtOrigin',
    sg_Images_BitmapCellRectangleXY name 'sg_Images_BitmapCellRectangleXY',
    sg_Images_BitmapCellRows name 'sg_Images_BitmapCellRows',
    sg_Images_BitmapCellWidth name 'sg_Images_BitmapCellWidth',
    sg_Images_BitmapCircle name 'sg_Images_BitmapCircle',
    sg_Images_BitmapCircleXY name 'sg_Images_BitmapCircleXY',
    sg_Images_BitmapHeight name 'sg_Images_BitmapHeight',
    sg_Images_BitmapHeightForCell name 'sg_Images_BitmapHeightForCell',
    sg_Images_BitmapName name 'sg_Images_BitmapName',
    sg_Images_BitmapNamed name 'sg_Images_BitmapNamed',
    sg_Images_BitmapRectAtOrigin name 'sg_Images_BitmapRectAtOrigin',
    sg_Images_BitmapRectXY name 'sg_Images_BitmapRectXY',
    sg_Images_BitmapRectangleOfCell name 'sg_Images_BitmapRectangleOfCell',
    sg_Images_BitmapSetCellDetails name 'sg_Images_BitmapSetCellDetails',
    sg_Images_BitmapWidth name 'sg_Images_BitmapWidth',
    sg_Images_BitmapWidthForCell name 'sg_Images_BitmapWidthForCell',
    sg_Images_BitmapfileName name 'sg_Images_BitmapfileName',
    sg_Images_BitmapsInterchangable name 'sg_Images_BitmapsInterchangable',
    sg_Images_ClearSurface name 'sg_Images_ClearSurface',
    sg_Images_ClearSurfaceToBlack name 'sg_Images_ClearSurfaceToBlack',
    sg_Images_CreateBitmap name 'sg_Images_CreateBitmap',
    sg_Images_DrawBitmap name 'sg_Images_DrawBitmap',
    sg_Images_DrawBitmapAtPoint name 'sg_Images_DrawBitmapAtPoint',
    sg_Images_DrawBitmapAtPointOnScreen name 'sg_Images_DrawBitmapAtPointOnScreen',
    sg_Images_DrawBitmapAtPointOnto name 'sg_Images_DrawBitmapAtPointOnto',
    sg_Images_DrawBitmapCell name 'sg_Images_DrawBitmapCell',
    sg_Images_DrawBitmapCellAtPoint name 'sg_Images_DrawBitmapCellAtPoint',
    sg_Images_DrawBitmapCellAtPointOnScreen name 'sg_Images_DrawBitmapCellAtPointOnScreen',
    sg_Images_DrawBitmapCellAtPointOnto name 'sg_Images_DrawBitmapCellAtPointOnto',
    sg_Images_DrawBitmapCellOnScreen name 'sg_Images_DrawBitmapCellOnScreen',
    sg_Images_DrawBitmapCellOnto name 'sg_Images_DrawBitmapCellOnto',
    sg_Images_DrawBitmapOnScreen name 'sg_Images_DrawBitmapOnScreen',
    sg_Images_DrawBitmapOnto name 'sg_Images_DrawBitmapOnto',
    sg_Images_DrawBitmapPart name 'sg_Images_DrawBitmapPart',
    sg_Images_DrawBitmapPartFromRect name 'sg_Images_DrawBitmapPartFromRect',
    sg_Images_DrawBitmapPartFromRectAtPoint name 'sg_Images_DrawBitmapPartFromRectAtPoint',
    sg_Images_DrawBitmapPartFromRectAtPointOnScreen name 'sg_Images_DrawBitmapPartFromRectAtPointOnScreen',
    sg_Images_DrawBitmapPartFromRectAtPointOnto name 'sg_Images_DrawBitmapPartFromRectAtPointOnto',
    sg_Images_DrawBitmapPartFromRectOnScreen name 'sg_Images_DrawBitmapPartFromRectOnScreen',
    sg_Images_DrawBitmapPartFromRectOnto name 'sg_Images_DrawBitmapPartFromRectOnto',
    sg_Images_DrawBitmapPartOnScreen name 'sg_Images_DrawBitmapPartOnScreen',
    sg_Images_DrawBitmapPartOnto name 'sg_Images_DrawBitmapPartOnto',
    sg_Images_DrawCell name 'sg_Images_DrawCell',
    sg_Images_DrawCellOnScreen name 'sg_Images_DrawCellOnScreen',
    sg_Images_DrawCellOnScreenXY name 'sg_Images_DrawCellOnScreenXY',
    sg_Images_DrawCellOnto name 'sg_Images_DrawCellOnto',
    sg_Images_DrawCellOntoXY name 'sg_Images_DrawCellOntoXY',
    sg_Images_DrawCellXY name 'sg_Images_DrawCellXY',
    sg_Images_FreeBitmap name 'sg_Images_FreeBitmap',
    sg_Images_HasBitmap name 'sg_Images_HasBitmap',
    sg_Images_LoadBitmap name 'sg_Images_LoadBitmap',
    sg_Images_LoadBitmapWithTransparentColor name 'sg_Images_LoadBitmapWithTransparentColor',
    sg_Images_MakeOpaque name 'sg_Images_MakeOpaque',
    sg_Images_MakeTransparent name 'sg_Images_MakeTransparent',
    sg_Images_MapBitmap name 'sg_Images_MapBitmap',
    sg_Images_MapTransparentBitmap name 'sg_Images_MapTransparentBitmap',
    sg_Images_OptimiseBitmap name 'sg_Images_OptimiseBitmap',
    sg_Images_PixelDrawnAtPoint name 'sg_Images_PixelDrawnAtPoint',
    sg_Images_ReleaseAllBitmaps name 'sg_Images_ReleaseAllBitmaps',
    sg_Images_ReleaseBitmap name 'sg_Images_ReleaseBitmap',
    sg_Images_RotateScaleBitmap name 'sg_Images_RotateScaleBitmap',
    sg_Images_SameBitmapCell name 'sg_Images_SameBitmapCell',
    sg_Images_SaveBitmap name 'sg_Images_SaveBitmap',
    sg_Images_SaveToPNG name 'sg_Images_SaveToPNG',
    sg_Images_SetOpacity name 'sg_Images_SetOpacity',
    sg_Images_SetTransparentColor name 'sg_Images_SetTransparentColor',
    sg_Images_SetupBitmapForCollisions name 'sg_Images_SetupBitmapForCollisions',
    sg_Input_AnyKeyPressed name 'sg_Input_AnyKeyPressed',
    sg_Input_EndReadingText name 'sg_Input_EndReadingText',
    sg_Input_HideMouse name 'sg_Input_HideMouse',
    sg_Input_KeyDown name 'sg_Input_KeyDown',
    sg_Input_KeyName name 'sg_Input_KeyName',
    sg_Input_KeyTyped name 'sg_Input_KeyTyped',
    sg_Input_MouseClicked name 'sg_Input_MouseClicked',
    sg_Input_MouseDown name 'sg_Input_MouseDown',
    sg_Input_MouseMovement name 'sg_Input_MouseMovement',
    sg_Input_MousePosition name 'sg_Input_MousePosition',
    sg_Input_MousePositionAsVector name 'sg_Input_MousePositionAsVector',
    sg_Input_MouseShown name 'sg_Input_MouseShown',
    sg_Input_MouseUp name 'sg_Input_MouseUp',
    sg_Input_MouseX name 'sg_Input_MouseX',
    sg_Input_MouseY name 'sg_Input_MouseY',
    sg_Input_MoveMouse name 'sg_Input_MoveMouse',
    sg_Input_MoveMouseToPoint name 'sg_Input_MoveMouseToPoint',
    sg_Input_ReadingText name 'sg_Input_ReadingText',
    sg_Input_SetMouseVisible name 'sg_Input_SetMouseVisible',
    sg_Input_ShowMouse name 'sg_Input_ShowMouse',
    sg_Input_StartReadingText name 'sg_Input_StartReadingText',
    sg_Input_StartReadingTextWithText name 'sg_Input_StartReadingTextWithText',
    sg_Input_StartReadingTextWithTextAtPt name 'sg_Input_StartReadingTextWithTextAtPt',
    sg_Input_StartReadingTextWithTextInArea name 'sg_Input_StartReadingTextWithTextInArea',
    sg_Input_StartReadingTextWithinArea name 'sg_Input_StartReadingTextWithinArea',
    sg_Input_TextEntryCancelled name 'sg_Input_TextEntryCancelled',
    sg_Input_TextReadAsASCII name 'sg_Input_TextReadAsASCII',
    sg_Physics_BitmapAtPointsCollision name 'sg_Physics_BitmapAtPointsCollision',
    sg_Physics_BitmapCollision name 'sg_Physics_BitmapCollision',
    sg_Physics_BitmapPartAtPtRectCollision name 'sg_Physics_BitmapPartAtPtRectCollision',
    sg_Physics_BitmapPartRectCollision name 'sg_Physics_BitmapPartRectCollision',
    sg_Physics_BitmapPointCollision name 'sg_Physics_BitmapPointCollision',
    sg_Physics_BitmapPointCollisionPart name 'sg_Physics_BitmapPointCollisionPart',
    sg_Physics_BitmapPointPtCollision name 'sg_Physics_BitmapPointPtCollision',
    sg_Physics_BitmapPointXYCollisionPart name 'sg_Physics_BitmapPointXYCollisionPart',
    sg_Physics_BitmapRectCollision name 'sg_Physics_BitmapRectCollision',
    sg_Physics_BitmapRectangleCollision name 'sg_Physics_BitmapRectangleCollision',
    sg_Physics_BitmapsPartsCollision name 'sg_Physics_BitmapsPartsCollision',
    sg_Physics_CellBitmapCollision name 'sg_Physics_CellBitmapCollision',
    sg_Physics_CellBitmapCollisionAtPt name 'sg_Physics_CellBitmapCollisionAtPt',
    sg_Physics_CellBitmapPartCollision name 'sg_Physics_CellBitmapPartCollision',
    sg_Physics_CellBitmapPartCollisionAtPt name 'sg_Physics_CellBitmapPartCollisionAtPt',
    sg_Physics_CellCollision name 'sg_Physics_CellCollision',
    sg_Physics_CellCollisionAtPt name 'sg_Physics_CellCollisionAtPt',
    sg_Physics_CellRectCollision name 'sg_Physics_CellRectCollision',
    sg_Physics_CellRectCollisionAtPt name 'sg_Physics_CellRectCollisionAtPt',
    sg_Physics_CircleCircleCollision name 'sg_Physics_CircleCircleCollision',
    sg_Physics_CircleLinesCollision name 'sg_Physics_CircleLinesCollision',
    sg_Physics_CircleRectCollision name 'sg_Physics_CircleRectCollision',
    sg_Physics_CircleTriangleCollision name 'sg_Physics_CircleTriangleCollision',
    sg_Physics_CollideCircleCircle name 'sg_Physics_CollideCircleCircle',
    sg_Physics_CollideCircleLine name 'sg_Physics_CollideCircleLine',
    sg_Physics_CollideCircleLines name 'sg_Physics_CollideCircleLines',
    sg_Physics_CollideCircleRectangle name 'sg_Physics_CollideCircleRectangle',
    sg_Physics_CollideCircles name 'sg_Physics_CollideCircles',
    sg_Physics_RectLineCollision name 'sg_Physics_RectLineCollision',
    sg_Physics_SideForCollisionTest name 'sg_Physics_SideForCollisionTest',
    sg_Physics_SpriteBitmapAtPointCollision name 'sg_Physics_SpriteBitmapAtPointCollision',
    sg_Physics_SpriteBitmapCollision name 'sg_Physics_SpriteBitmapCollision',
    sg_Physics_SpriteCircleLineCollision name 'sg_Physics_SpriteCircleLineCollision',
    sg_Physics_SpriteCollision name 'sg_Physics_SpriteCollision',
    sg_Physics_SpriteRectCollision name 'sg_Physics_SpriteRectCollision',
    sg_Physics_SpriteRectLineCollision name 'sg_Physics_SpriteRectLineCollision',
    sg_Physics_SpriteRectangleCollision name 'sg_Physics_SpriteRectangleCollision',
    sg_Physics_SpriteShapeCollision name 'sg_Physics_SpriteShapeCollision',
    sg_Physics_TriangleLineCollision name 'sg_Physics_TriangleLineCollision',
    sg_Resources_AppPath name 'sg_Resources_AppPath',
    sg_Resources_FilenameToResource name 'sg_Resources_FilenameToResource',
    sg_Resources_HasResourceBundle name 'sg_Resources_HasResourceBundle',
    sg_Resources_LoadResourceBundle name 'sg_Resources_LoadResourceBundle',
    sg_Resources_MapResourceBundle name 'sg_Resources_MapResourceBundle',
    sg_Resources_PathToOtherResource name 'sg_Resources_PathToOtherResource',
    sg_Resources_PathToOtherResourceWithBase name 'sg_Resources_PathToOtherResourceWithBase',
    sg_Resources_PathToResource name 'sg_Resources_PathToResource',
    sg_Resources_PathToResourceWithBase name 'sg_Resources_PathToResourceWithBase',
    sg_Resources_PathToResourceWithSubPaths name 'sg_Resources_PathToResourceWithSubPaths',
    sg_Resources_RegisterFreeNotifier name 'sg_Resources_RegisterFreeNotifier',
    sg_Resources_ReleaseAllResources name 'sg_Resources_ReleaseAllResources',
    sg_Resources_ReleaseResourceBundle name 'sg_Resources_ReleaseResourceBundle',
    sg_Resources_SetAppPath name 'sg_Resources_SetAppPath',
    sg_Resources_SetAppPathWithExe name 'sg_Resources_SetAppPathWithExe',
    sg_Resources_ShowLogos name 'sg_Resources_ShowLogos',
    sg_Sprites_CenterPoint name 'sg_Sprites_CenterPoint',
    sg_Sprites_CreateBasicSprite name 'sg_Sprites_CreateBasicSprite',
    sg_Sprites_CreateLayeredSprite name 'sg_Sprites_CreateLayeredSprite',
    sg_Sprites_CreateLayeredSpriteWithAnimationTemplate name 'sg_Sprites_CreateLayeredSpriteWithAnimationTemplate',
    sg_Sprites_CreateLayeredSpriteWithLayerNames name 'sg_Sprites_CreateLayeredSpriteWithLayerNames',
    sg_Sprites_CreateLayeredSpriteWithLayerNamesAndAnimationTemplate name 'sg_Sprites_CreateLayeredSpriteWithLayerNamesAndAnimationTemplate',
    sg_Sprites_CreateSpriteWithAnimation name 'sg_Sprites_CreateSpriteWithAnimation',
    sg_Sprites_CreateSpriteWithLayer name 'sg_Sprites_CreateSpriteWithLayer',
    sg_Sprites_CreateSpriteWithLayerAndAnimation name 'sg_Sprites_CreateSpriteWithLayerAndAnimation',
    sg_Sprites_DrawSpriteOffsetPoint name 'sg_Sprites_DrawSpriteOffsetPoint',
    sg_Sprites_DrawSpriteOffsetXY name 'sg_Sprites_DrawSpriteOffsetXY',
    sg_Sprites_FreeSprite name 'sg_Sprites_FreeSprite',
    sg_Sprites_IsSpriteOffscreen name 'sg_Sprites_IsSpriteOffscreen',
    sg_Sprites_MoveSprite name 'sg_Sprites_MoveSprite',
    sg_Sprites_MoveSpriteTo name 'sg_Sprites_MoveSpriteTo',
    sg_Sprites_MoveSpriteVecPct name 'sg_Sprites_MoveSpriteVecPct',
    sg_Sprites_ReplayAnimationWithSound name 'sg_Sprites_ReplayAnimationWithSound',
    sg_Sprites_SpriteAddLayer name 'sg_Sprites_SpriteAddLayer',
    sg_Sprites_SpriteAddValue name 'sg_Sprites_SpriteAddValue',
    sg_Sprites_SpriteAddValueWithInitialValue name 'sg_Sprites_SpriteAddValueWithInitialValue',
    sg_Sprites_SpriteAnimationHasEnded name 'sg_Sprites_SpriteAnimationHasEnded',
    sg_Sprites_SpriteBringLayerForward name 'sg_Sprites_SpriteBringLayerForward',
    sg_Sprites_SpriteBringLayerToFront name 'sg_Sprites_SpriteBringLayerToFront',
    sg_Sprites_SpriteCircle name 'sg_Sprites_SpriteCircle',
    sg_Sprites_SpriteCollisionBitmap name 'sg_Sprites_SpriteCollisionBitmap',
    sg_Sprites_SpriteCollisionCircle name 'sg_Sprites_SpriteCollisionCircle',
    sg_Sprites_SpriteCollisionKind name 'sg_Sprites_SpriteCollisionKind',
    sg_Sprites_SpriteCollisionRectangle name 'sg_Sprites_SpriteCollisionRectangle',
    sg_Sprites_SpriteCurrentCell name 'sg_Sprites_SpriteCurrentCell',
    sg_Sprites_SpriteCurrentCellRectangle name 'sg_Sprites_SpriteCurrentCellRectangle',
    sg_Sprites_SpriteDX name 'sg_Sprites_SpriteDX',
    sg_Sprites_SpriteDY name 'sg_Sprites_SpriteDY',
    sg_Sprites_SpriteHeading name 'sg_Sprites_SpriteHeading',
    sg_Sprites_SpriteHeight name 'sg_Sprites_SpriteHeight',
    sg_Sprites_SpriteHideLayer name 'sg_Sprites_SpriteHideLayer',
    sg_Sprites_SpriteHideLayerNamed name 'sg_Sprites_SpriteHideLayerNamed',
    sg_Sprites_SpriteLayerAtIdx name 'sg_Sprites_SpriteLayerAtIdx',
    sg_Sprites_SpriteLayerCircle name 'sg_Sprites_SpriteLayerCircle',
    sg_Sprites_SpriteLayerCount name 'sg_Sprites_SpriteLayerCount',
    sg_Sprites_SpriteLayerHeight name 'sg_Sprites_SpriteLayerHeight',
    sg_Sprites_SpriteLayerIndex name 'sg_Sprites_SpriteLayerIndex',
    sg_Sprites_SpriteLayerName name 'sg_Sprites_SpriteLayerName',
    sg_Sprites_SpriteLayerNamed name 'sg_Sprites_SpriteLayerNamed',
    sg_Sprites_SpriteLayerNamedCircle name 'sg_Sprites_SpriteLayerNamedCircle',
    sg_Sprites_SpriteLayerNamedHeight name 'sg_Sprites_SpriteLayerNamedHeight',
    sg_Sprites_SpriteLayerNamedRectangle name 'sg_Sprites_SpriteLayerNamedRectangle',
    sg_Sprites_SpriteLayerNamedWidth name 'sg_Sprites_SpriteLayerNamedWidth',
    sg_Sprites_SpriteLayerOffset name 'sg_Sprites_SpriteLayerOffset',
    sg_Sprites_SpriteLayerOffsetNamed name 'sg_Sprites_SpriteLayerOffsetNamed',
    sg_Sprites_SpriteLayerOffsets name 'sg_Sprites_SpriteLayerOffsets',
    sg_Sprites_SpriteLayerRectangle name 'sg_Sprites_SpriteLayerRectangle',
    sg_Sprites_SpriteLayerWidth name 'sg_Sprites_SpriteLayerWidth',
    sg_Sprites_SpriteLayers name 'sg_Sprites_SpriteLayers',
    sg_Sprites_SpriteMass name 'sg_Sprites_SpriteMass',
    sg_Sprites_SpriteOnScreenAt name 'sg_Sprites_SpriteOnScreenAt',
    sg_Sprites_SpriteOnScreenAtPoint name 'sg_Sprites_SpriteOnScreenAtPoint',
    sg_Sprites_SpritePosition name 'sg_Sprites_SpritePosition',
    sg_Sprites_SpriteReplayAnimation name 'sg_Sprites_SpriteReplayAnimation',
    sg_Sprites_SpriteRotation name 'sg_Sprites_SpriteRotation',
    sg_Sprites_SpriteScale name 'sg_Sprites_SpriteScale',
    sg_Sprites_SpriteScreenRectangle name 'sg_Sprites_SpriteScreenRectangle',
    sg_Sprites_SpriteSendLayerBackward name 'sg_Sprites_SpriteSendLayerBackward',
    sg_Sprites_SpriteSendLayerToBack name 'sg_Sprites_SpriteSendLayerToBack',
    sg_Sprites_SpriteSetCollisionBitmap name 'sg_Sprites_SpriteSetCollisionBitmap',
    sg_Sprites_SpriteSetCollisionKind name 'sg_Sprites_SpriteSetCollisionKind',
    sg_Sprites_SpriteSetDX name 'sg_Sprites_SpriteSetDX',
    sg_Sprites_SpriteSetDY name 'sg_Sprites_SpriteSetDY',
    sg_Sprites_SpriteSetHeading name 'sg_Sprites_SpriteSetHeading',
    sg_Sprites_SpriteSetLayerOffset name 'sg_Sprites_SpriteSetLayerOffset',
    sg_Sprites_SpriteSetLayerOffsetNamed name 'sg_Sprites_SpriteSetLayerOffsetNamed',
    sg_Sprites_SpriteSetLayerOffsets name 'sg_Sprites_SpriteSetLayerOffsets',
    sg_Sprites_SpriteSetMass name 'sg_Sprites_SpriteSetMass',
    sg_Sprites_SpriteSetPosition name 'sg_Sprites_SpriteSetPosition',
    sg_Sprites_SpriteSetRotation name 'sg_Sprites_SpriteSetRotation',
    sg_Sprites_SpriteSetScale name 'sg_Sprites_SpriteSetScale',
    sg_Sprites_SpriteSetSpeed name 'sg_Sprites_SpriteSetSpeed',
    sg_Sprites_SpriteSetValue name 'sg_Sprites_SpriteSetValue',
    sg_Sprites_SpriteSetValueNamed name 'sg_Sprites_SpriteSetValueNamed',
    sg_Sprites_SpriteSetVelocity name 'sg_Sprites_SpriteSetVelocity',
    sg_Sprites_SpriteSetX name 'sg_Sprites_SpriteSetX',
    sg_Sprites_SpriteSetY name 'sg_Sprites_SpriteSetY',
    sg_Sprites_SpriteShowLayer name 'sg_Sprites_SpriteShowLayer',
    sg_Sprites_SpriteShowLayerNamed name 'sg_Sprites_SpriteShowLayerNamed',
    sg_Sprites_SpriteSpeed name 'sg_Sprites_SpriteSpeed',
    sg_Sprites_SpriteStartAnimation name 'sg_Sprites_SpriteStartAnimation',
    sg_Sprites_SpriteStartAnimationNamed name 'sg_Sprites_SpriteStartAnimationNamed',
    sg_Sprites_SpriteStartAnimationNamedWithSound name 'sg_Sprites_SpriteStartAnimationNamedWithSound',
    sg_Sprites_SpriteStartAnimationWithSound name 'sg_Sprites_SpriteStartAnimationWithSound',
    sg_Sprites_SpriteToggleLayerNamedVisible name 'sg_Sprites_SpriteToggleLayerNamedVisible',
    sg_Sprites_SpriteToggleLayerVisible name 'sg_Sprites_SpriteToggleLayerVisible',
    sg_Sprites_SpriteValue name 'sg_Sprites_SpriteValue',
    sg_Sprites_SpriteValueCount name 'sg_Sprites_SpriteValueCount',
    sg_Sprites_SpriteValueNamed name 'sg_Sprites_SpriteValueNamed',
    sg_Sprites_SpriteValueNames name 'sg_Sprites_SpriteValueNames',
    sg_Sprites_SpriteVelocity name 'sg_Sprites_SpriteVelocity',
    sg_Sprites_SpriteVisibleIndexOfLayer name 'sg_Sprites_SpriteVisibleIndexOfLayer',
    sg_Sprites_SpriteVisibleIndexOfLayerNamed name 'sg_Sprites_SpriteVisibleIndexOfLayerNamed',
    sg_Sprites_SpriteVisibleLayer name 'sg_Sprites_SpriteVisibleLayer',
    sg_Sprites_SpriteVisibleLayerCount name 'sg_Sprites_SpriteVisibleLayerCount',
    sg_Sprites_SpriteVisibleLayerIds name 'sg_Sprites_SpriteVisibleLayerIds',
    sg_Sprites_SpriteWidth name 'sg_Sprites_SpriteWidth',
    sg_Sprites_SpriteX name 'sg_Sprites_SpriteX',
    sg_Sprites_SpriteY name 'sg_Sprites_SpriteY',
    sg_Sprites_UpdateSpriteAnimationPctWithSound name 'sg_Sprites_UpdateSpriteAnimationPctWithSound',
    sg_Sprites_UpdateSpritePctWithSound name 'sg_Sprites_UpdateSpritePctWithSound',
    sg_Sprites_VectorFromCenterSpriteToPoint name 'sg_Sprites_VectorFromCenterSpriteToPoint',
    sg_Sprites_VectorFromTo name 'sg_Sprites_VectorFromTo',
    sg_Text_DrawFrameRateWithSimpleFont name 'sg_Text_DrawFrameRateWithSimpleFont',
    sg_Text_DrawFramerate name 'sg_Text_DrawFramerate',
    sg_Text_DrawSimpleText name 'sg_Text_DrawSimpleText',
    sg_Text_DrawSimpleTextOnBitmap name 'sg_Text_DrawSimpleTextOnBitmap',
    sg_Text_DrawSimpleTextOnScreen name 'sg_Text_DrawSimpleTextOnScreen',
    sg_Text_DrawSimpleTextPt name 'sg_Text_DrawSimpleTextPt',
    sg_Text_DrawText name 'sg_Text_DrawText',
    sg_Text_DrawTextAtPoint name 'sg_Text_DrawTextAtPoint',
    sg_Text_DrawTextLines name 'sg_Text_DrawTextLines',
    sg_Text_DrawTextLinesInRect name 'sg_Text_DrawTextLinesInRect',
    sg_Text_DrawTextLinesInRectOnBitmap name 'sg_Text_DrawTextLinesInRectOnBitmap',
    sg_Text_DrawTextLinesInRectOnScreen name 'sg_Text_DrawTextLinesInRectOnScreen',
    sg_Text_DrawTextLinesOnBitmap name 'sg_Text_DrawTextLinesOnBitmap',
    sg_Text_DrawTextLinesOnScreen name 'sg_Text_DrawTextLinesOnScreen',
    sg_Text_DrawTextOnBitmap name 'sg_Text_DrawTextOnBitmap',
    sg_Text_DrawTextOnBitmapAtPoint name 'sg_Text_DrawTextOnBitmapAtPoint',
    sg_Text_DrawTextOnScreen name 'sg_Text_DrawTextOnScreen',
    sg_Text_DrawTextOnScreenAtPoint name 'sg_Text_DrawTextOnScreenAtPoint',
    sg_Text_FontFontStyle name 'sg_Text_FontFontStyle',
    sg_Text_FontNameFor name 'sg_Text_FontNameFor',
    sg_Text_FontNamed name 'sg_Text_FontNamed',
    sg_Text_FontNamedWithSize name 'sg_Text_FontNamedWithSize',
    sg_Text_FontSetStyle name 'sg_Text_FontSetStyle',
    sg_Text_FreeFont name 'sg_Text_FreeFont',
    sg_Text_HasFont name 'sg_Text_HasFont',
    sg_Text_LoadFont name 'sg_Text_LoadFont',
    sg_Text_MapFont name 'sg_Text_MapFont',
    sg_Text_ReleaseAllFonts name 'sg_Text_ReleaseAllFonts',
    sg_Text_ReleaseFont name 'sg_Text_ReleaseFont',
    sg_Text_TextAlignmentFrom name 'sg_Text_TextAlignmentFrom',
    sg_Text_TextHeight name 'sg_Text_TextHeight',
    sg_Text_TextWidth name 'sg_Text_TextWidth',
    sg_Timers_CreateTimer name 'sg_Timers_CreateTimer',
    sg_Timers_FreeTimer name 'sg_Timers_FreeTimer',
    sg_Timers_PauseTimer name 'sg_Timers_PauseTimer',
    sg_Timers_ResetTimer name 'sg_Timers_ResetTimer',
    sg_Timers_ResumeTimer name 'sg_Timers_ResumeTimer',
    sg_Timers_StartTimer name 'sg_Timers_StartTimer',
    sg_Timers_StopTimer name 'sg_Timers_StopTimer',
    sg_Timers_TimerTicks name 'sg_Timers_TimerTicks';end.
