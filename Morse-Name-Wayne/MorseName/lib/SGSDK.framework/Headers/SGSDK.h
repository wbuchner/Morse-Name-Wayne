/*
* Generated by SGWrapperGen - DO NOT EDIT!
*
* SwinGame wrapper for C
*
* Link with the SGSDK library (SGSDK.dll, libSGSDK.so, or libSGSDK.dylib)
*/

#ifndef SGSDK
#define SGSDK
#include "Types.h"

int sg_Animation_AnimationCurrentCell(void *anim);
int sg_Animation_AnimationEnded(void *anim);
int sg_Animation_AnimationEnteredFrame(void *anim);
float sg_Animation_AnimationFrameTime(void *anim);
int sg_Animation_AnimationIndex(void *temp, char *name);
void sg_Animation_AnimationName(void *temp, int idx, char *result);
animation_template sg_Animation_AnimationTemplateNamed(char *name);
void sg_Animation_AssignAnimation(void *anim, int idx, void *frames);
void sg_Animation_AssignAnimationNamed(void *anim, char *name, void *frames);
void sg_Animation_AssignAnimationNamedWithSound(void *anim, char *name, void *frames, int withSound);
void sg_Animation_AssignAnimationWithSound(void *anim, int idx, void *frames, int withSound);
animation sg_Animation_CreateAnimation(int identifier, void *frames, int withSound);
animation sg_Animation_CreateAnimationNamed(char *identifier, void *frames);
animation sg_Animation_CreateAnimationNamedWithSound(char *identifier, void *frames, int withSound);
animation sg_Animation_CreateAnimationWithSound(int identifier, void *frames);
void sg_Animation_DrawAnimation(void *ani, void *bmp, int x, int y);
void sg_Animation_DrawAnimationAtPoint(void *ani, void *bmp, point2d *pt);
void sg_Animation_DrawAnimationOnScreen(void *ani, void *bmp, int x, int y);
void sg_Animation_DrawAnimationOnScreenAtPt(void *ani, void *bmp, point2d *pt);
void sg_Animation_DrawAnimationOntoDest(void *dest, void *ani, void *bmp, int x, int y);
void sg_Animation_DrawAnimationOntoDestAtPt(void *dest, void *ani, void *bmp, point2d *pt);
void sg_Animation_FreeAnimation(animation ani);
void sg_Animation_FreeAnimationTemplate(animation_template framesToFree);
int sg_Animation_HasAnimationTemplate(char *name);
animation_template sg_Animation_LoadAnimationTemplate(char *filename);
animation_template sg_Animation_MapAnimationTemplate(char *name, char *filename);
void sg_Animation_ReleaseAllAnimationTemplates();
void sg_Animation_ReleaseAnimationTemplate(char *name);
void sg_Animation_ResetAnimation(void *anim);
void sg_Animation_ResetAnimationWithSound(void *anim, int withSound);
void sg_Animation_UpdateAnimation(void *anim);
void sg_Animation_UpdateAnimationPct(void *anim, float pct);
void sg_Animation_UpdateAnimationPctAndSound(void *anim, float pct, int withSound);
int sg_Audio_AudioReady();
void sg_Audio_CloseAudio();
void sg_Audio_FadeMusicIn(void *mus, int ms);
void sg_Audio_FadeMusicInWithLoops(void *mus, int loops, int ms);
void sg_Audio_FadeMusicOut(int ms);
void sg_Audio_FreeMusic(music *mus);
void sg_Audio_FreeSoundEffect(sound_effect *effect);
int sg_Audio_HasMusic(char *name);
int sg_Audio_HasSoundEffect(char *name);
music sg_Audio_LoadMusic(char *filename);
sound_effect sg_Audio_LoadSoundEffect(char *filename);
music sg_Audio_MapMusic(char *name, char *filename);
sound_effect sg_Audio_MapSoundEffect(char *name, char *filename);
void sg_Audio_MusicFilename(void *mus, char *result);
void sg_Audio_MusicName(void *mus, char *result);
music sg_Audio_MusicNamed(char *name);
int sg_Audio_MusicPlaying();
float sg_Audio_MusicVolume();
void sg_Audio_OpenAudio();
void sg_Audio_PlayMusicWithLoops(void *mus, int loops);
void sg_Audio_PlaySoundEffectWithLoopAndVolume(void *effect, int loops, float vol);
void sg_Audio_ReleaseAllMusic();
void sg_Audio_ReleaseAllSoundEffects();
void sg_Audio_ReleaseMusic(char *name);
void sg_Audio_ReleaseSoundEffect(char *name);
void sg_Audio_SetMusicVolume(float value);
void sg_Audio_SoundEffectFilename(void *effect, char *result);
void sg_Audio_SoundEffectName(void *effect, char *result);
sound_effect sg_Audio_SoundEffectNamed(char *name);
int sg_Audio_SoundEffectPlaying(void *effect);
void sg_Audio_StopMusic();
void sg_Audio_StopSoundEffect(void *effect);
int sg_Audio_TryOpenAudio();
point2d sg_Camera_CameraPos();
rectangle sg_Camera_CameraScreenRect();
float sg_Camera_CameraX();
float sg_Camera_CameraY();
void sg_Camera_CenterCameraOn(void *s, vector *offset);
void sg_Camera_CenterCameraOnCharacter(void *c, vector *offset);
void sg_Camera_CenterCameraOnWithXYOffset(void *s, int offsetX, int offsetY);
void sg_Camera_MoveCameraBy(vector *offset);
void sg_Camera_MoveCameraByXY(float dx, float dy);
void sg_Camera_MoveCameraTo(point2d *pt);
void sg_Camera_MoveCameraToXY(float x, float y);
int sg_Camera_PointOnScreen(point2d *pt);
int sg_Camera_RectOnScreen(rectangle *rect);
void sg_Camera_SetCameraPos(point2d *value);
void sg_Camera_SetCameraX(float value);
void sg_Camera_SetCameraY(float value);
point2d sg_Camera_ToScreen(point2d *worldPoint);
rectangle sg_Camera_ToScreenRect(rectangle *rect);
int sg_Camera_ToScreenX(float worldX);
int sg_Camera_ToScreenY(float worldY);
point2d sg_Camera_ToWorld(point2d *screenPoint);
float sg_Camera_ToWorldX(int screenX);
float sg_Camera_ToWorldY(int screenY);
unsigned char sg_Core_BlueOf(unsigned int c);
float sg_Core_BrightnessOf(unsigned int c);
void sg_Core_CalculateFramerate(char *average, char *highest, char *lowest, unsigned int *textColor);
void sg_Core_ChangeScreenSize(int width, int height);
void sg_Core_ColorComponents(unsigned int c, unsigned char *r, unsigned char *g, unsigned char *b, unsigned char *a);
unsigned int sg_Core_ColorFromBitmap(void *bmp, unsigned int apiColor);
void sg_Core_ColorToString(unsigned int c, char *result);
void sg_Core_Delay(unsigned int time);
void sg_Core_ExceptionMessage(char *result);
int sg_Core_ExceptionOccured();
int sg_Core_GetFramerate();
unsigned int sg_Core_GetTicks();
unsigned char sg_Core_GreenOf(unsigned int c);
unsigned int sg_Core_HSBColor(float hue, float saturation, float brightness);
void sg_Core_HSBValuesOf(unsigned int c, float *h, float *s, float *b);
float sg_Core_HueOf(unsigned int c);
void sg_Core_OpenGraphicsWindow(char *caption, int width, int height);
void sg_Core_ProcessEvents();
unsigned int sg_Core_RGBAColor(unsigned char red, unsigned char green, unsigned char blue, unsigned char alpha);
unsigned int sg_Core_RGBAFloatColor(float r, float g, float b, float a);
unsigned int sg_Core_RGBFloatColor(float r, float g, float b);
unsigned int sg_Core_RandomColor();
unsigned int sg_Core_RandomRGBColor(unsigned char alpha);
unsigned char sg_Core_RedOf(unsigned int c);
void sg_Core_RefreshScreen();
void sg_Core_RefreshScreenRestrictFPS(unsigned int TargetFPS);
float sg_Core_Rnd();
int sg_Core_RndUpto(int ubound);
float sg_Core_SaturationOf(unsigned int c);
int sg_Core_ScreenHeight();
int sg_Core_ScreenWidth();
void sg_Core_SetIcon(char *filename);
void sg_Core_SwinGameVersion(char *result);
void sg_Core_TakeScreenshot(char *basename);
void sg_Core_ToggleFullScreen();
void sg_Core_ToggleWindowBorder();
unsigned char sg_Core_TransparencyOf(unsigned int c);
int sg_Core_WindowCloseRequested();
vector sg_Geometry_AddVectors(vector *v1, vector *v2);
void sg_Geometry_ApplyMatrix(matrix2d m, triangle tri);
void sg_Geometry_ApplyMatrixToPoints(matrix2d m, point2d *pts, int pts_len);
float sg_Geometry_CalculateAngle(float x1, float y1, float x2, float y2);
float sg_Geometry_CalculateAngleBetween(point2d *pt1, point2d *pt2);
float sg_Geometry_CalculateAngleBetweenSprites(void *s1, void *s2);
float sg_Geometry_CalculateAngleBetweenVectors(vector *v1, vector *v2);
circle sg_Geometry_CircleAt(point2d *pt, int radius);
point2d sg_Geometry_CircleCenterPoint(circle *c);
circle sg_Geometry_CircleFromXY(float x, float y, int radius);
shape_prototype sg_Geometry_CirclePrototypeFrom(point2d *pt, float r);
int sg_Geometry_CircleRadius(circle *c);
int sg_Geometry_CircleWithinRect(circle *c, rectangle *rect);
float sg_Geometry_CircleX(circle *c);
float sg_Geometry_CircleY(circle *c);
point2d sg_Geometry_ClosestPointOnCircle(point2d *fromPt, circle *c);
point2d sg_Geometry_ClosestPointOnLine(point2d *fromPt, line_segment *line);
point2d sg_Geometry_ClosestPointOnLineFromCircle(circle *c, line_segment *line);
point2d sg_Geometry_ClosestPointOnLineXY(float x, float y, line_segment *line);
point2d sg_Geometry_ClosestPointOnLinesFromCircle(circle *c, lines_array lines, int lines_len);
point2d sg_Geometry_ClosestPointOnRectFromCircle(circle *c, rectangle *rect);
float sg_Geometry_Cosine(float angle);
point2d sg_Geometry_DistantPointOnCircle(point2d *pt, circle *c);
int sg_Geometry_DistantPointOnCircleHeading(point2d *pt, circle *c, vector *heading, point2d *oppositePt);
float sg_Geometry_DotProduct(vector *v1, vector *v2);
void sg_Geometry_FixRect(float *x, float *y, int width, int height);
void sg_Geometry_FixRectangle(rectangle *rect);
void sg_Geometry_FreePrototype(shape_prototype *p);
void sg_Geometry_FreeShape(shape *s);
void sg_Geometry_IdentityMatrix(matrix2d result);
rectangle sg_Geometry_InsetRectangle(rectangle *rect, int insetAmount);
rectangle sg_Geometry_Intersection(rectangle *rect1, rectangle *rect2);
vector sg_Geometry_InvertVector(vector *v);
vector sg_Geometry_LimitVector(vector *v, float limit);
vector sg_Geometry_LineAsVector(line_segment *line);
int sg_Geometry_LineCircleHit(circle *c, vector *velocity, lines_array lines, line_segment *found, int lines_len);
int sg_Geometry_LineCount(void *s);
line_segment sg_Geometry_LineFrom(float x1, float y1, float x2, float y2);
line_segment sg_Geometry_LineFromPointToPoint(point2d *pt1, point2d *pt2);
line_segment sg_Geometry_LineFromVector(vector *mv);
line_segment sg_Geometry_LineFromVectorWithStartPoint(point2d *pt, vector *mv);
line_segment sg_Geometry_LineFromVectorWithStartXY(float x, float y, vector *mv);
int sg_Geometry_LineIntersectionPoint(line_segment *line1, line_segment *line2, point2d *pt);
int sg_Geometry_LineIntersectsCircle(line_segment *l, circle *c);
int sg_Geometry_LineIntersectsLines(line_segment *line, lines_array lines, int lines_len);
int sg_Geometry_LineIntersectsRect(line_segment *line, rectangle *rect);
shape_prototype sg_Geometry_LineListPrototypeFrom(point2d_array points, int points_len);
float sg_Geometry_LineMagnitudeSq(float x1, float y1, float x2, float y2);
float sg_Geometry_LineMagnitudeSqFromLine(line_segment *line);
point2d sg_Geometry_LineMidPoint(line_segment *line);
vector sg_Geometry_LineNormal(line_segment *line);
shape_prototype sg_Geometry_LinePrototypeFrom(point2d *startPt, point2d *endPt);
int sg_Geometry_LineSegmentsIntersect(line_segment *line1, line_segment *line2);
shape_prototype sg_Geometry_LineStripPrototypeFrom(point2d_array points, int points_len);
void sg_Geometry_LineToString(line_segment *ln, char *result);
void sg_Geometry_LinesFromRect(rectangle *rect, line_segment *result, int result_len);
void sg_Geometry_LinesFromShape(void *s, line_segment *result, int result_len);
void sg_Geometry_LinesFromTriangle(triangle tri, line_segment *result, int result_len);
void sg_Geometry_MatrixMultiply(matrix2d m1, matrix2d m2, matrix2d result);
vector sg_Geometry_MatrixMultiplyVector(matrix2d m, vector *v);
void sg_Geometry_MatrixToString(matrix2d m, char *result);
int sg_Geometry_MinimumPointsForKind(shape_kind k);
point2d sg_Geometry_PointAdd(point2d *pt1, point2d *pt2);
point2d sg_Geometry_PointAt(float x, float y);
point2d sg_Geometry_PointAtStartWithOffset(point2d *startPoint, vector *offset);
int sg_Geometry_PointInCircle(point2d *pt, circle *c);
int sg_Geometry_PointInRect(point2d *pt, rectangle *rect);
int sg_Geometry_PointInRectXY(point2d *pt, float x, float y, float w, float h);
int sg_Geometry_PointInShape(point2d *pt, void *s);
int sg_Geometry_PointInTriangle(point2d *pt, triangle tri);
float sg_Geometry_PointLineDistance(point2d *pt, line_segment *line);
int sg_Geometry_PointOnLine(point2d *pt, line_segment *line);
float sg_Geometry_PointPointDistance(point2d *pt1, point2d *pt2);
shape_prototype sg_Geometry_PointPrototypeFrom(point2d *pt);
void sg_Geometry_PointToString(point2d *pt, char *result);
int sg_Geometry_PointXYInRect(float x, float y, rectangle *rect);
int sg_Geometry_PointXYInRectXY(float ptX, float ptY, float x, float y, float w, float h);
float sg_Geometry_PointXYLineDistance(float x, float y, line_segment *line);
void sg_Geometry_PointsFromLine(line_segment *line, point2d *result, int result_len);
void sg_Geometry_PointsFromRect(rectangle *rect, point2d *result, int result_len);
shape_prototype sg_Geometry_PrototypeFrom(point2d_array points, shape_kind kind, int points_len);
shape_kind sg_Geometry_PrototypeKind(void *p);
int sg_Geometry_PrototypePointCount(void *p);
void sg_Geometry_PrototypePoints(void *p, point2d *result, int result_len);
void sg_Geometry_PrototypeSetKind(void *p, shape_kind value);
void sg_Geometry_PrototypeSetPoints(void *p, point2d_array value, int value_len);
float sg_Geometry_RayCircleIntersectDistance(point2d *ray_origin, vector *ray_heading, circle *c);
int sg_Geometry_RayIntersectionPoint(point2d *fromPt, vector *heading, line_segment *line, point2d *pt);
rectangle sg_Geometry_RectangleAfterMove(rectangle *rect, vector *mv);
rectangle sg_Geometry_RectangleAtPoint(point2d *pt, int width, int height);
float sg_Geometry_RectangleBottom(rectangle *rect);
point2d sg_Geometry_RectangleBottomLeft(rectangle *rect);
point2d sg_Geometry_RectangleBottomRight(rectangle *rect);
point2d sg_Geometry_RectangleCenter(rectangle *rect);
point2d sg_Geometry_RectangleCenterBottom(rectangle *rect);
point2d sg_Geometry_RectangleCenterLeft(rectangle *rect);
point2d sg_Geometry_RectangleCenterRight(rectangle *rect);
point2d sg_Geometry_RectangleCenterTop(rectangle *rect);
rectangle sg_Geometry_RectangleForPoints(point2d *pt1, point2d *pt2);
rectangle sg_Geometry_RectangleFrom(float x, float y, int w, int h);
rectangle sg_Geometry_RectangleFromCircle(circle *c);
rectangle sg_Geometry_RectangleFromLine(line_segment *line);
rectangle sg_Geometry_RectangleFromLines(lines_array lines, int lines_len);
rectangle sg_Geometry_RectangleFromTriangle(triangle tri);
float sg_Geometry_RectangleLeft(rectangle *rect);
rectangle sg_Geometry_RectangleOffset(rectangle *rect, vector *vec);
float sg_Geometry_RectangleRight(rectangle *rect);
void sg_Geometry_RectangleToString(rectangle *rect, char *result);
float sg_Geometry_RectangleTop(rectangle *rect);
point2d sg_Geometry_RectangleTopLeft(rectangle *rect);
point2d sg_Geometry_RectangleTopRight(rectangle *rect);
int sg_Geometry_RectanglesIntersect(rectangle *rect1, rectangle *rect2);
void sg_Geometry_RotationMatrix(float deg, matrix2d result);
void sg_Geometry_ScaleMatrix(float scale, matrix2d result);
void sg_Geometry_ScaleMatrixByPoint(point2d *scale, matrix2d result);
void sg_Geometry_ScaleRotateTranslateMatrix(point2d *scale, float deg, point2d *translate, matrix2d result);
rectangle sg_Geometry_ShapeAABB(void *shp);
void sg_Geometry_ShapeAddSubShape(void *parent, void *child);
float sg_Geometry_ShapeAngle(void *s);
shape sg_Geometry_ShapeAtPoint(void *p, point2d *pt);
circle sg_Geometry_ShapeCircle(void *shp);
circle sg_Geometry_ShapeCircleOffset(void *shp, point2d *offset);
unsigned int sg_Geometry_ShapeColor(void *s);
line_segment sg_Geometry_ShapeLine(void *shp);
line_segment sg_Geometry_ShapeLineOffset(void *shp, point2d *offset);
void sg_Geometry_ShapeLines(void *shp, shape_kind kind, line_segment *result, int result_len);
void sg_Geometry_ShapeLinesWithOffset(void *shp, shape_kind kind, point2d *offset, line_segment *result, int result_len);
int sg_Geometry_ShapePointCount(void *s);
void sg_Geometry_ShapePoints(void *s, point2d *result, int result_len);
int sg_Geometry_ShapeRectangleIntersect(void *shp, rectangle *rect);
point2d sg_Geometry_ShapeScale(void *s);
void sg_Geometry_ShapeSetAngle(void *s, float value);
void sg_Geometry_ShapeSetColor(void *s, unsigned int value);
void sg_Geometry_ShapeSetPrototype(void *s, void *value);
void sg_Geometry_ShapeSetScale(void *s, point2d *value);
shape_kind sg_Geometry_ShapeShapeKind(void *shp);
shape_prototype sg_Geometry_ShapeShapePrototype(void *s);
void sg_Geometry_ShapeTriangle(void *shp, triangle result);
void sg_Geometry_ShapeTriangleWithOffset(void *shp, point2d *offset, triangle result);
void sg_Geometry_ShapeTriangles(void *shp, shape_kind kind, triangle_array result, int result_len);
void sg_Geometry_ShapeTrianglesOffset(void *shp, shape_kind kind, point2d *offset, triangle_array result, int result_len);
float sg_Geometry_Sine(float angle);
vector sg_Geometry_SubtractVectors(vector *v1, vector *v2);
float sg_Geometry_Tangent(float angle);
int sg_Geometry_TangentPoints(point2d *fromPt, circle *c, point2d *p1, point2d *p2);
void sg_Geometry_TranslationMatrix(float dx, float dy, matrix2d result);
void sg_Geometry_TranslationMatrixPt(point2d *pt, matrix2d result);
point2d sg_Geometry_TriangleBarycenter(triangle tri);
shape_prototype sg_Geometry_TriangleFanPrototypeFrom(point2d_array points, int points_len);
void sg_Geometry_TriangleFrom(float ax, float ay, float bx, float by, float cx, float cy, triangle result);
void sg_Geometry_TriangleFromPoints(point2d *a, point2d *b, point2d *c, triangle result);
shape_prototype sg_Geometry_TriangleListPrototypeFrom(point2d_array points, int points_len);
shape_prototype sg_Geometry_TrianglePrototypeFrom(point2d *pt1, point2d *pt2, point2d *pt3);
int sg_Geometry_TriangleRectangleIntersect(triangle tri, rectangle *rect);
shape_prototype sg_Geometry_TriangleStripPrototypeFrom(point2d_array points, int points_len);
void sg_Geometry_TriangleToString(triangle tri, char *result);
int sg_Geometry_TrianglesRectangleIntersect(triangle_array tri, rectangle *rect, int tri_len);
vector sg_Geometry_UnitVector(vector *v);
void sg_Geometry_UpdateShapePoints(void *s);
float sg_Geometry_VectorAngle(vector *v);
vector sg_Geometry_VectorFromAngle(float angle, float magnitude);
vector sg_Geometry_VectorFromPointPtToRectangle(point2d *pt, rectangle *rect);
vector sg_Geometry_VectorFromPointToRect(float x, float y, float rectX, float rectY, int rectWidth, int rectHeight);
vector sg_Geometry_VectorFromPointToRectangle(float x, float y, rectangle *rect);
vector sg_Geometry_VectorFromPoints(point2d *p1, point2d *p2);
int sg_Geometry_VectorInRect(vector *v, rectangle *rect);
int sg_Geometry_VectorInRectXY(vector *v, float x, float y, float w, float h);
int sg_Geometry_VectorIsZero(vector *v);
float sg_Geometry_VectorMagnitude(vector *v);
float sg_Geometry_VectorMagnitudeSq(vector *v);
vector sg_Geometry_VectorMultiply(vector *v, float s);
vector sg_Geometry_VectorNormal(vector *v);
vector sg_Geometry_VectorOutOfCircleFromCircle(circle *src, circle *bounds, vector *velocity);
vector sg_Geometry_VectorOutOfCircleFromPoint(point2d *pt, circle *c, vector *velocity);
vector sg_Geometry_VectorOutOfRectFromCircle(circle *c, rectangle *rect, vector *velocity);
vector sg_Geometry_VectorOutOfRectFromPoint(point2d *pt, rectangle *rect, vector *velocity);
vector sg_Geometry_VectorOutOfRectFromRect(rectangle *src, rectangle *bounds, vector *velocity);
vector sg_Geometry_VectorOutOfShapeFromRect(void *s, rectangle *bounds, vector *velocity);
vector sg_Geometry_VectorOverLinesFromCircle(circle *c, lines_array lines, vector *velocity, int *maxIdx, int lines_len);
vector sg_Geometry_VectorTo(float x, float y, int invertY);
vector sg_Geometry_VectorToPoint(point2d *p1);
int sg_Geometry_VectorsEqual(vector *v1, vector *v2);
void sg_Geometry_WidestPoints(circle *c, vector *along, point2d *pt1, point2d *pt2);
void sg_Graphics_ClearScreenToBlack();
void sg_Graphics_ClearScreenWithColor(unsigned int toColor);
rectangle sg_Graphics_CurrentBmpClip(void *bmp);
rectangle sg_Graphics_CurrentScreenClip();
void sg_Graphics_DrawHorizontalLine(unsigned int clr, float y, float x1, float x2);
void sg_Graphics_DrawHorizontalLineOnScreen(unsigned int clr, int y, int x1, int x2);
void sg_Graphics_DrawHorizontalLineOnto(void *dest, unsigned int clr, int y, int x1, int x2);
void sg_Graphics_DrawLine(unsigned int clr, float xPosStart, float yPosStart, float xPosEnd, float yPosEnd);
void sg_Graphics_DrawLineOnScreen(unsigned int clr, int xPosStart, int yPosStart, int xPosEnd, int yPosEnd);
void sg_Graphics_DrawLineOnto(void *dest, unsigned int clr, int xPosStart, int yPosStart, int xPosEnd, int yPosEnd);
void sg_Graphics_DrawLinePts(unsigned int clr, point2d *startPt, point2d *endPt);
void sg_Graphics_DrawLinePtsOnScreen(unsigned int clr, point2d *startPt, point2d *endPt);
void sg_Graphics_DrawLinePtsOnto(void *dest, unsigned int clr, point2d *startPt, point2d *endPt);
void sg_Graphics_DrawLineSegment(unsigned int clr, line_segment *line);
void sg_Graphics_DrawLineSegmentOnScreen(unsigned int clr, line_segment *line);
void sg_Graphics_DrawLineSegmentOnto(void *dest, unsigned int clr, line_segment *line);
void sg_Graphics_DrawLineSegments(unsigned int clr, lines_array lines, int lines_len);
void sg_Graphics_DrawOrFillCircle(unsigned int clr, int filled, circle *c);
void sg_Graphics_DrawOrFillCircleAtPointOnScreen(unsigned int clr, int filled, point2d *position, int radius);
void sg_Graphics_DrawOrFillCircleOnScreen(unsigned int clr, int filled, circle *c);
void sg_Graphics_DrawOrFillCircleOnto(void *dest, unsigned int clr, int filled, circle *c);
void sg_Graphics_DrawOrFillEllipse(unsigned int clr, int filled, float xPos, float yPos, int width, int height);
void sg_Graphics_DrawOrFillEllipseInRect(unsigned int clr, int filled, rectangle *source);
void sg_Graphics_DrawOrFillEllipseInRectOnScreen(unsigned int clr, int filled, rectangle *source);
void sg_Graphics_DrawOrFillEllipseInRectOnto(void *dest, unsigned int clr, int filled, rectangle *source);
void sg_Graphics_DrawOrFillEllipseOnScreen(unsigned int clr, int filled, int xPos, int yPos, int width, int height);
void sg_Graphics_DrawOrFillEllipseOnto(void *dest, unsigned int clr, int filled, int xPos, int yPos, int width, int height);
void sg_Graphics_DrawOrFillPtCircle(unsigned int clr, int filled, float xc, float yc, int radius);
void sg_Graphics_DrawOrFillPtCircleAtPoint(unsigned int clr, int filled, point2d *position, int radius);
void sg_Graphics_DrawOrFillPtCircleAtPointOnto(void *dest, unsigned int clr, int filled, point2d *point, int radius);
void sg_Graphics_DrawOrFillPtCircleOnScreen(unsigned int clr, int filled, float xc, float yc, int radius);
void sg_Graphics_DrawOrFillPtCircleOnto(void *dest, unsigned int clr, int filled, float xc, float yc, int radius);
void sg_Graphics_DrawOrFillRectangle(unsigned int clr, int filled, float xPos, float yPos, int width, int height);
void sg_Graphics_DrawOrFillRectangleOnScreen(unsigned int clr, int filled, int xPos, int yPos, int width, int height);
void sg_Graphics_DrawOrFillRectangleOnto(void *dest, unsigned int clr, int filled, int xPos, int yPos, int width, int height);
void sg_Graphics_DrawOrFillRectangleRect(unsigned int clr, int filled, rectangle *source);
void sg_Graphics_DrawOrFillRectangleRectOnScreen(unsigned int clr, int filled, rectangle *source);
void sg_Graphics_DrawOrFillRectangleRectOnto(void *dest, unsigned int clr, int filled, rectangle *source);
void sg_Graphics_DrawOrFillShape(void *s, int filled);
void sg_Graphics_DrawOrFillShapeOnScreen(void *s, int filled);
void sg_Graphics_DrawOrFillShapeOnto(void *dest, void *s, int filled);
void sg_Graphics_DrawOrFillTriangle(unsigned int clr, int filled, triangle tri);
void sg_Graphics_DrawOrFillTriangleOnScreen(unsigned int clr, int filled, triangle tri);
void sg_Graphics_DrawOrFillTriangleOnto(void *dest, unsigned int clr, int filled, triangle tri);
void sg_Graphics_DrawPixel(unsigned int clr, float x, float y);
void sg_Graphics_DrawPixelAtPoint(unsigned int clr, point2d *position);
void sg_Graphics_DrawPixelAtPointOnScreen(unsigned int clr, point2d *position);
void sg_Graphics_DrawPixelAtPointOnto(void *dest, unsigned int clr, point2d *position);
void sg_Graphics_DrawPixelOnScreen(unsigned int clr, int x, int y);
void sg_Graphics_DrawPixelOnto(void *dest, unsigned int clr, int x, int y);
void sg_Graphics_DrawShape(void *s);
void sg_Graphics_DrawShapeAsCircle(void *dest, void *s, int filled, point2d *offset);
void sg_Graphics_DrawShapeAsLine(void *dest, void *s, int filled, point2d *offset);
void sg_Graphics_DrawShapeAsLineList(void *dest, void *s, int filled, point2d *offset);
void sg_Graphics_DrawShapeAsLineStrip(void *dest, void *s, int filled, point2d *offset);
void sg_Graphics_DrawShapeAsPoint(void *dest, void *s, int filled, point2d *offset);
void sg_Graphics_DrawShapeAsTriangle(void *dest, void *s, int filled, point2d *offset);
void sg_Graphics_DrawShapeAsTriangleFan(void *dest, void *s, int filled, point2d *offset);
void sg_Graphics_DrawShapeAsTriangleList(void *dest, void *s, int filled, point2d *offset);
void sg_Graphics_DrawShapeAsTriangleStrip(void *dest, void *s, int filled, point2d *offset);
void sg_Graphics_DrawShapeOnScreen(void *s);
void sg_Graphics_DrawShapeOnto(void *dest, void *s);
void sg_Graphics_DrawTriangleFromPoints(unsigned int clr, float x1, float y1, float x2, float y2, float x3, float y3);
void sg_Graphics_DrawTriangleFromPointsOnScreen(unsigned int clr, float x1, float y1, float x2, float y2, float x3, float y3);
void sg_Graphics_DrawTriangleFromPointsOnto(void *dest, unsigned int clr, float x1, float y1, float x2, float y2, float x3, float y3);
void sg_Graphics_DrawVerticalLine(unsigned int clr, float x, float y1, float y2);
void sg_Graphics_DrawVerticalLineOnScreen(unsigned int clr, int x, int y1, int y2);
void sg_Graphics_DrawVerticalLineOnto(void *dest, unsigned int clr, int x, int y1, int y2);
void sg_Graphics_FillShape(void *s);
void sg_Graphics_FillShapeOnScreen(void *s);
void sg_Graphics_FillShapeOnto(void *dest, void *s);
void sg_Graphics_FillTriangleFromPoints(unsigned int clr, float x1, float y1, float x2, float y2, float x3, float y3);
void sg_Graphics_FillTriangleFromPointsOnScreen(unsigned int clr, float x1, float y1, float x2, float y2, float x3, float y3);
void sg_Graphics_FillTriangleFromPointsOnto(void *dest, unsigned int clr, float x1, float y1, float x2, float y2, float x3, float y3);
unsigned int sg_Graphics_GetPixel(void *bmp, int x, int y);
unsigned int sg_Graphics_GetPixelFromScreen(int x, int y);
void sg_Graphics_PopClipBmp(void *bmp);
void sg_Graphics_PopClipScreen();
void sg_Graphics_PushClipRect(rectangle *r);
void sg_Graphics_PushClipRectForBitmap(void *bmp, rectangle *r);
void sg_Graphics_PushClipXY(int x, int y, int w, int h);
void sg_Graphics_PutPixel(void *bmp, unsigned int value, int x, int y);
void sg_Graphics_ResetClip();
void sg_Graphics_ResetClipForBitmap(void *bmp);
void sg_Graphics_SetBmpClip(void *bmp, rectangle *r);
void sg_Graphics_SetBmpClipXY(void *bmp, int x, int y, int w, int h);
void sg_Graphics_SetClip(rectangle *r);
void sg_Graphics_SetClipXY(int x, int y, int w, int h);
circle sg_Images_BitmapCellCircle(void *bmp, point2d *pt);
circle sg_Images_BitmapCellCircleXY(void *bmp, int x, int y);
int sg_Images_BitmapCellColumns(void *bmp);
int sg_Images_BitmapCellCount(void *bmp);
int sg_Images_BitmapCellHeight(void *bmp);
bitmap_cell sg_Images_BitmapCellOf(void *bmp, int cell);
rectangle sg_Images_BitmapCellRectangle(point2d *pt, void *bmp);
rectangle sg_Images_BitmapCellRectangleAtOrigin(void *bmp);
rectangle sg_Images_BitmapCellRectangleXY(float x, float y, void *bmp);
int sg_Images_BitmapCellRows(void *bmp);
int sg_Images_BitmapCellWidth(void *bmp);
circle sg_Images_BitmapCircle(void *bmp, point2d *pt);
circle sg_Images_BitmapCircleXY(void *bmp, int x, int y);
int sg_Images_BitmapHeight(void *bmp);
int sg_Images_BitmapHeightForCell(bitmap_cell *bmp);
void sg_Images_BitmapName(void *bmp, char *result);
bitmap sg_Images_BitmapNamed(char *name);
rectangle sg_Images_BitmapRectAtOrigin(void *bmp);
rectangle sg_Images_BitmapRectXY(float x, float y, void *bmp);
rectangle sg_Images_BitmapRectangleOfCell(void *src, int cell);
void sg_Images_BitmapSetCellDetails(void *bmp, int width, int height, int columns, int rows, int count);
int sg_Images_BitmapWidth(void *bmp);
int sg_Images_BitmapWidthForCell(bitmap_cell *bmp);
void sg_Images_BitmapfileName(void *bmp, char *result);
int sg_Images_BitmapsInterchangable(void *bmp1, void *bmp2);
void sg_Images_ClearSurface(void *dest, unsigned int toColor);
void sg_Images_ClearSurfaceToBlack(void *dest);
bitmap sg_Images_CreateBitmap(int width, int height);
void sg_Images_DrawBitmap(void *src, float x, float y);
void sg_Images_DrawBitmapAtPoint(void *src, point2d *position);
void sg_Images_DrawBitmapAtPointOnScreen(void *src, point2d *position);
void sg_Images_DrawBitmapAtPointOnto(void *dest, void *src, point2d *position);
void sg_Images_DrawBitmapCell(bitmap_cell *src, float x, float y);
void sg_Images_DrawBitmapCellAtPoint(bitmap_cell *src, point2d *position);
void sg_Images_DrawBitmapCellAtPointOnScreen(bitmap_cell *src, point2d *position);
void sg_Images_DrawBitmapCellAtPointOnto(void *dest, bitmap_cell *src, point2d *position);
void sg_Images_DrawBitmapCellOnScreen(bitmap_cell *src, int x, int y);
void sg_Images_DrawBitmapCellOnto(void *dest, bitmap_cell *src, int x, int y);
void sg_Images_DrawBitmapOnScreen(void *src, int x, int y);
void sg_Images_DrawBitmapOnto(void *dest, void *src, int x, int y);
void sg_Images_DrawBitmapPart(void *src, int srcX, int srcY, int srcW, int srcH, float x, float y);
void sg_Images_DrawBitmapPartFromRect(void *src, rectangle *source, float x, float y);
void sg_Images_DrawBitmapPartFromRectAtPoint(void *src, rectangle *source, point2d *position);
void sg_Images_DrawBitmapPartFromRectAtPointOnScreen(void *src, rectangle *source, point2d *position);
void sg_Images_DrawBitmapPartFromRectAtPointOnto(void *dest, void *src, rectangle *source, point2d *position);
void sg_Images_DrawBitmapPartFromRectOnScreen(void *src, rectangle *source, int x, int y);
void sg_Images_DrawBitmapPartFromRectOnto(void *dest, void *src, rectangle *source, int x, int y);
void sg_Images_DrawBitmapPartOnScreen(void *src, int srcX, int srcY, int srcW, int srcH, int x, int y);
void sg_Images_DrawBitmapPartOnto(void *dest, void *src, int srcX, int srcY, int srcW, int srcH, int x, int y);
void sg_Images_DrawCell(void *src, int cell, point2d *position);
void sg_Images_DrawCellOnScreen(void *src, int cell, point2d *position);
void sg_Images_DrawCellOnScreenXY(void *src, int cell, float x, float y);
void sg_Images_DrawCellOnto(void *dest, void *src, int cell, point2d *position);
void sg_Images_DrawCellOntoXY(void *dest, void *src, int cell, float x, float y);
void sg_Images_DrawCellXY(void *src, int cell, float x, float y);
void sg_Images_FreeBitmap(bitmap *bitmapToFree);
int sg_Images_HasBitmap(char *name);
bitmap sg_Images_LoadBitmap(char *filename);
bitmap sg_Images_LoadBitmapWithTransparentColor(char *filename, int transparent, unsigned int transparentColor);
void sg_Images_MakeOpaque(void *bmp);
void sg_Images_MakeTransparent(void *bmp);
bitmap sg_Images_MapBitmap(char *name, char *filename);
bitmap sg_Images_MapTransparentBitmap(char *name, char *filename, unsigned int transparentColor);
void sg_Images_OptimiseBitmap(void *surface);
int sg_Images_PixelDrawnAtPoint(void *bmp, int x, int y);
void sg_Images_ReleaseAllBitmaps();
void sg_Images_ReleaseBitmap(char *name);
bitmap sg_Images_RotateScaleBitmap(void *src, float degRot, float scale);
int sg_Images_SameBitmapCell(bitmap_cell *bmp1, bitmap_cell *bmp2);
void sg_Images_SaveBitmap(void *src, char *filepath);
void sg_Images_SaveToPNG(void *bmp, char *filename);
void sg_Images_SetOpacity(void *bmp, float pct);
void sg_Images_SetTransparentColor(void *src, unsigned int clr);
void sg_Images_SetupBitmapForCollisions(void *src);
int sg_Input_AnyKeyPressed();
void sg_Input_EndReadingText(char *result);
void sg_Input_HideMouse();
int sg_Input_KeyDown(key_code key);
void sg_Input_KeyName(key_code key, char *result);
int sg_Input_KeyTyped(key_code key);
int sg_Input_MouseClicked(mouse_button button);
int sg_Input_MouseDown(mouse_button button);
vector sg_Input_MouseMovement();
point2d sg_Input_MousePosition();
vector sg_Input_MousePositionAsVector();
int sg_Input_MouseShown();
int sg_Input_MouseUp(mouse_button button);
float sg_Input_MouseX();
float sg_Input_MouseY();
void sg_Input_MoveMouse(unsigned short x, unsigned short y);
void sg_Input_MoveMouseToPoint(point2d *point);
int sg_Input_ReadingText();
void sg_Input_SetMouseVisible(int show);
void sg_Input_ShowMouse();
void sg_Input_StartReadingText(unsigned int textColor, int maxLength, void *theFont, int x, int y);
void sg_Input_StartReadingTextWithText(char *text, unsigned int textColor, int maxLength, void *theFont, int x, int y);
void sg_Input_StartReadingTextWithTextAtPt(char *text, unsigned int textColor, int maxLength, void *theFont, point2d *pt);
void sg_Input_StartReadingTextWithTextInArea(char *text, unsigned int textColor, int maxLength, void *theFont, rectangle *area);
void sg_Input_StartReadingTextWithinArea(unsigned int textColor, int maxLength, void *theFont, rectangle *area);
int sg_Input_TextEntryCancelled();
void sg_Input_TextReadAsASCII(char *result);
int sg_Physics_BitmapAtPointsCollision(void *bmp1, point2d *pt1, void *bmp2, point2d *pt2);
int sg_Physics_BitmapCollision(void *bmp1, int x1, int y1, void *bmp2, int x2, int y2);
int sg_Physics_BitmapPartAtPtRectCollision(void *bmp, point2d *pt, rectangle *part, rectangle *rect);
int sg_Physics_BitmapPartRectCollision(void *bmp, int x, int y, rectangle *part, rectangle *rect);
int sg_Physics_BitmapPointCollision(void *bmp, int x, int y, float ptX, float ptY);
int sg_Physics_BitmapPointCollisionPart(void *bmp, int x, int y, rectangle *part, float ptX, float ptY);
int sg_Physics_BitmapPointPtCollision(void *bmp, int x, int y, point2d *pt);
int sg_Physics_BitmapPointXYCollisionPart(void *bmp, int x, int y, rectangle *part, point2d *pt);
int sg_Physics_BitmapRectCollision(void *bmp, int x, int y, int rectX, int rectY, int rectWidth, int rectHeight);
int sg_Physics_BitmapRectangleCollision(void *bmp, int x, int y, rectangle *rect);
int sg_Physics_BitmapsPartsCollision(void *bmp1, point2d *pt1, rectangle *part1, void *bmp2, point2d *pt2, rectangle *part2);
int sg_Physics_CellBitmapCollision(void *bmp1, int cell, int x1, int y1, void *bmp2, int x2, int y2);
int sg_Physics_CellBitmapCollisionAtPt(void *bmp1, int cell, point2d *pt1, void *bmp2, point2d *pt2);
int sg_Physics_CellBitmapPartCollision(void *bmp1, int cell, int x1, int y1, void *bmp2, int x2, int y2, rectangle *part);
int sg_Physics_CellBitmapPartCollisionAtPt(void *bmp1, int cell, point2d *pt1, void *bmp2, point2d *pt2, rectangle *part);
int sg_Physics_CellCollision(void *bmp1, int cell1, int x1, int y1, void *bmp2, int cell2, int x2, int y2);
int sg_Physics_CellCollisionAtPt(void *bmp1, int cell1, point2d *pt1, void *bmp2, int cell2, point2d *pt2);
int sg_Physics_CellRectCollision(void *bmp, int cell, int x, int y, rectangle *rect);
int sg_Physics_CellRectCollisionAtPt(void *bmp, int cell, point2d *pt, rectangle *rect);
int sg_Physics_CircleCircleCollision(circle *c1, circle *c2);
int sg_Physics_CircleLinesCollision(circle *c, lines_array lines, int lines_len);
int sg_Physics_CircleRectCollision(circle *c, rectangle *rect);
int sg_Physics_CircleTriangleCollision(circle *c, triangle tri);
void sg_Physics_CollideCircleCircle(void *s, circle *c);
void sg_Physics_CollideCircleLine(void *s, line_segment *line);
void sg_Physics_CollideCircleLines(void *s, lines_array lines, int lines_len);
void sg_Physics_CollideCircleRectangle(void *s, rectangle *rect);
void sg_Physics_CollideCircles(void *s1, void *s2);
int sg_Physics_RectLineCollision(rectangle *rect, line_segment *line);
collision_side sg_Physics_SideForCollisionTest(vector *velocity);
int sg_Physics_SpriteBitmapAtPointCollision(void *s, void *bmp, point2d *pt);
int sg_Physics_SpriteBitmapCollision(void *s, void *bmp, float x, float y);
int sg_Physics_SpriteCircleLineCollision(void *s, line_segment *line);
int sg_Physics_SpriteCollision(void *s1, void *s2);
int sg_Physics_SpriteRectCollision(void *s, float x, float y, int width, int height);
int sg_Physics_SpriteRectLineCollision(void *s, line_segment *line);
int sg_Physics_SpriteRectangleCollision(void *s, rectangle *r);
int sg_Physics_SpriteShapeCollision(void *s, void *shp);
int sg_Physics_TriangleLineCollision(triangle tri, line_segment *ln);
void sg_Resources_AppPath(char *result);
void sg_Resources_FilenameToResource(char *name, resource_kind kind, char *result);
int sg_Resources_HasResourceBundle(char *name);
void sg_Resources_LoadResourceBundle(char *name, int showProgress);
void sg_Resources_MapResourceBundle(char *name, char *filename, int showProgress);
void sg_Resources_PathToOtherResource(char *filename, char *result);
void sg_Resources_PathToOtherResourceWithBase(char *path, char *filename, char *result);
void sg_Resources_PathToResource(char *filename, resource_kind kind, char *result);
void sg_Resources_PathToResourceWithBase(char *path, char *filename, resource_kind kind, char *result);
void sg_Resources_PathToResourceWithSubPaths(char *filename, resource_kind kind, string_array subPaths, char *result, int subPaths_len);
void sg_Resources_RegisterFreeNotifier(void (*fn)(void*));
void sg_Resources_ReleaseAllResources();
void sg_Resources_ReleaseResourceBundle(char *name);
void sg_Resources_SetAppPath(char *path);
void sg_Resources_SetAppPathWithExe(char *path, int withExe);
void sg_Resources_ShowLogos();
point2d sg_Sprites_CenterPoint(void *s);
sprite sg_Sprites_CreateBasicSprite(void *layer);
sprite sg_Sprites_CreateLayeredSprite(bitmap_array layers, int layers_len);
sprite sg_Sprites_CreateLayeredSpriteWithAnimationTemplate(bitmap_array layers, void *ani, int layers_len);
sprite sg_Sprites_CreateLayeredSpriteWithLayerNames(bitmap_array layers, string_array layerNames, int layers_len, int layerNames_len);
sprite sg_Sprites_CreateLayeredSpriteWithLayerNamesAndAnimationTemplate(bitmap_array layers, string_array layerNames, void *ani, int layers_len, int layerNames_len);
sprite sg_Sprites_CreateSpriteWithAnimation(void *layer, void *ani);
sprite sg_Sprites_CreateSpriteWithLayer(void *layer, char *layerName);
sprite sg_Sprites_CreateSpriteWithLayerAndAnimation(void *layer, char *layerName, void *ani);
void sg_Sprites_DrawSpriteOffsetPoint(void *s, point2d *position);
void sg_Sprites_DrawSpriteOffsetXY(void *s, int xOffset, int yOffset);
void sg_Sprites_FreeSprite(sprite *s);
int sg_Sprites_IsSpriteOffscreen(void *s);
void sg_Sprites_MoveSprite(void *s, float pct);
void sg_Sprites_MoveSpriteTo(void *s, int x, int y);
void sg_Sprites_MoveSpriteVecPct(void *s, vector *velocity, float pct);
void sg_Sprites_ReplayAnimationWithSound(void *s, int withSound);
int sg_Sprites_SpriteAddLayer(void *s, void *newLayer, char *layerName);
void sg_Sprites_SpriteAddValue(void *s, char *name);
void sg_Sprites_SpriteAddValueWithInitialValue(void *s, char *name, float initVal);
int sg_Sprites_SpriteAnimationHasEnded(void *s);
void sg_Sprites_SpriteBringLayerForward(void *s, int visibleLayer);
void sg_Sprites_SpriteBringLayerToFront(void *s, int visibleLayer);
circle sg_Sprites_SpriteCircle(void *s);
bitmap sg_Sprites_SpriteCollisionBitmap(void *s);
circle sg_Sprites_SpriteCollisionCircle(void *s);
collision_test_kind sg_Sprites_SpriteCollisionKind(void *s);
rectangle sg_Sprites_SpriteCollisionRectangle(void *s);
int sg_Sprites_SpriteCurrentCell(void *s);
rectangle sg_Sprites_SpriteCurrentCellRectangle(void *s);
float sg_Sprites_SpriteDX(void *s);
float sg_Sprites_SpriteDY(void *s);
float sg_Sprites_SpriteHeading(void *s);
int sg_Sprites_SpriteHeight(void *s);
void sg_Sprites_SpriteHideLayer(void *s, int id);
void sg_Sprites_SpriteHideLayerNamed(void *s, char *name);
bitmap sg_Sprites_SpriteLayerAtIdx(void *s, int idx);
circle sg_Sprites_SpriteLayerCircle(void *s, int idx);
int sg_Sprites_SpriteLayerCount(void *s);
int sg_Sprites_SpriteLayerHeight(void *s, int idx);
int sg_Sprites_SpriteLayerIndex(void *s, char *name);
void sg_Sprites_SpriteLayerName(void *s, int idx, char *result);
bitmap sg_Sprites_SpriteLayerNamed(void *s, char *name);
circle sg_Sprites_SpriteLayerNamedCircle(void *s, char *name);
int sg_Sprites_SpriteLayerNamedHeight(void *s, char *name);
rectangle sg_Sprites_SpriteLayerNamedRectangle(void *s, char *name);
int sg_Sprites_SpriteLayerNamedWidth(void *s, char *name);
point2d sg_Sprites_SpriteLayerOffset(void *s, int idx);
point2d sg_Sprites_SpriteLayerOffsetNamed(void *s, char *name);
void sg_Sprites_SpriteLayerOffsets(void *s, point2d *result, int result_len);
rectangle sg_Sprites_SpriteLayerRectangle(void *s, int idx);
int sg_Sprites_SpriteLayerWidth(void *s, int idx);
void sg_Sprites_SpriteLayers(void *s, bitmap_array result, int result_len);
float sg_Sprites_SpriteMass(void *s);
int sg_Sprites_SpriteOnScreenAt(void *s, int x, int y);
int sg_Sprites_SpriteOnScreenAtPoint(void *s, point2d *pt);
point2d sg_Sprites_SpritePosition(void *s);
void sg_Sprites_SpriteReplayAnimation(void *s);
float sg_Sprites_SpriteRotation(void *s);
float sg_Sprites_SpriteScale(void *s);
rectangle sg_Sprites_SpriteScreenRectangle(void *s);
void sg_Sprites_SpriteSendLayerBackward(void *s, int visibleLayer);
void sg_Sprites_SpriteSendLayerToBack(void *s, int visibleLayer);
void sg_Sprites_SpriteSetCollisionBitmap(void *s, void *bmp);
void sg_Sprites_SpriteSetCollisionKind(void *s, collision_test_kind value);
void sg_Sprites_SpriteSetDX(void *s, float value);
void sg_Sprites_SpriteSetDY(void *s, float value);
void sg_Sprites_SpriteSetHeading(void *s, float value);
void sg_Sprites_SpriteSetLayerOffset(void *s, int idx, point2d *value);
void sg_Sprites_SpriteSetLayerOffsetNamed(void *s, char *name, point2d *value);
void sg_Sprites_SpriteSetLayerOffsets(void *s, point2d_array value, int value_len);
void sg_Sprites_SpriteSetMass(void *s, float value);
void sg_Sprites_SpriteSetPosition(void *s, point2d *value);
void sg_Sprites_SpriteSetRotation(void *s, float value);
void sg_Sprites_SpriteSetScale(void *s, float value);
void sg_Sprites_SpriteSetSpeed(void *s, float value);
void sg_Sprites_SpriteSetValue(void *s, int idx, float val);
void sg_Sprites_SpriteSetValueNamed(void *s, char *name, float val);
void sg_Sprites_SpriteSetVelocity(void *s, vector *value);
void sg_Sprites_SpriteSetX(void *s, float value);
void sg_Sprites_SpriteSetY(void *s, float value);
int sg_Sprites_SpriteShowLayer(void *s, int id);
int sg_Sprites_SpriteShowLayerNamed(void *s, char *name);
float sg_Sprites_SpriteSpeed(void *s);
void sg_Sprites_SpriteStartAnimation(void *s, int idx);
void sg_Sprites_SpriteStartAnimationNamed(void *s, char *named);
void sg_Sprites_SpriteStartAnimationNamedWithSound(void *s, char *named, int withSound);
void sg_Sprites_SpriteStartAnimationWithSound(void *s, int idx, int withSound);
void sg_Sprites_SpriteToggleLayerNamedVisible(void *s, char *name);
void sg_Sprites_SpriteToggleLayerVisible(void *s, int id);
float sg_Sprites_SpriteValue(void *s, int index);
int sg_Sprites_SpriteValueCount(void *s);
float sg_Sprites_SpriteValueNamed(void *s, char *name);
void sg_Sprites_SpriteValueNames(void *s, string_array result, int result_len);
vector sg_Sprites_SpriteVelocity(void *s);
int sg_Sprites_SpriteVisibleIndexOfLayer(void *s, int id);
int sg_Sprites_SpriteVisibleIndexOfLayerNamed(void *s, char *name);
int sg_Sprites_SpriteVisibleLayer(void *s, int idx);
int sg_Sprites_SpriteVisibleLayerCount(void *s);
void sg_Sprites_SpriteVisibleLayerIds(void *s, int *result, int result_len);
int sg_Sprites_SpriteWidth(void *s);
float sg_Sprites_SpriteX(void *s);
float sg_Sprites_SpriteY(void *s);
void sg_Sprites_UpdateSpriteAnimationPctWithSound(void *s, float pct, int withSound);
void sg_Sprites_UpdateSpritePctWithSound(void *s, float pct, int withSound);
vector sg_Sprites_VectorFromCenterSpriteToPoint(void *s, point2d *pt);
vector sg_Sprites_VectorFromTo(void *s1, void *s2);
void sg_Text_DrawFrameRateWithSimpleFont(int x, int y);
void sg_Text_DrawFramerate(int x, int y, void *font);
void sg_Text_DrawSimpleText(char *theText, unsigned int textColor, float x, float y);
void sg_Text_DrawSimpleTextOnBitmap(void *dest, char *theText, unsigned int textColor, float x, float y);
void sg_Text_DrawSimpleTextOnScreen(char *theText, unsigned int textColor, float x, float y);
void sg_Text_DrawSimpleTextPt(char *theText, unsigned int textColor, point2d *pt);
void sg_Text_DrawText(char *theText, unsigned int textColor, void *theFont, float x, float y);
void sg_Text_DrawTextAtPoint(char *theText, unsigned int textColor, void *theFont, point2d *pt);
void sg_Text_DrawTextLines(char *theText, unsigned int textColor, unsigned int backColor, void *theFont, font_alignment align, float x, float y, int w, int h);
void sg_Text_DrawTextLinesInRect(char *theText, unsigned int textColor, unsigned int backColor, void *theFont, font_alignment align, rectangle *withinRect);
void sg_Text_DrawTextLinesInRectOnBitmap(void *dest, char *theText, unsigned int textColor, unsigned int backColor, void *theFont, font_alignment align, rectangle *withinRect);
void sg_Text_DrawTextLinesInRectOnScreen(char *theText, unsigned int textColor, unsigned int backColor, void *theFont, font_alignment align, rectangle *withinRect);
void sg_Text_DrawTextLinesOnBitmap(void *dest, char *theText, unsigned int textColor, unsigned int backColor, void *theFont, font_alignment align, int x, int y, int w, int h);
void sg_Text_DrawTextLinesOnScreen(char *theText, unsigned int textColor, unsigned int backColor, void *theFont, font_alignment align, int x, int y, int w, int h);
void sg_Text_DrawTextOnBitmap(void *dest, char *theText, unsigned int textColor, void *theFont, int x, int y);
void sg_Text_DrawTextOnBitmapAtPoint(void *dest, char *theText, unsigned int textColor, void *theFont, point2d *pt);
void sg_Text_DrawTextOnScreen(char *theText, unsigned int textColor, void *theFont, int x, int y);
void sg_Text_DrawTextOnScreenAtPoint(char *theText, unsigned int textColor, void *theFont, point2d *pt);
font_style sg_Text_FontFontStyle(void *font);
void sg_Text_FontNameFor(char *fontName, int size, char *result);
font sg_Text_FontNamed(char *name);
font sg_Text_FontNamedWithSize(char *name, int size);
void sg_Text_FontSetStyle(void *font, font_style value);
void sg_Text_FreeFont(font *fontToFree);
int sg_Text_HasFont(char *name);
font sg_Text_LoadFont(char *fontName, int size);
font sg_Text_MapFont(char *name, char *filename, int size);
void sg_Text_ReleaseAllFonts();
void sg_Text_ReleaseFont(char *name);
font_alignment sg_Text_TextAlignmentFrom(char *str);
int sg_Text_TextHeight(void *theFont, char *theText);
int sg_Text_TextWidth(void *theFont, char *theText);
timer sg_Timers_CreateTimer();
void sg_Timers_FreeTimer(timer *toFree);
void sg_Timers_PauseTimer(void *toPause);
void sg_Timers_ResetTimer(void *tmr);
void sg_Timers_ResumeTimer(void *toUnpause);
void sg_Timers_StartTimer(void *toStart);
void sg_Timers_StopTimer(void *toStop);
unsigned int sg_Timers_TimerTicks(void *toGet);
#endif
