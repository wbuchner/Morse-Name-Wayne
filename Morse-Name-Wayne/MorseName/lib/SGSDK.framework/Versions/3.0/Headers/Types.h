/*
* Generated by SGWrapperGen - DO NOT EDIT!
*
* SwinGame wrapper for C - Types
*
* Wrapping sgTypes.pas
*/

#include <stdbool.h>

#ifndef sgTypes
#define sgTypes

typedef int *long_int_array;

typedef int *long_int_ptr;

typedef char **string_array;

typedef float *singles_array;

typedef char **string_ptr;

typedef struct { 
    string_array names;
    void *ids;
} named_index_collection;

typedef struct { 
    float x;
    float y;
} point2d;

typedef struct { 
    float x;
    float y;
} vector;

typedef point2d *point2d_ptr;

typedef point2d *point2d_array;

typedef struct { 
    float x;
    float y;
    int width;
    int height;
} rectangle;

typedef struct { 
    point2d center;
    int radius;
} circle;

typedef struct { 
    point2d start_point;
    point2d end_point;
} line_segment;

typedef point2d triangle[3];

typedef line_segment *lines_array;

typedef triangle *triangle_array;

typedef triangle *triangle_ptr;

typedef line_segment *line_segment_ptr;

typedef struct { 
    void *effect;
    char *filename;
    char *name;
} sound_effect_data;

typedef void *sound_effect;

typedef struct { 
    void *music;
    char *filename;
    char *name;
} music_data;

typedef void *music;

typedef float matrix2d[3][3];

typedef float *single_ptr;

typedef enum { 
    TOP,
    BOTTOM,
    LEFT,
    RIGHT,
    TOP_LEFT,
    TOP_RIGHT,
    BOTTOM_LEFT,
    BOTTOM_RIGHT,
    NONE
} collision_side;

typedef unsigned int color;

typedef struct { 
} animation_frame;

typedef struct { 
    int index;
    int cell_index;
    void *sound;
    float duration;
    animation_frame next;
} animation_frame_data;

typedef struct { 
    char *name;
    char *filename;
    named_index_collection animation_ids;
    int *animations;
    animation_frame *frames;
} animation_template_data;

typedef void *animation_template;

typedef struct { 
    animation_frame first_frame;
    animation_frame current_frame;
    animation_frame last_frame;
    float frame_time;
    int entered_frame;
} animation_data;

typedef void *animation;

typedef struct { 
    char *filename;
    char *name;
    void *surface;
    int width;
    int height;
    int cell_w;
    int cell_h;
    int cell_cols;
    int cell_rows;
    int cell_count;
    bool *non_transparent_pixels;
    rectangle *clip_stack;
} bitmap_data;

typedef void *bitmap;

typedef struct { 
    void *bmp;
    int cell;
} bitmap_cell;

typedef enum { 
    PK_POINT,
    PK_CIRCLE,
    PK_LINE,
    PK_TRIANGLE,
    PK_LINE_LIST,
    PK_LINE_STRIP,
    PK_TRIANGLE_STRIP,
    PK_TRIANGLE_FAN,
    PK_TRIANGLE_LIST
} shape_kind;

typedef void *shape_prototype;

typedef void *shape;

typedef void (*shape_drawing_fn)(void*,void*,int);

typedef struct { 
    point2d *points;
    shape_kind kind;
    int shape_count;
    void (*draw_with)(void*,void*,int);
} shape_prototype_data;

typedef shape *shape_array;

typedef struct { 
    point2d pt;
    void *prototype;
    unsigned int color;
    point2d scale;
    float angle;
    point2d *pt_buffer;
    shape *sub_shapes;
} shape_data;

typedef enum { 
    BUNDLE_RESOURCE,
    BITMAP_RESOURCE,
    FONT_RESOURCE,
    MUSIC_RESOURCE,
    MAP_RESOURCE,
    SOUND_RESOURCE,
    ANIMATION_RESOURCE,
    PANEL_RESOURCE,
    CHARACTER_RESOURCE,
    OTHER_RESOURCE
} resource_kind;

typedef enum { 
    PIXEL_COLLISIONS,
    AABBCOLLISIONS
} collision_test_kind;

typedef struct { 
    named_index_collection layer_ids;
    void *layers;
    int *visible_layers;
    point2d *layer_offsets;
    float *values;
    named_index_collection value_ids;
    void *animation_data;
    void *animation_template;
    point2d position;
    vector velocity;
    collision_test_kind collision_kind;
    void *collision_bitmap;
} sprite_data;

typedef void *sprite;

typedef struct { 
    unsigned int start_ticks;
    unsigned int paused_ticks;
    int paused;
    int started;
} timer_data;

typedef void *timer;

typedef void *font;

typedef enum { 
    NORMAL_FONT = 0,
    BOLD_FONT = 1,
    ITALIC_FONT = 2,
    UNDERLINE_FONT = 4
} font_style;

typedef enum { 
    ALIGN_LEFT = 1,
    ALIGN_CENTER = 2,
    ALIGN_RIGHT = 4
} font_alignment;

typedef void *bitmap_array;

typedef void *bitmap_ptr;

typedef enum { 
    NO_BUTTON,
    LEFT_BUTTON,
    MIDDLE_BUTTON,
    RIGHT_BUTTON,
    WHEEL_UP_BUTTON,
    WHEEL_DOWN_BUTTON,
    MOUSE_X1BUTTON,
    MOUSE_X2BUTTON
} mouse_button;

typedef enum { 
    VK_UNKNOWN = 0,
    VK_BACKSPACE = 8,
    VK_TAB = 9,
    VK_CLEAR = 12,
    VK_RETURN = 13,
    VK_PAUSE = 19,
    VK_ESCAPE = 27,
    VK_SPACE = 32,
    VK_EXCLAIM = 33,
    VK_QUOTEDBL = 34,
    VK_HASH = 35,
    VK_DOLLAR = 36,
    VK_AMPERSAND = 38,
    VK_QUOTE = 39,
    VK_LEFTPAREN = 40,
    VK_RIGHTPAREN = 41,
    VK_ASTERISK = 42,
    VK_PLUS = 43,
    VK_COMMA = 44,
    VK_MINUS = 45,
    VK_PERIOD = 46,
    VK_SLASH = 47,
    VK_0 = 48,
    VK_1 = 49,
    VK_2 = 50,
    VK_3 = 51,
    VK_4 = 52,
    VK_5 = 53,
    VK_6 = 54,
    VK_7 = 55,
    VK_8 = 56,
    VK_9 = 57,
    VK_COLON = 58,
    VK_SEMICOLON = 59,
    VK_LESS = 60,
    VK_EQUALS = 61,
    VK_GREATER = 62,
    VK_QUESTION = 63,
    VK_AT = 64,
    VK_LEFTBRACKET = 91,
    VK_BACKSLASH = 92,
    VK_RIGHTBRACKET = 93,
    VK_CARET = 94,
    VK_UNDERSCORE = 95,
    VK_BACKQUOTE = 96,
    VK_A = 97,
    VK_B = 98,
    VK_C = 99,
    VK_D = 100,
    VK_E = 101,
    VK_F = 102,
    VK_G = 103,
    VK_H = 104,
    VK_I = 105,
    VK_J = 106,
    VK_K = 107,
    VK_L = 108,
    VK_M = 109,
    VK_N = 110,
    VK_O = 111,
    VK_P = 112,
    VK_Q = 113,
    VK_R = 114,
    VK_S = 115,
    VK_T = 116,
    VK_U = 117,
    VK_V = 118,
    VK_W = 119,
    VK_X = 120,
    VK_Y = 121,
    VK_Z = 122,
    VK_DELETE = 127,
    VK_WORLD_0 = 160,
    VK_WORLD_1 = 161,
    VK_WORLD_2 = 162,
    VK_WORLD_3 = 163,
    VK_WORLD_4 = 164,
    VK_WORLD_5 = 165,
    VK_WORLD_6 = 166,
    VK_WORLD_7 = 167,
    VK_WORLD_8 = 168,
    VK_WORLD_9 = 169,
    VK_WORLD_10 = 170,
    VK_WORLD_11 = 171,
    VK_WORLD_12 = 172,
    VK_WORLD_13 = 173,
    VK_WORLD_14 = 174,
    VK_WORLD_15 = 175,
    VK_WORLD_16 = 176,
    VK_WORLD_17 = 177,
    VK_WORLD_18 = 178,
    VK_WORLD_19 = 179,
    VK_WORLD_20 = 180,
    VK_WORLD_21 = 181,
    VK_WORLD_22 = 182,
    VK_WORLD_23 = 183,
    VK_WORLD_24 = 184,
    VK_WORLD_25 = 185,
    VK_WORLD_26 = 186,
    VK_WORLD_27 = 187,
    VK_WORLD_28 = 188,
    VK_WORLD_29 = 189,
    VK_WORLD_30 = 190,
    VK_WORLD_31 = 191,
    VK_WORLD_32 = 192,
    VK_WORLD_33 = 193,
    VK_WORLD_34 = 194,
    VK_WORLD_35 = 195,
    VK_WORLD_36 = 196,
    VK_WORLD_37 = 197,
    VK_WORLD_38 = 198,
    VK_WORLD_39 = 199,
    VK_WORLD_40 = 200,
    VK_WORLD_41 = 201,
    VK_WORLD_42 = 202,
    VK_WORLD_43 = 203,
    VK_WORLD_44 = 204,
    VK_WORLD_45 = 205,
    VK_WORLD_46 = 206,
    VK_WORLD_47 = 207,
    VK_WORLD_48 = 208,
    VK_WORLD_49 = 209,
    VK_WORLD_50 = 210,
    VK_WORLD_51 = 211,
    VK_WORLD_52 = 212,
    VK_WORLD_53 = 213,
    VK_WORLD_54 = 214,
    VK_WORLD_55 = 215,
    VK_WORLD_56 = 216,
    VK_WORLD_57 = 217,
    VK_WORLD_58 = 218,
    VK_WORLD_59 = 219,
    VK_WORLD_60 = 220,
    VK_WORLD_61 = 221,
    VK_WORLD_62 = 222,
    VK_WORLD_63 = 223,
    VK_WORLD_64 = 224,
    VK_WORLD_65 = 225,
    VK_WORLD_66 = 226,
    VK_WORLD_67 = 227,
    VK_WORLD_68 = 228,
    VK_WORLD_69 = 229,
    VK_WORLD_70 = 230,
    VK_WORLD_71 = 231,
    VK_WORLD_72 = 232,
    VK_WORLD_73 = 233,
    VK_WORLD_74 = 234,
    VK_WORLD_75 = 235,
    VK_WORLD_76 = 236,
    VK_WORLD_77 = 237,
    VK_WORLD_78 = 238,
    VK_WORLD_79 = 239,
    VK_WORLD_80 = 240,
    VK_WORLD_81 = 241,
    VK_WORLD_82 = 242,
    VK_WORLD_83 = 243,
    VK_WORLD_84 = 244,
    VK_WORLD_85 = 245,
    VK_WORLD_86 = 246,
    VK_WORLD_87 = 247,
    VK_WORLD_88 = 248,
    VK_WORLD_89 = 249,
    VK_WORLD_90 = 250,
    VK_WORLD_91 = 251,
    VK_WORLD_92 = 252,
    VK_WORLD_93 = 253,
    VK_WORLD_94 = 254,
    VK_WORLD_95 = 255,
    VK_KP0 = 256,
    VK_KP1 = 257,
    VK_KP2 = 258,
    VK_KP3 = 259,
    VK_KP4 = 260,
    VK_KP5 = 261,
    VK_KP6 = 262,
    VK_KP7 = 263,
    VK_KP8 = 264,
    VK_KP9 = 265,
    VK_KP_PERIOD = 266,
    VK_KP_DIVIDE = 267,
    VK_KP_MULTIPLY = 268,
    VK_KP_MINUS = 269,
    VK_KP_PLUS = 270,
    VK_KP_ENTER = 271,
    VK_KP_EQUALS = 272,
    VK_UP = 273,
    VK_DOWN = 274,
    VK_RIGHT = 275,
    VK_LEFT = 276,
    VK_INSERT = 277,
    VK_HOME = 278,
    VK_END = 279,
    VK_PAGEUP = 280,
    VK_PAGEDOWN = 281,
    VK_F1 = 282,
    VK_F2 = 283,
    VK_F3 = 284,
    VK_F4 = 285,
    VK_F5 = 286,
    VK_F6 = 287,
    VK_F7 = 288,
    VK_F8 = 289,
    VK_F9 = 290,
    VK_F10 = 291,
    VK_F11 = 292,
    VK_F12 = 293,
    VK_F13 = 294,
    VK_F14 = 295,
    VK_F15 = 296,
    VK_NUMLOCK = 300,
    VK_CAPSLOCK = 301,
    VK_SCROLLOCK = 302,
    VK_RSHIFT = 303,
    VK_LSHIFT = 304,
    VK_RCTRL = 305,
    VK_LCTRL = 306,
    VK_RALT = 307,
    VK_LALT = 308,
    VK_RMETA = 309,
    VK_LMETA = 310,
    VK_LSUPER = 311,
    VK_RSUPER = 312,
    VK_MODE = 313,
    VK_COMPOSE = 314,
    VK_HELP = 315,
    VK_PRINT = 316,
    VK_SYSREQ = 317,
    VK_BREAK = 318,
    VK_MENU = 319,
    VK_POWER = 320,
    VK_EURO = 321
} key_code;

typedef enum { 
    MAP_TAG1 = 0,
    MAP_TAG2 = 1,
    MAP_TAG3 = 2,
    MAP_TAG4 = 3,
    MAP_TAG5 = 4,
    MAP_TAG6 = 5,
    MAP_TAG7 = 6,
    MAP_TAG8 = 7,
    MAP_TAG9 = 8,
    MAP_TAG10 = 9,
    MAP_TAG11 = 10,
    MAP_TAG12 = 11,
    MAP_TAG13 = 12,
    MAP_TAG14 = 13,
    MAP_TAG15 = 14,
    MAP_TAG16 = 15,
    MAP_TAG17 = 16,
    MAP_TAG18 = 17,
    MAP_TAG19 = 18,
    MAP_TAG20 = 19,
    MAP_TAG21 = 20,
    MAP_TAG22 = 21,
    MAP_TAG23 = 22,
    MAP_TAG24 = 23
} map_tag;

typedef struct { 
    int x_index;
    int y_index;
    point2d top_corner;
    point2d point_a;
    point2d point_b;
    point2d point_c;
    point2d point_d;
} map_tile;

typedef struct { 
    int version;
    int map_width;
    int map_height;
    int block_width;
    int block_height;
    int number_of_blocks;
    int number_of_layers;
    int number_of_animations;
    int collision_layer;
    int tag_layer;
    int gap_x;
    int gap_y;
    int stagger_x;
    int stagger_y;
    int isometric;
} map_data;

typedef struct { 
    int animation_number;
    int delay;
    int number_of_frames;
    int *frame;
    int current_frame;
} map_animation_data;

typedef struct { 
    int *animation;
    int *value;
} map_layer_data;

typedef struct { 
    bool *collidable;
} map_collision_data;

typedef struct { 
    int x;
    int y;
} map_tag_details;

typedef struct { 
    map_data map_info;
    map_animation_data *animation_info;
    map_layer_data *layer_info;
    map_collision_data collision_info;
    map_tag_details *tag_info[24];
    void *tiles;
    int animate;
    int frame;
} map_record;

typedef map_record *map;

typedef void (*free_notifier)(void*);

#endif

